This is the NOSQL DB. it does not have any restricion at column side

HoW to creater a Table[By AWS console] :  :-
  AWS > DynamoDB > Table > Create
  HEre you do not have to tell how much colum are there. the items in the table could have variation in colum.
  But you have to peovide the key. 
  There is two type of key here 
    1. Partition key	: This is just like a primary key, think of it like a address for the data related to this key.
       This has to be the unique in the whole table. IT best case scenario is UUID in user table. 
       you wants to add the user then create UUID and put thid user data with 'Partition key' = that uuid.
    2. Sort key: 
    
    
    In nutshell :-
      Say you need to create a user table but you do not know the user structure, that user could be employee, cutomer, admin, vendor 
      etc. Those all may have variuos params to store.
      The NoSql will handle it like acharm.
      You can store any kind of user with its UUID : Just for eg : ->
        uTable.store(genetrateUUID(), {name: muf, eId: 100, salary: 111} )
        uTable.store(genetrateUUID(), {name: hus, eId: 100, salary: 111} )
        uTable.store(genetrateUUID(), {name: juj, vendor: airtel, contractType: annual} )
        uTable.store(genetrateUUID(), {name: gtg, cutomerId: 34, buyListId: 45} )
    The DDB table user will take care of all this cvariation in colums and if you see the user table in AWS consoole you will 
    see all those colums but of couse many will have empty entries agains those colums.
  
 Structure of Data :-
    IN DDB the data stored somthing like this. 
    U simply have to have a unique PRimary-key for any data-item that you wants to store in the DDB.
    against this PRimary-key all the data will be stored. 
    The that data inside also have a attributes which are nothing but a column 
  Primary Key:- 
    This is the partition key which has to be unique in the table. VVIMP: it is not at all qutogenerated. 
    you have to provide by yourself only.
    It is of 2 types
    a. Partition Key :- a simple one key 
    b. Sort key :- combination of two keys 

    EG:-
    Say we are using a simple partition key, and You have a tabe userTable and u store somthing like.
      uTable.store(genetrateUUID(), {name: muf, eId: 100, salary: 111} )
          P_KEY              name:       eId       salary
          132133 ->          muf        100       111
      uTable.store(genetrateUUID(), {name: hus, eId: 101 salary: 161} )
          P_KEY              name:       eId       salary
          132133 ->          muf         100       111
          689787 ->          hus         101       161
     uTable.store(genetrateUUID(), {name: juj, vendor: airtel, contractType: annual} )
          P_KEY              name:       eId       salary      Vendor      contractType
          132133 ->          muf         100       111
          689787 ->          hus         101       161
          545455 ->          juj                              airtel        annual
     uTable.store(genetrateUUID(), {name: gtg, cutomerId: 34, buyListId: 45} )
          P_KEY              name:       eId       salary      Vendor      contractType    cutomerId       buyListId
          132133 ->          muf         100       111
          689787 ->          hus         101       161
          689787 ->          juj                              airtel        annual
          975434 ->          gtg                                                           34               45

  So above there you can see how a data are stored against there PK and eacg row have diffrent attributes.


Authentication and connection the DDB via AWS-SDK :-
  To perfornm any operation over DDB cia SDG first you have to do some basic setup.
  For this first you have to install the AWS-SDK. say if uou are using the nodejs. the install the SDK via 'npm i aws-sdk'
    Now do the authentication with proper IAM user/role for the SDK.
    For diffrent env -
        1. Authenticating  for non-AWS system :-
            for this read 'AWS JS SDK.txt' #AWSSDK_AUTH_BY_KEY_ID

      2. Authenticating for EC2 :-
          There is two way to do the Authentication here
            1. Via AWS config file : same as of 'non-AWS system'. For this read EC2.txt #AUTHEC2_WAY_1 [never recommended]
            2. By assigning a Role which has 'AmazonDynamoDBFullAccess' Policy attached to it. for more read #AUTHEC2_WAY_2

     3. Authenticating for Lembda :-
          ????????????


  Create Table:
    ?????????????????????  
  
  
  
  
Querying the DDB :- 
  Once authentiacation is successful the you can query the data via below code:-              
	var docClient = new AWS.DynamoDB.DocumentClient();
	var params = { TableName: "MufUser",  ...... };
	docClient.get(params, function(err, data) { console.log(err, data) });    
	Params here define that what the data you will get afetr the calling get function.
    
 There is three diffrent technique to read the data. for this you have to provide proper values in params
	and in all three way you have to provide TableName (of course)
	Now lets see those 3 :-
  1 : get By the Primary Key (partition or Sort) :-
        Just provide the partition-key 
        var params = { TableName: "MufUser",  Key:{ "userID": "34" } };	
        This will gives you all the attributes stored against the key '34'. This is most efficient and fastest way.
        This only work with PK not with other attribute
        So below params will give error in 'get' function
     var params = { TableName: "MufUser",  Key:{ "name": "mufa" } };	  
     Basioclly 'key' in params accept only and only promary key.
     
     PK as Sort Key :-
        ??????????????????
     This is most widely used way to get the data because it give whole data for that PK. 
     But it has only one disadvantage. You have to provide the exack key. But lets say you wants to get the info about couple of key
     then its useless.
     
  2 : Query:-
      By query function you can get the data fro the primary-keys that satisfy some contion (so more than one key) and also then
      filter result for some specifiv attribute value. So basically it gives you way more tools to get precise results.
      Unlike in get you retrive data for one particular PK. but here data is from many PK and also filtered via sonme attributer va;lues
      
           var paramsQuery = {
              TableName: "MufUser",
              KeyConditionExpression: "userID = :a",
              ExpressionAttributeValues: { ":a": "34" }
            }     
        Out:
          [ { name: 'eee', genger: 'male', userID: '34' } ]
          
          
        KeyConditionExpression and Partition-key :- 
          VVVIMP: in the query function param you can use ONLY ONLY and ONLY 'equal' operatior for Partition-key. youi cannot ever use
                  any other operator with partition-key.
                  You can use any operator with 'srtt-ket' though. How ??????????????
        So all blow statement simply give an error
        ...
        KeyConditionExpression: "userID > :a",
        ExpressionAttributeValues: { ":a": "34" }
        ...
        OR
        ...
        KeyConditionExpression: "userID IN :a",
        ExpressionAttributeValues: { ":a": {SS: [34, 78, 67]} }
        ...
        
        
        
        
          
          
          
          
          
          
          
          
          
          
          
      
      
        
        
  
  
