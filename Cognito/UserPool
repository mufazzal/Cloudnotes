In short in Cognito is Red Hat SSO of AWS.

This is the complete user management system which provide
  1. User sign up via pre-built registration form or via Facebook/Google or via any SAML active directory.
  2. User sign in via pre-built login form or via Facebook/Google or via any SAML active directory.
  3. USer delete/enable/password change etc functions.
  4. It can be used as federation authentication via OAuth 2.0 for other Apps.
  5. User pool with identity pool provide strong binding with IAM for user access management over AWS services like S3 etc.
  6. strongly coupled with Lambda for authentication.
  
  Only User Pool  ->  Authentication
  User Pool + Identity Pool -> Authentication + Autherization.
  
  User Pool and FB/Gmail/SAML :-
    The cognito user pool is directory of user. In this directory user can register himself with form or FB or gamil or SAML anything.
    Of course the developer has to configure each of thi id provide if required.
  
  UserPool and User:-
    The User pool will have one entry for each user no matter he registered with Form, FB, Gmail, SAML etc.
    No matter how he register hinmself, they will be logged in via same Login page. Of cource this page will have option of 
    Login via Username/Password, By FB, BY Gmail, By SAML.
  
  UserPool and App Client:-
    The user pool in himself can also work as fedrated Authenticator, which can Authenticate the user on behalf of Client APp via Oauth 2.0
    For this the Client App has to register himself with UsePool with Name and redirectUrl.
    Each of Client App will then be provided with Client_id and also of he need them client_secret.
    
    
    So there is thre major data table prsent in each userPool
        1. Its integration detail with FB/Gmail/SAML etc.
        2. The user table. which has credetial (username/password or FB ID or Gmail Id or SAML id) for each indivisual user
        3. The list of App Client register with userPool who wants to authenticate user by userpool on his behalf.
        
        
        In nutshell it look like this-       
                                                                            
                                   AS                                       
      -------------------------------------------------------------         
      |                         User Creds Table                  |			
      |     --------------------------------------------------    |			
      |     | ID | TYPE |  USERNAME   |  PASSWORD   |  scID  |    |         
      |     | ## | FB   |  mufa_FB    |             |  6486  |    |         
      |     | ## | RGTR |  h_mufazz   |  t!fs$fsd   |        |    |         
      |     | ## | RGTR |  fatem_23   |  2334SDew   |        |    |         
      |     | ## | GOGL |  murtuzaa   |             |  32232 |    |         
      |     | ## | SAML |  sd@amd.c   |             |  457u8 |    |         
      |     --------------------------------------------------    |         
      |                                                           |         
      |                                                           |         
      |                     App Clients Table                     |         
      |     --------------------------------------------------    |         
      |     | NAME  |   C_ID   |  C_SECRET   |  CLBK_URL     |    |         
      |     | APP1  | xgsuhw13 |  asassqsws  | www.app1.com  |    |         
      |     | APP2  | asds23sd |  45wfytgb   | www.app2.com  |    |			
      |     | usrPO | iwndo24l |             | urPo.abc.com  |    |			
      |     | admPo | eicne35e |  43dfy6vd   | adPo.abc.com  |    |			
      |     | conAp | efdfhdi2 |             | google.com    |    |         
      |     --------------------------------------------------    |         
      |                                                           |         
      |                                                           |         
      |                    Federation-integration data    		  |
	  |   	|-------------------------------------------|		  |
      |   	| 	                 						|		  |
	  |		|	FB-> 	{	AppId: 'mufFbPage'			|		  |
	  |		|				AppSecret: '23422343'	 }	|		  |
	  |		|	Gmail-> {	AppId: 'mufGmailApp'		|		  |
	  |		|				AppSecret: '23we434'	 }	|		  |
	  |		|	SAML-> {	provider: 'amdocsid'		|		  |
	  |		|				identifier: 'username'	 }	|		  |
	  |		|-------------------------------------------|		  |
	  |															  |	
	  |         												  |	
      |                                                           |         
	  |						[Login Page]  						  |			
      |           {Token API}                                     |         
      |                                                           |         
	  -------------------------------------------------------------                
        

user pool and Federation-id-provider set up:-
    Here you set the necessary information about how the diffrent id provider(FB, Gmil, SAML) are integrated with your uerpool.
    This is regarding 'Federation-integration data' in the above figure.
    In AWS console:-
        AWS > Cognito > manage usetr pool > select your pool > in Federation select identity provider
        You can see diffrent options like FB, Gmail, SAML here.
        fill the data for the id provider you wants to integrate.
   This is one time activity for each provider and developer has to do it at a time of set up 
  
user pool and and App Client:-
    The App client who uses the userpool for on his behalf to authenticate the user.
    Each App client has to register himself.
    As like in OAuth 2.0 for any client to register he need to provide the name and Callbackurl.
    and then the userPool (our Authentiction server) will return him the Client_id and Client_Secret(if needed)
    Later clients will use this information to authenticate the user on its behalf.
    
    This is also one time activity for each client.
    
user pool and and user table:-
    This is where the data about the usr lie. For each user either he register via form, FB, Gmail, SAML 
    there will be one row for that user.

user pool + Client + Registration:-
	There is two eay to register the user in userpool
	1. Directly via aws console
	2. Via hosted UI of any App client
	
	For both of the case the process is same. AppClient matter only at a time of Login.
	
	The regitered user will have an entery in user table, no matter on which client behalf it is added in user table.
	Actully at a time of registration client does not even matter. All user are same at that point.
	
	
user pool + Client + Login :-
	At a time of Login via hosten UI, it does matter on which client bhalf the Login page is open.
	So the access token will be issue to that user only for that client.

So no matter its for uerPool himself or on behalf of any App Client, for login the user will be presented with the Login Page 
owned completely by the userpool. This page do have options to either login by diffrent mean like.


Setting up userPool:-
	to create the userpool just go to  AWS > Cognito > manage pool > Create pool
	type name and press 'step through setting'
	Now fill detail of each step if required.
	This are some basit detail for user sign in/sign up functions. like requiret attribute, MFA, password and email formate etc.
	Go through it is beter.


Setting up userPool and Fedrated id provider:-
	When you wnats to integrate the other fedrated id proider to the pool. you need to provide some detail.
	FA/Gmail or anu OAuth 2.0 complient AS : just add Client_secret and Cliet_is
	for other like saml and OIDC add the necessary detail.
		- 

Setting up userPool and Appclient:-
	This is where you set the App Client who wnakts to use the the your uerpool for authentication of user via OAuth 2.0 protocol.
	Appclient are the Aith2.0 compatible clients who will later ask the uaserpool to authenticate the user on behalf of himself.
	
	Please Note:-
		userPool and Fedrated id provider 	-> Here the userpool is become OAuth2.0-Client and Fedrated-id-provider is the OAuth2.0-Auth-Server 
		userPool and Appclient				-> Here the userpool is OAuth2.0-Auth-Server and Appclient is a OAuth2.0-Client

	As you know the Auth2.0 contract between the AS and Client is that 
		Client will give his name and callback_url and in return AS will handover Clent the Client_id and Client_secret.

	Steps to set AppClient:-
		1. Cognito > User Pool > Select ur > pool > App Client in General setting > Add Client
		2. Type client Name say 'admPo'.
		3. Generate Client Secret:-	
			You have option to choose if you wants to generate the secret ot not. in step 6.4 we will see when we should generate it and when shouldn't
		4. press Ok. and a Appclient will be created. But this is not yet usable. Dont why AWS did it. it stil need some config set up.
		5. You will aslo see the AppClient id and secret(if checked earlier) which are nothing bit Client_id and Client_secret for 'admPo'
			You will need this two later for Auth flows.
		6. Now cofigure th client in more detail->
			6.1 go to  App Integration > App Client setting > see detail of client 'admPo'
			6.2 Enabled Identity Providers: checked it why ?????????
			6.3 Callback URL: put tha callback ur for this Client [See what is callback url of Auth2.0 Client in OAthe2.0.txt]
			6.4 Allowed OAuth Flows  :-
				As you know in Auth2.0 ther is three mechanism of Auth flow, now here you decide what flow will be allowed and what not
					- Authorization code grant: Checked if you wants to allowe this flow. If you choose this flow then you cannot select
							'Client Credential' flow
					- Implicit Grant:-	Checked if you wants to allowe this flow. If you choose this flow then you cannot select
							'Client Credential' flow	
						NOTE: There is some bug in AWS, due to that the if AppClient have checked the 'Client secret' in step 3
							then this two flow will not work. so if you want to use this two flow then do not create the secret fir that client.
					- Client credentials: Checked if you wants to allowe this flow. If you choose this flow then you cannot select
							'Authorization code grant' flow and 'Implicit Grant' flow
							This flow work only if Appclient has Client_secret.					
			6.5: Allowed OAuth Scopes  : ??????????????????/
			6.6: Allowed Custom Scopes  : ???????????????
		7: 	Hosted UI Customization: (Optional) The Login page in completely owned by the userpool not by client('admPo')
			yet you can customize some look and feel feature of Login page for each Client. you can do it at 
				App Integration > App Client setting > Hosted UI
				in dropdown choose the Client and change the UI features if you wants.
			

UserPool and Auth 2.0 Flow mechanisn:-
	AS you know there is three mechanism to Authenticate the user by userpool on behalf of Client.
	For API detail see the APIs in postman   AWS > Cognito > Cognito.
	
	Lets say the Client is 'MufAppClient' and user poll is 'MufTestPool' and user is Muffy
	Now Client (MufAppClient) on his behalf, wnats to authenticate user (Muffy) by Authentaction sever (MufTestPool) 
	
	Auth Code Flow:-	
		Use url 'IDP Login URL' postman and past it in browser to perform the Authentication. This will open the login page of 'MufTestPool' on behalf of 'MufAppClient'   	
		Also vaerify that 'state' return in redirection url is same as we gave in Header (dummyRandom)
		This work only if  Cognito > USer Pool > select the pool > click 'App Client Setting' in 'App Integration' > Go to card of your App > Check 'Authorization code grant'
		After auth success full get the 'code' from redirect page url.
		formate of this redirect url is-
				https://<redirect url>/?code=<Auth Code>&state=dummyRandom

		Now AppCliebt have to read this code and use this to get the Oauth2.0 Tokens
		For this use this API:-  'Grant: Code: Client withot Secret'
		This a piwill generate the three token Id, Access, refresh.
		
		IMP: This flow only work for client without Client_secret.
			
	Implicit Grant
		For this use url:- in postman 'Grant: Implicit: Client without Secret', paste it in broser and do the login.
		After auth successfull get the 'tokens' from redirect page url.
		formate of this redirect url is-
				https://<redirect url>/?
				access_Token=<...>
				id_token=<...>
				expiire_at=<....>
				type=bearer&
				state=dummyRandom

		get the token from here.
		IMP: This flow only work for client without Client_secret.
		
	Clirnt Credention:- For this user is not at all involved. its just between userpool and Client.
		Uer API:-	'Grant: CC: Client witht Secret' in postman
		IMP: This flow only work for client with Client_secret.
		
	
--------------------

Cognito Auth and Amplify:-
	The process of writing code authenticating the user is pretty tedious to do.
	But AWS provide you very easy way to do it via AWsAmplify.
	After few line of code with proper config files you can do it pretty quick. you do not at all worry aout the back and forth 
	exchanges of tokens between diffrent systems.
	
	See the code in 'UAPUI/App.js' for authentication
	
	



