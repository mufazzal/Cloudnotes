Lambda and VPC:
  By default lambda has no relation with any VPC(imcluding default VPC).
  Lambda in itself is a small piece of code that that execute on demand. in itself it is not a node like EC2 or RDS.
  Lambda do not lie in any VPC. and Lambda cannot have any Public or Private IP address attached to himself.
  BUT
  what if you nmeed to communicate with any node lie in VPC via lambda.
  EG: you wants to read the data from RDS which lie in a subnet of VPC, or you need to run a api hosted on EC2 lieing in VPC

  There is two possible scenarion
  SC1. The node (EC2, RDS etc) of VPC you wants to communicate lies in Public Subnet
        - In this case you do not have to do anything. becoz if node is in public subnet then it accessible via internrt and 
          you can simply communicate with then with public IP of those nodes.

   SC2. The node (EC2, RDS etc) of VPC you wants to communicate lies in private Subnet
        - This is tricky. If node is in private subnet then lambda also has to execute in VPC.
        
   Again two possible solution     
   we can host the Lambda in public or private sunbnet     
        
  sol1. Placing the Lambda in Public Subnet:-
          You can place it in public subnet but in that case lambda will not be able to access the public internet.
          Why
          Because even though the Lambda function is running inside a public subnet of a VPC, 
          But the Lambda functions do not, and cannot, have public IP addresses. 
          You cannot send traffic to the internet, via the VPC's Internet Gateway, 
          unless you have a IP(private). You would need to route through a NAT Getway.
          Lambda in public subnet can only access the nodes lieing in VPC not the internet. so its vert limiting.
          
   sol2: Placing the Lambda in Private Subnet without NAT getway:-           
          This is again of no use becoz private subnet without NAT getway cannot access the internet.
          
   sol3: Placing the Lambda in Private Subnet with NAT getway:-         
          This is perfect. here you can access all the nodes in VPA as well as the internet in the lambda function.
          
   How could i implement sol3?
   You will need
    - For NAT getway to exist you must fiest need at leat one public subnet.
    - A Private subnet with NAT getway attached to it
    - Security Group: This security group is wraped arroud the lambda so it should have proper inbound and outbound rule.
                        Generally lambda dont need any inbound rule as it is not like any server or DB which has an IP address.
                        and outbound should open to all internet.
                        So default VPC group is enough if you do not wants to restrict anything.
    - Execution Role: You know that lambda has a role. If you wants to put a lambda in VPC 
                        then the lambda should have the policy 'AWSLambdaVPCAccessExecutionRole' attached to it. 
    
    
    Steps:-
      1. AWS > LAmbda > you lambda function > go to VPC section > Edit
      2. set VPC connection to 'custom'
      3. Choose VPC
      4. Choose private subnet lying in that VPc. (choose at least two for high avilability)
      5. Select Security group ????????????
      6. Create a Role for the Lambda which has following polocy attached
          'AWSLambdaVPCAccessExecutionRole'
          TIP: You can create and assign it simply by using the template at
                6.1 AWS > LAmbda > you lambda function > Permission > Execution role > Edit
                6.2 ????????????????????
      7. Done.
      
      Now you cann access internet as well as all the private node lying in VPC.
      
      What happen in backgroud:-
        The step above are fairely simple but inside the aws it make lot of changes.
        When Lambda attach to any VPC, the AWS system actully use 'Elastic Network Interface' to create a network aroud the lambda 
        that connect the VPC. 
        To create this network tha lambda must need the permission 'AWSLambdaVPCAccessExecutionRole'
        Also once wrapped via ENI, the lambda also behave like a Node in network, simillar to EC2 or RDS.
        You cannot use the Lambda untill the ENI is up and attached to it. till then lambda stay in Pending state.       
            
       - ENI created at Lambda level not at each execution of lambda. There may be 100s of instance running at a timr of a lambda they all will sahre same ENI.     
       - Lambda functions can't connect directly to a VPC with dedicated instance tenancy. To connect to resources in a dedicated VPC, peer it to a second VPC with default tenancy
       - AWS can connect multiple Lambda in same subnet with single ENI.
       - If the function is not used for longer time then AWS can release the ENI. and put the LAmbda in 'Pending' state
        
      Consideraion:-
        When you launch the lambda in the VPC, it basically create the ENI. One ENI can handle multiple execution. but if load is very high then 
        you VPC and selected subnets must have enought unused IP to create new ENI to handle peak. Otherwise there will be invocaion error.
        So at a time of attaching to VPC make sure that you choose multiple sunet if diffrent AZ and those subnet have enough unused IPs.
        
        
        
        
--------------------
  
  Interface Endpiont for Lambda:-
    Suppose your infra is private and you wants to invoke the lambda without having the IG, NAT gateway, VPG.
    for this you can create the Interface EP for lambda.
    The link for this is 'com.amazonaws.<region>.lambda'
    
----------------------
  RDS Proxie Databases:-
    If you are connecting to any RDS DB from the LAmbda and if you create a DB connection for each invoked lambda then there will hell lot of connection.
    So it is imprctical to have a connection for each lambda. To solve this comes Amazon RDS Proxy.
    This is manages a pool of database connections.
    You create it for a lambda function. and all the invoked instances use connections from this proxies pool.
    This enables a function to reach high concurrency levels without exhausting database connections
----------------------
  EFS mount point:-
    You can configure a function to mount an EFS system to a local directory. 
    With Amazon EFS, your function code can access and modify shared resources safely and at high concurrency
    You create it for a lambda function. and all the invoked instances use this mount point for file access.
    
    
    
