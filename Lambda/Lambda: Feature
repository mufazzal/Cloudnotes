Function:
  Function is a part which has the executable code.

  Function can be define as:-
    - A source code 
    - A Container image file

  Function as image file:-
    - For this you have to provide the Amazon ECR url.
    - You can also override beow configuration for image. Entrypoint, Command, Working directory
    - When you deploy code as a container image to a Lambda function, the image undergoes an optimization process for running on Lambda. 
      This process can take a few seconds, during which the function is in PENDING state. When the optimization process completes, the function enters the ACTIVE state.
      If function not called for weeks then lambde reclain the Optomized version and Lambda goes in INACTIVE state. It must be called at least once to put it in ACTIVS stae.
    - You must ensure that the Role/User who create this lambda (not Execution Role) must have the permission 'GetRepositoryPolicy and SetRepositoryPolicy'
------------------------------
Enviorment Variable[EV]:-
  An environment variable is a pair of strings that are stored in a function's version-specific configuration.
  You can use environment variables to adjust your function's behavior without updating code. 
  - You define EV on the unpublished version of your function. When you publish a version, the EV are locked for that version  
  - Reserved environment variables: _HANDLER, AWS_REGION, _X_AMZN_TRACE_ID, AWS_EXECUTION_ENV, AWS_LAMBDA_FUNCTION_NAME, AWS_LAMBDA_FUNCTION_VERSION, LAMBDA_RUNTIME_DIR  etc.
  - By default EV is encrypted at rest with AWS managed CMK.  You can use diffrent CMK also.
      For default CMK you do not need AWS KMS permission but for other CMK user/Execution role needs AWS KMS permission for that CMK.
  
------------------------------

Layer:-
  You can configure your Lambda function to pull in additional code and content in the form of layers. 
  A layer is a .zip file archive that contains libraries, a custom runtime, or other dependencies. 
  With layers, you can use libraries in your function without needing to include them in your deployment package and keep development package small.
  Layers are versioned and you can use ARN in the Lambda to point to specific version. 
  For any lambda you can have max 5 layers.
  
------------------------------

Lambda and Memory:-
  To configure the memory for your function, set a value between 128 MB and 10,240 MB in 1-MB increments.
  If lambda ask for more memory at any point of time, then it will fail with function error 

Lambda and Timeout:-
  You can set the max time for lambda that it can take. max value is 5 minutes.
  If lambda ask for more time, then it will fail with function error 

----------------------------------

Lambda Execution Lifecycle:-
  THere is 3 phases of lambda execution.
  1. Init:-
      In this phase the container get initilize. 
      The Init phase happens either during the first invocation, or in advance of function invocations if you have enabled provisioned concurrency.
      In this phase lambda 
        > configured resources, 
        > downloads the code for the function and all layers, 
        > initializes any extensions, 
        > initializes the runtime
  2. Invoke:-
      Here the function code get executed. once done with the handled. it become ready for another execution.
  3. Shutdown:-
      This phase is triggered if the Lambda function does not receive any invocations for a period of time. 
      In the Shutdown phase, Lambda terminates the runtime, alerts the extensions to let them stop cleanly, and then removes the environment
      
  Between Init and Shutdown, there could be multiple trigger of Invoke for multiple invocation.
  After the function and all extensions have completed, Lambda maintains the execution environment for some time in anticipation of another function invocation. 
  In effect, Lambda freezes the execution environment. When the function is invoked again, Lambda thaws the environment for reuse
  
  Timeout Setting:-
    This setting limit the maximum time the handler function can take for execution. if it goes above this limit then function get terminated. 
     
  Object outside Handler:-
    Objects declared outside of the function's handler method remain initialized, providing additional optimization when the function is invoked again.
    EG: you can create the DB connection outside the Handler and reuse this connection for all invocation handled by this Execution environment.
    
  Temp Disk Space:-
    Each execution environment provides 512 MB of disk space in the /tmp directory. 
    The directory content remains when the execution environment is frozen, providing a transient cache that can be used for multiple invocations.
  
  Callbacks in Handler:-
    Using callack in handler is very risky. LAmbda return immediatly and do not wait for callback to be executed. in this if your Execution Enviorment got vanished
    then your callback goes in vain or not executed at all.
   fail.  
    
-----------------------------------    

Limits:-
  Timeout:    900 sec(5 minute)
  Memory:     128MB - 10240 MB in 1 MB increment
  Layers:     5
  Disk space: 512 MB
  EV:         4 KB
  
------------------------------------
  
Function Orchestration[step function]:-
  AWS Step Functions is an orchestration service that lets you connect Lambda functions together into serverless workflows.
  Use Step Functions to orchestrate serverless applications workflows. This orchestrate support human intervention as well.
  With step function you can:-
    Chaining          – Connect functions into a series of steps, with the output of one step providing the input to the next step.
    Catch and retry   – Handle errors using sophisticated catch-and-retry functionality.
    Branching         – Design your workflow to choose different branches based on Lambda function output.
    Parallelism       – Run functions in parallel, or use dynamic parallelism to invoke a function for every member of any array.


  


    



