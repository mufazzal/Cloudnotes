You can invoke the lambda function by 
  - Expicitly call Invoke Lambda API, AWS SDK, AWS CLI  [Synchronusly or ASynchronusly controlled by 'InvocationType' param]
  - Trigger on other AWS services                       [Synchronusly or ASynchronusly depend on implementation in service]
  - Event Source Mapping: Stream and SQS polling        [Synchronusly or ASynchronusly not applicabe here]
---------------------------
Error Handling:-
  In lambda there could be two kind of error.
  1. Invocation Error
      Invocation errors occur when the invocation request is rejected before your function receives it.
      Causes:-
         - Requset too large
         - Caller User/Role do not has permission for 'Invoke'
         - Cocurrency limit reach [429 error code]
      This produce result with 4XX or 5XX code.
  2. Function Error:-
      Once Invocation of function is passe then, Function Error occure inside the function's code. and it could cause Runtime error.
      Causes:-
        - Unhandled exception occure in function code and so handler executed partilly and terminated.
        - Memory limit reached and lambda terminated
        - Max Timeout reached and lambda terminated
      This produce result with 200 success. 
      Lambda indicates this errors by including a header named 'X-Amz-Function-Error', and a JSON-formatted response with the error message and other details
      
-------------------------------

Synchronus calling:-
  If you call the lambda invoke Synchronusly then it will first process the lambda and generate the response and producce result.
  By default AWS SDK, CLI and API call the lambda Synchronusly
  - When the function completes, Lambda returns the response from the function's code with additional data
  Eg: 
    aws lambda invoke --function-name my-function --payload '{ "key": "value" }' response.json
  
  Error Behaviour/Handling Synchronus calling:-
    If error occure then that erro will be return as response. and The caller is responsible for making the retry.
    Lambda by itself has no way to do the retry.
    Example of Synchronus callers and their Error handling:-    
      - Invoke API:   If called by Invoke api directly then there is no retry and any erro will be deliver to client without any retry attempt
      - CLI or SDK:   For Timeout, Throttle error and non-bad request it make retry attempts. for other it simply forward the error without retry.
      - API Gateway:  It forward error without any retry.
      - S3 Batch:     retries the operation if the Lambda function returns a TemporaryFailure response code. no retry otherwise 
      - Lambda@Edge:  It forward error without any retry.
      - ALB:          It forward error without any retry.  
    
Asynchronus calling:-
  If you call the lambda invoke Asynchronusly then it will deliver the enevt and return immediatly. it do not wait for result to be produced.
  you don't wait for a response from the function code. You hand off the event to Lambda and Lambda handles the rest.
  - For asynchronous invocation, Lambda places the event in a queue and returns a success response without additional information.
  - In background, Lambda manages the function's asynchronous event queue and attempts to retry on errors
  - If the function doesn't have enough capacity to handle all incoming requests, events might wait in the queue for hours or days to be sent to the function
  - If the function can't keep up with incoming events, events might also be deleted from the queue without being sent to the function. So do handle it in code.
  - Below AWS service call the lambda Asynchronusly:-
      S3, SNS, SQS, Eventbridge.
  - Event 
  EG:  
    aws lambda invoke --function-name my-function  --invocation-type Event --payload '{ "key": "value" }' response.json
  
  Error Behaviour/Handling ASynchronus calling:-
    In the ASynchronus calling the event is delivered to Event Que and response immediatly sent to the caller. The Invoke will be called later point ot time.
    So if any error happen while calling Invoke or inside Handler, there is no way the caller comes to know about it.
    So in case of ASynchronus calling, caller cannot handle error for retry. for this lambda provide DLQ (Dead letter Queue)
    Behaviour:-
      Throttle(429) and 5XX Error:-
        Throttle Error and 5XX is handled diffrently. 
        for this Lambda returns the event to the queue and attempts to run the function again for up to 'Maximum age of event' priode and maximum 'Retry attempts' times
        The retry interval increases exponentially from 1 second after the first attempt to a maximum of 5 minutes.
        If all retry fails or event expires then event is delivered to DLQ(if configured)
      Other Error:-
        If there is error other then Throttle(429) and 5XX for an event then Lambda retry the event 'Retry attempts' more times in gap of 3 mnt to 'Maximum age of event' priode. 
        If all retry fails or event expires then event is delivered to DLQ(if configured)
      Cofiguration:-
        For the behaviour you can change two parameter for customized handling
        1. Maximum age of event: how long you wants the event to be in que. after that event will be expired and deleted withot processing. max value is 6 hour
        2. Retry attempts: MAx number of times a event will be retried in case of error. it could e 0-2
            
      DLQ for Asynchronus Lambda call:-
        For a lambda function you can create the DLQ, if any enent from the event queue is not successful after all retry attempts then the evnet will be deliver to DLQ. 
        DLQ is made of either SQS or SNS.
        
-------------------------------

Trigger:-
  - A trigger is a Lambda resource or a resource in another service that you configure to invoke your function in response to lifecycle events, external requests, or on a schedule.
  - Each event that Lambda passes to your function only has data from one trigger. Each event trigger one Invoke.
  - Here the resource who configure the Lambda event must have permission to perform 'Invoke' API. 
      EG: in case of S3 event for lambda, S3-Event-Notification must have permission 'Invoke'  
  - This could be 
      > Synchronus: 
        - Integrated with API Gateway
        - As target of Application Load Balancer
        - S3 Batch
        - Lambda@Edge
        - Kenesis Data Firehose
      > ASynchronus:
        - S3 Event notification
        - SNS and SES
        - Cloudformation
        - CodeCommit and CodePipeline
        - Cloudwatch Event and Log
      
---------------------------------------------

Event Source Mpping:-
  Here the AWS-Lambda-Resource that keep polling certain AWS resource for new event(s). and if there is one then call the lambda for those events.
  - You can use event source mappings to process items from a stream or queue in services that don't invoke Lambda functions directly.
  - An event source mapping uses permissions in the function's execution role to read and manage items in the event source
  - Here the Execution role of Lambda must have permission to read the AWS resource in use. 
  - Supported AWS servoce for Event Source Mpping:-
      SQS, DynamoDB Stream, Kenesis Stream. 
  EG: You can use SQS queue or Stream to be read by LAmbda's Event-Source-Mpping and call it if needed. So Lambda must have permission to read SQS/Kenesis.
   Batch size for Event Source Mpping:-
    - Event source mappings read items from a stream or queue in batches. They include multiple items in the event that your function receives
    - You can configure the size of the batch that the event source mapping sends to your function, up to a maximum that varies by service
    - The number of items in the event can be smaller than the batch size if there aren't enough items available, or if the batch is too large to send in one event and has to be split up
    
  Synchronus/ASynchronus Event Source Mpping: 
    This is batch kind of operation. here lambda itself keep polling the resource for events unlike the lambda being called explicitly by SDK/CLI or any AWS service.
    So there is no question that has it been called Synchronusly or ASynchronusly by the caller [because caller is lambda polling mechanics itself]

  Error Behaviour/Handling for Event Source Mpping:-
    Error Behaviour/Handling for Stream:-
      Lambda will keet trying the batch that consist erroneous event till batch expires or all event succed. The shard will be blocked for that batch til that time.
    Error Behaviour/Handling for SQS:-
      For this you can configure Visibility Timeout and Redrive Policy.       
    
    
    
  
