You can invoke the lambda function by 
  - Expicitly call Invoke Lambda API, AWS SDK, AWS CLI  [Synchronusly or ASynchronusly controlled by 'InvocationType' param]
  - Trigger on other AWS services                       [Synchronusly or ASynchronusly depend on implementation in service]
  - Event Source Mapping: Stream and SQS polling        [Synchronusly or ASynchronusly not applicabe here]

Synchronus calling:-
  If you call the lambda invoke Synchronusly then it will first process the lambda and generate the response and producce result.
  By default AWS SDK, CLI and API call the lambda Synchronusly
  - When the function completes, Lambda returns the response from the function's code with additional data
  Eg: 
    aws lambda invoke --function-name my-function --payload '{ "key": "value" }' response.json

Asynchronus calling:-
  If you call the lambda invoke Asynchronusly then it will deliver the enevt and return immediatly. it do not wait for result to be produced.
  you don't wait for a response from the function code. You hand off the event to Lambda and Lambda handles the rest.
  - For asynchronous invocation, Lambda places the event in a queue and returns a success response without additional information.
  - In background, Lambda manages the function's asynchronous event queue and attempts to retry on errors
  - If the function can't keep up with incoming events, events might also be deleted from the queue without being sent to the function. So do handle it in code.
  - Below AWS service call the lambda Asynchronusly:-
      S3, SNS, SQS, Eventbridge.
  - Event 
  EG:  
    aws lambda invoke --function-name my-function  --invocation-type Event --payload '{ "key": "value" }' response.json

-------------------------------

Error Handling:-
  In lambda there could be two kind of error.
  1. Invocation Error
      Invocation errors occur when the invocation request is rejected before your function receives it.
      Causes:-
         - Requset too large
         - Caller User/Role do not has permission for 'Invoke'
         - Cocurrency limit reach
      This produce result with 4XX or 5XX code.
  2. Function Error:-
      Once Invocation of function is passe then, Function Error occure inside the function's code. Runtime error.
      This produce result with 200 success. 
      Lambda indicates this by including a header named X-Amz-Function-Error, and a JSON-formatted response with the error message and other details
      
  Error handling for Asynchronus Invoke:-
    Intially lambda will rery the event and keep retrying with increasinf interval. but if it fail yet them
    You can use dead letter queue for handling the discarded event.
      

Trigger:-
  - A trigger is a Lambda resource or a resource in another service that you configure to invoke your function in response to lifecycle events, external requests, or on a schedule.
  - Each event that Lambda passes to your function only has data from one trigger. Each event trigger one Invoke.
  - Here the resource who configure the Lambda event must have permission to perform 'Invoke' API. 
      EG: in case of S3 event for lambda, S3-Event-Notification must have permission 'Invoke'  
  - This could be 
      > Synchronus: 
        - Integrated with API Gateway
        - As target of Application Load Balancer
        - S3 Batch
        - Lambda@Edge
        - Kenesis Data Firehose
      > ASynchronus:
        - S3 Event notification
        - SNS and SES
        - Cloudformation
        - CodeCommit and CodePipeline
        - Cloudwatch Event and Log
      
Event Source Mpping:-
  Here the AWS-Lambda-Resource that keep polling certain AWS resource for new event(s). and if there is one then call the lambda for those events.
  - You can use event source mappings to process items from a stream or queue in services that don't invoke Lambda functions directly.
  - An event source mapping uses permissions in the function's execution role to read and manage items in the event source
  - Here the Execution role of Lambda must have permission to read the AWS resource in use. 
  - Supported AWS servoce for Event Source Mpping:-
      SQS, DynamoDB Stream, Kenesis Stream. 
  EG: You can use SQS queue or Stream to be read by LAmbda's Event-Source-Mpping and call it if needed. So Lambda must have permission to read SQS/Kenesis.
   Batch size for Event Source Mpping:-
    - Event source mappings read items from a stream or queue in batches. They include multiple items in the event that your function receives
    - You can configure the size of the batch that the event source mapping sends to your function, up to a maximum that varies by service
    - The number of items in the event can be smaller than the batch size if there aren't enough items available, or if the batch is too large to send in one event and has to be split up
    
  Synchronus/ASynchronus Event Source Mpping: 
    This is batch kind of operation. here lambda itself keep polling the resource for events unlike the lambda being called explicitly by SDK/CLI or any AWS service.
    So there is no question that has it been called Synchronusly or ASynchronusly by the caller [because caller is lambda polling mechanics itself]

