
Execution Role:-
  This Role come into picture when the code of the lambda function executed.
  Lambda must carry a role. This role should have the required permission if he is doing any operation on aws resources.
  Also it must carry the trust policy so that Function can assume it.
  Trust Policy:-
    "Principal": {
          "Service": "lambda.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
  AWS also provide many managed policy which are ready to use for diffrent task like
    - AWSLambdaBasicExecutionRole –     Permission to upload logs to CloudWatch.
    - AWSLambdaDynamoDBExecutionRole –  Permission to read records from an Amazon DynamoDB stream.
    - AWSLambdaKinesisExecutionRole –   Permission to read events from an Amazon Kinesis data stream or consumer.
    - AWSLambdaSQSQueueExecutionRole –  Permission to read a message from an Amazon Simple Queue Service (Amazon SQS) queue.
    - AWSLambdaVPCAccessExecutionRole – Permission to manage elastic network interfaces to connect your function to a virtual private cloud (VPC).
    etc.
    Apart from this if you wants to do things like
      adding message in SQS, uploading to S3 buckett, terminate the instance then you have to add proper permission inthe policy.
      
Resource Policy:-
  LAmbda support the Resource based policy too. with this you can control
  - which AWS service can or cannot make changes and invoke the lambda function
  - Access to other AWS account
  - allow lambda for certain condition only
 
      
      
      
      
