Docker and AWS:-
	AWS provide advance tool for managing Container and images.
	This best suited for Batch job which are short-live and can be processed parrllal.	
	Bsed on workload you can bring up and down the container instances quickly via altering Task.  
	
ECR[Elastic Container Registery]:-
	ECR is the tool where you can upload the Images of Container and share with other.
	This is simplty a repository for Comtainer images.
	It compititor :-
		DockerHub

Container Orchastration tool:-
	This is where our Containers run. here actully the Application is hosted.
		Compititor:-
			Docker
	There is two tool AWS provide
		EKS[Elastic Kubenetees service]:-
			Use for Oprn-Source Conainer orchastration tool Kubenetis

		ECS[Elastic Container Service]:-
			This tool give you the way to manage the containers and help you to do operational stuff on it like
				Start stop containers
				Load Balancing
				Scheduling
				Replication
----------------------------------				
Hosting Enviorment:-
	On EC2:-
		Here the container are ran on EC2s and customer is responsible for managing those EC2. AWS ECS take care of running container and managong it on EC2
		On Each EC2 'ECS Agent' Must be installed.
	On Fargate:-
		Here There is no EC2 instance in picture. The Container will run on Fargate and cutomer need not to worry about managing EC2s.

--------------------

ECS Agent:-
	The EC2 instance on which ECS ran, must has ECS Agent install in it.
	Also that instance must have way to reach to the AWS ECS service to let ECS work properly.
	For this the EC2 instance
	- Either has internet acceciblitu via NATor IG Or have a accesible Service endpoint for AWS ECS. 
  - IAM role of EC2 must have proper permissions
  - For Linux AMI 2 it is pre installed.
  
--------------------

Task Placement Stratagies:-
  When you change the task count in the service the ECS launch the new container or terminate the container (not EC2 instance)
  Now ECS must determine from which instance the container should terminate or placed new  one. for this it use the Placement Stratagies.
  It can be specified when either running a task or creating a new service. 
  The task placement strategies can be updated for existing services as well
  There is 3 possible stratagy:-
  1. Binpack: 
      The container is placed on istance with Least amount of CPU or Memory. 
      The contaier is removed from the instance which release most avialable CPU and Memory
      This strategy minimizes the number of container instances in use
      EG:-
        "placementStrategy": [{
                "field": "memory", or "cpu"
                "type": "binpack"
          }]

  2. Spread:-
      Tasks are placed or remove as such that tasks are evenly distributed against the specified value 
      EG:-
        "placementStrategy": [{ "field": "attribute:ecs.availability-zone", or "InstanceId" or any other attribute
                "type": "spread"
         }]
         So the contaier are spread evenly across the AZ or instance or other.
         It also follow the constraints that you specified both implicitly or explicitly
  3. Random:-
      Here it place randomly but still try to place it in such a way the container have enough resoure to run and 
      "placementStrategy": [{ "type": "random" }]

  You can also use more then one stratgy. like first spread evenly in AZ and then evenly in the instances in that AZ
    "placementStrategy": [{
            "field": "attribute:ecs.availability-zone",
            "type": "spread" 
          },{
            "field": "instanceId",
            "type": "spread"
     }]			
     
--------------------

Task Constraints:-
  This is define at time or running task or creating service. Also can be updated in existing service.
  It define that on which instance the task can be run. It can have two value
  1. distinctInstance: 	Place each task on a different container instance
  2. memberOf: Place task on one of the instance which satisfy the specified 'CQL' statement (Cluster Query Language)  
  
--------------------

Cluster
  An Amazon ECS cluster is a logical grouping of tasks or services. Your tasks and services are run on infrastructure that is registered to a cluster.
  Think of this as wrapper on Service and Standalone task.

  - A cluster may contain a mix of tasks hosted on AWS Fargate, Amazon EC2 instances, or external instances

  CapacityProviders:-
    List of capacity provider this cluster can have. 
    A cluster may contain a mix of both Auto Scaling group capacity providers and Fargate capacity providers, 
    However when specifying a capacity provider strategy in the service, it may only contain one or the other but not both.
    Possible value:-
      FARGATE, FARGATE_SPOT, Name of ASG capacity provider. 

  DefaultCapacityProviderStrategy:-
    The default stratagy how the capacity will be fullfiled. it can be ovirride in the service.
 
 CLusterSetting.Containerinsight:-
    Enable it for detailing but it bear you changes.
 
-----------------

SG :-
  On EC2 host with host/bridge mode
    - SG in EC2 instance
  On EC2 host with awsvpc mode
    - SG of Task
  On Fathate [Fargate only work with awsvpc]
    - SG of Task

IAM Role:-
  On any thing on any network mode:-
    Task Role set in Task Defination: Assumed by containers itself
    Task Execution Role set in Task Defination: Assumed by ECSagent to perform operation on this task
    
----------------------

Capacity Provider:-
  There is 3 kind of CApacity Provider. You have set it in the cluster before ant task or service can use this for capacity.
  1. FARGATE
  2. FARGATE_SPOT
  3. ASG for EC2
  
  EC2 - ASG CApacity provider:-

          ECSCluster:
            Type: AWS::ECS::Cluster
            Properties: 
              CapacityProviders:
                - FARGATE
                - FARGATE_SPOT
                - !Ref EC2ECSCapacityProvider  
          EC2ECSCapacityProvider:
            Type: AWS::ECS::CapacityProvider
            Properties:
              AutoScalingGroupProvider:
                AutoScalingGroupArn: !Ref ASGArn
                ManagedScaling:
                    MaximumScalingStepSize: 3
                    MinimumScalingStepSize: 1
                    Status: ENABLED
                    TargetCapacity: 100
                ManagedTerminationProtection: ENABLED
              Name: EC2ECSCapacityProvider
    
    
    


