Policy Simulator:-
  USe this to figure out if a certain action on certain reource is possible or not bu certain principle.
  It do not actully do thisoperation.it just check if principle has access to do it.
  
IAM Access Analyzer:-
  Use this to detect if any RESOURCE-based-policy is giving access outside of your zone-of-trust.
  You can set the zone-of-trust as AWS account[your own account only] or AWS organization[in which your account lies]. 
  Now if any IAM policy give access to any principle that is not in zone-of-trust, then it generates an active finding.
  IMP: It analyze the resource based policy like bucket policy, KMS key policy etc. not IAM policy.
  
Access Advisor feature:-
  Simply tells you what is the last time certain role is used for any AWS api.
  You can delete the roll that are not being used since long.

IAM Policy Variable:-
  You can use this inside the 'Condition' and 'Resource' secation of your policy statement.
  IT provide more dynamic and principle based way to provide acces to diffrent resource 
  EG:-
    suppose you wants to give 
    'muf' user access to 'useBuckets/muf' only and 
    'mur' user access to 'useBuckets/mur' only then use below
          "Condition": {"StringLike": {"s3:prefix": ["${aws:username}/*"]}}
      OR
          "Resource": ["arn:aws:s3:::mybucket/${aws:username}/*"]
    
   Some more important Policy Variables are:-
    aws:PrincipalType :- Distinct user, federated, or assumed role.
    aws:SourceIp :- 
    aws:username :- IAM-user-name in case of IAM user, null otherwise. 
    ec2:SourceInstanceARN :-
    aws:userid :- account ID in case of Root User,  
                  IAM unique ID in case of IAM User, 
                  <role-id>:<ec2-instance-id> in case of EC2, 
                  <account>:<caller-specified-name> in case of FederatedUser
                  <role>:<caller-specified-role-name> in case of AssumeRole
    

