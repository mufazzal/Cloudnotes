IN AWS system the policy is the nucleas statement of Access.
its strcure remain same everywhere and used in many places in may context of access.

Policy Document OR Policy JSON:-
The policy contains the json doc which define the access sytem like below
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Sid": "myIds",
                          "Effect": "Allow" | "Deny",
                          "Action": ...,
                          "Resource": ...,
                          "Condition": ...
                      },
                      {...},
                      {...}
                  ]
              }  

Type of Policies:
  On the whole AWS level we can have below type of policies
  
  AWS Policies
    |
    |
    |------IAM Policy
    |           |                    
    |           |-----Managed Policy
    |           |         |------AWS Managed Policy               Assignabe to IAM identities   |   No Principle tag   |  Has Resource tag      |  Has ARN   |
    |           |         |------Customer Managed Policy          Assignabe to IAM identities   |   No Principle tag   |  Has Resource tag      |  Has ARN   |
    |           |
    |           |-----Inline Policy                               Attached to one IAM identity  |   No Principle tag   |  Has Resource tag      |  No ARN    |
    |
    |
    |
    |------Resource Based Policy
                |
                |
                |-----Bucket Policy                               Attached to one AWS resource |   Has Principle tag   |  Limited Resource tag  |  No ARN    |
                |-----KMS Policy                                  Attached to one AWS resource |   Has Principle tag   |  Limited Resource tag  |  No ARN    |
                |-----SQS  Policy                                 Attached to one AWS resource |   Has Principle tag   |  Limited Resource tag  |  No ARN    |
                |-----IAM trust  Policy
  
  
  IAM Policy:-
    The IAM Policy use for granting access to 3 type of IAM identity 
    1. IAM Role
          - Therby providing access of underline resources to EC2, LAmbda, RDC, Cognito idp etc
    2. IAM User Group
          - Thereby providing access of underline resources to the IAM user group 
    3. IAM User Group
          - Thereby providing access of underline resources to the IAM user
    
    This three identity behave as 'principle' in structure of policy. that is why in any kind of IAM policy you never need to mention the 'principle' tag.
    The subject in the IAM policy is the IAM Identity. 
  
     Managed Policy:-
        This IAM policies can be attach to as many role, group, user as you wants. So this are reusable policy.
        This policy can be viewed at  AWS Console > IAM > Policies.
        each of this policy do has an ARN so that it can be used elsewhere. 


        Use managed Policy:-
            Via AWS console:-
                          To use this first you have to either go to 
                            AWS Console > IAM > Users  OR
                            AWS Console > IAM > User Groups  OR
                            AWS Console > IAM > Role  OR
                            Now attach the policy there
            Via Cloudformation:-
                          Type: AWS::IAM::Group
                          Properties: 
                            GroupName: String
                            ManagedPolicyArns: 
                              - arn1
                              - arn2
                              - !Ref MufPolicy                          
                            Policies: - Policy                      
                      In Clodformation template 'Policy' belongs to inline policy and 'ManagedPolicyArns' belongs to the managed policy

       Managed policy is of two type:-
          A. AWS Managed Policy:-
              This are pre-written and non-editable policy which are design by the AWS team for doing some routine task.
              This policy are ready to use policy for providing necessaru access to any IAM identity for doing some task. This policy cannort be added, deleted, edited by IAM user.
              EG
                  S3FullAccess :- provide the role. group, user access to for any thing on S3
                  AmazonS3ReadOnlyAccess: provide the role. group, user access to of reading any thing on S3
                  AWSLambdaBasicExecutionRole:- provide lambda the basic execution right
                  AWSCodeDeployRole: provide necessary access for code deployment
                  ** though it contains Role in the name but they are policy actully. Uff you AWS morones.
          B. Customer Managed Policy:-
              This is same as AWS managed policy but it can be created, edited, deleted by the AWS IAM user himself.
              This is useful when you wants to creat a customized policy by yourself and then reuse it for certain type of IAM identities.

              Creating Customer Managed Policy:-
                 Via AWS console:-
                    Console > IAM > Policies > Create Policy
                 Via Cloudformation:-
                    MufPolicy:
                          Type: AWS::IAM::ManagedPolicy
                          Properties: 
                            ManagedPolicyName: String
                            Description: String
                            Path: String
                            PolicyDocument: Json
                            Groups: - String
                            Roles: - String
                            Users: - String     
                            
               Groups/Roles/Users are optiona here. no need to specify it 

     Inline Policy:-
        Inline policy is attached to one and only one IAM identity. It cannot be assign to multiple IAM Identity.
        This do not has the ARN because it is not reusable.
        This is useful when you wants to give access of underline resources to certain IAM identity but not to anyone else. 
          
          Creating Inline IAM Policy:-
             Via AWS console:-
                   To Create this first you have to either go to 
                      AWS Console > IAM > Users  OR
                      AWS Console > IAM > User Groups  OR
                      AWS Console > IAM > Role  OR
                   Now you can see the 'Inline Policy' button there. just press it and create it there. So the created inline policy will always be subordinated to the selected IAM identity.
             Via Cloudformation:-
              There is two way to do it
              1. Creating policy with attaching it to user/role/group
                   Creating->
                   mufExmpPolicy:
                     Type: AWS::IAM::Policy
                     Properties: 
                        PolicyDocument: Json
                        PolicyName: String
                        Roles: - String
                        Users: - String                        
                        Groups: - String
                      
                      Now attachig it:-
                        Type: AWS::IAM::Group/Role/User
                        Properties:
                          Policies: [{"Ref": "mufExmpPolicy"}, ... ]
                        
                      Here also the Groups, Roles, and Users properties are optional. However, you must specify at least one of these properties. otherwise this policy will be useless.
                      
              2. Creating policy directly in user/role/group
                      Type: AWS::IAM::Group/Role/User
                      Properties: 
                        ....
                        Policies: [{
                          Effect:
                          Action:
                          Resources:
                        },
                        {..}]                  
  
  
  IMP {"Ref": "policyName"} ->   This will return the ARN for managed policy and physical name for inline policy.
  
  Resource Based Policy:-
    In the resource based policy the subject is resource and so this policies are assignable to certain kind of AWS-service-resources not the AWS IAM user.
    Here we has the Principle tag in the policy statement that is because you attach the policy to the EC2, Lambda, RDS instances but not on IAM Role, IAM User Group, IAM User.
    But
    We also have the 'Resource' tag in the policy statement. but its scope is automatically narrowed down to the aws-resource it is attached to.
    To craete any such kind of policy first you have to choose the AWS resource on whome you wants this policy t be mounted.
    This policies also do not has ARN because they are not reusable.
    
    *** SOME AWS Services support the resource based policy for SOME actions
    
    Most of the time we see that in this policy the resource tag as
      ...
      Resource : '*'
      ...
    Do not confuse that it will allow the action to any AWS resource. this policy is attaced to a certain resource actully so the scpe of the resource is already narowwed down.
    but you further wants to narrow down the resource then you can use ARN. but this ARN sould only lie in the scope of attaced resource.
    
    Bucket Policy:-
      Jsut like inline policy which is attached to at least one IAM identity (Role, Group, User).
      The bucked policy is subordinated to qt least one bucked in S3. To create a bucket policy you have to first inside the S3 bucket.
      Creating Bucket Policy:-
             Via AWS console:-
                AWS Console > S3 > 'you bucked' > Permission > Bucket policy
             Via Clouformation
                Type: AWS::S3::BucketPolicy
                Properties: 
                  Bucket: {"Ref" : "mufazzalBucket"},
                  PolicyDocument: Json                
    KMS Policy:-
      ??????
    
    
    
 ---------------------------------
  
 Say you wants to create somthing like below
 
 A customer managed policy 'mufCustPolicy'
              mufCustPolicy:
               Type: AWS::IAM::ManagedPolicy
                Properties: 
                  ManagedPolicyName: String
                  PolicyDocument: Json
                  ...
                  
 A inline policy 'mufInlinePol1'
               mufInlinePol1:
                  Type: 'AWS::IAM::Policy'
                  Properties:
                    PolicyName: mufInlinePol1
                    PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                        - Sid: myIds
                          Effect: Allow
                          Action: '*'
                          Resource: '*'
 A User Group with 
    one aws managed policy  's3FullAccess'
    one customer managed policy 'mufCustPolicy'
    one inline policy 'mufInlinePol1'
    one more inline policy
            groupMuf:
               Type: AWS::IAM::Group
                Properties: 
                  GroupName: String
                  ManagedPolicyArns: 
                    - 'arn:aws.IAM...*.s3FullAccess'
                    - !Ref mufCustPolicy
                  Policies: 
                    - !Ref mufInlinePol1
                    - PolicyName: root
                      PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                          - Effect: Allow
                            Action: '*'
                            Resource: '*'

    
 A role with 
    one aws managed policy  's3FullAccess'
    one customer managed policy 'mufCustPolicy'
    one inline policy 'mufInlinePol1'
    one more inline policy
            roleMuf:
              Type: AWS::IAM::Role
                Properties: 
                  RoleName: String
                  ManagedPolicyArns: 
                    - 'arn:aws.IAM...*.s3FullAccess'
                    - !Ref mufCustPolicy
                  Policies: 
                    - !Ref mufInlinePol1
                    - PolicyName: root
                      PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                          - Effect: Allow
                            Action: '*'
                            Resource: '*'
  

A one more inline policy (commonInlinePolicy) which is attached to roleMuf and groupMuf both 
          
          commonInlinePolicy:
            Type: AWS::IAM::Policy
            Properties: 
              PolicyDocument: {....}
              PolicyName: String
              Groups: 
                - !Ref groupMuf
              Roles: 
                - !Ref roleMuf
  
A one more managed policy (commonMAnagedPolicy) which is attached to roleMuf and groupMuf both 
            commonMAnagedPolicy:
              Type: AWS::IAM::ManagedPolicy
              Properties: 
                ManagedPolicyName: String
                PolicyDocument: Json
                Groups: 
                  - !Ref groupMuf
                Roles: 
                  - !Ref roleMuf
  
 --------------------------------
 
 Strange implemetation of Bucket Policy, KMS Policy:-
  I do not know wht AWS did it.
  When you need to create any of those in AWS console then first you have to go to either the bucket.
  then you create the policy under it.
  But in clodformation its bit of strange.
  you create the policy and in the policy itself you give refrence of any IAM identity or S3 bucket or KMS key.
  
-----------------------------------


Permission Boundry:-
  Prmission boundry set the maximum access the User/Role can have. It is attached to user or role.
  In itself it do not provide any permission but it only set the limit of permission.
  EG: 
    If below permission boundry is set for user/role:-    
      "Effect": "Allow",
      "Action": [ "s3:*", "cloudwatch:*"],
      "Resource": "*"
   Then user/role at max can do operations on s3 and cloudwatch but not on other services.
   User/Role still need the IAM policy attached to do operation on s3 and cloudwatch.
   Even User/Role have IAM policy attached that ALLOW opearion on EC2, It will be denied due to Permission Boundry.
   It cannot be applied over Group.
  
  


    
