Why EC2: because purchasing a server and maintaining them is a hell.
          Now with EC2 you buy a machine and ready to go.
 
    
Instance Type(Faimily) and Instance Size-
  There are couple of EC2 instances which are design to achive a specific goal. they are called Instance Type or instance Faimily
  EG
	Faimily/Type		Best for										Use case
	--------------------------------------------------------------
    T3    				Low Cost-Genral purpose     web server/small DB
		C							Compute Optimized						high performance processors for HPC and intensive PU work 
    R	    				Memory optimized            Memory intensive RAM. process large data sets in memory
    G	    				Graphics intensive          video and extremly high intensive work which need GPU
    I3    				High speed storage          NoSql, DBs. high, High sequential read and write and tens of thousands of low-latency, random I/O operations per second 
    M5    				General Purpose             App Server
    ...
    ...
    
instances Size:-
   Each above type of instance is design to support and handle specific type of requirment. Like one is best for
   DB and other is optimized for game. 
   After selecting a type nest thing is how intensive you wants to use your system.
   EG: you say i need a DB optimized Or web-server optimized instance, But how intensive your workload going to be.
   Depending on this you select the subcategory.
   
   Lets say i wants a general purpose T3 instance.
   Now    if my workload is moderate then i will go for t3.small
          if my workload is significant then i will go for t3.large
          if my workload is bulky then i will go for t3.xlarge
   Whats diffrence in between this instances :-
          diffrence comes in Memory-size (RAM not EBS), vCPU count, Storage type (EBS or other).

---------

The storage in EC2 is EBS    
    EBS:-
    As like any normal PC/Server the virtual PC/Server also need a hard disk, EBS play this role
    EBS is virtual Hard Disk Drive of you EC2 instance.
    You can use this drive to 
      install OS, mounting File System, DB etc.
    Type of EBS :-
      1. SSD
          1.1 GP2
          1.2 IO1
       2. Megnetic
          2.1  ST1
          2.2  SC1

Security Of EC2 instance:-
    This is most critical part of EC2, Security of EC2 is implemented via Security group attached to EC2 
    Security group is nothing but a kind of firewall around EC2, that decide who can communicate to EC2 and who cannnot.


EC2 and Other AWS services -> 
    EC2 can perform operation over diffrent aws service (E.G S3, cloudfront etc)
    But before performing the operation the EC2 instance should have proper autorization
    There is two way to Authorize the EC2-instance for other AWS operation
    1. By loging in to AWS-CLI in EC2 instance with authorized user of AWS account, For this you must have a authorized user
    2. By assigning the role itself to EC2 instance. (No IAM user required)
    
    #AUTHEC2_WAY_1
    Way 1: 
          1. Strat EC2 instance
          2. Create user with proper permission to access and manage S3 
          3. From SSH-terminal connect local pc ('muf') with EC2 ('bar') via proper private key
          4. One you are in terminal of EC2 (Not you local PC)
                    at   ec-user@1.1.1.1 >_
                    not  MufazzalPC: >_
             do the login to aws-cli via command 'aws configuration' with proper access key and ID of user created in step 2
             
          under the hood: 
                    the command 'aws configuration' create a config file i EC2 instance at path '?????'
          Security flaw in here :-
                    The EC2 instance actully save the access key and ID at './aws' directory of EC2 honme drive
                    So sombody may be able to see it if he has access to EC2 via SSH. So second aproach is recommended.
                    Also if your key is compromisesd and you change it. then you have to login in all Ec2 instances manulally
                    and change them via 'aws comfiguration'. 
                    
         
    #AUTHEC2_WAY_2
    Way 2:
          1. Crate a Role in IAM (for EC2) with proper permissions [seAdminFullAccess in our case]
          2. right click on EC2 > action > instance setting > add/remove Role
          - You can attach or dettach the Role   from EC2,  and it      will take immediate effect. you dont even have to restart the Ec2
          - You can attach or dettach the Policy from Role, and it also will take immediate effect. you dont even have to restart the Ec2
           
    VVVINMP : in way 2 the it is very IMP to remember that the aws configuration file will not be created at the path '??????'.
              so in the code if you have used 'new AWS.SharedIniFileCredentials({profile: <profile>});' 
              The code will fail for sure.
      
           
    Lets say you wants to create a S3 bucket wirh EC2
       For this Once login is successful, You can use the comands to create S3 bucket at location '  ec-user@1.1.1.1 >_ '
                    >  'aws s3 mb s3://muf12decbuck'

----

Priority of credentials on EC2 from Higest to lowest:-
	1. aws.accessKeyId and aws.secretKey in Java env variable
	2. system environment variables: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
	3. In the default credentials file (the location of this file varies by platform) [set by 'aws config' for EC2]
	4. Instance pfofile by IAM role
	5. temporary cred by STS.

-------------------



User Data:
	In the user data you can provide the script that can ran at the initilization of the EC2 insyance.
	By default, user data scripts and cloud-init directives run only during the boot cycle when you first launch an instance.
         but You can update your configuration to ensure that your user data scripts and cloud-init directives run every time you restart your instance
	You can provide it like this
			#!/bin/bash
			yum update -y
			yum install -y httpd 
			...
			...
	 The first line tell the AWS to run this script on EC2 with bash
	 -y: in the mid of running any command in script it may be possible that user would be asked to enter somthiy 
			like'press Y to continue'. fir this proide the answer in advance.
	 This script run with root user so no need for 'sudo su' 
	 The ouput log can be sen at 'var/log/cloud-init-output.log'

	Changing User Data after creation of instance:-
		You can changeit but first you have to stop the instance and then simpllty cahnge it via colsole or CLI.
		You cannot change the user data of running instance.
	
	Remeber two imp thing when writing user data script
	1. It run as root user not as ec2-user. so you have max privilages and no need to do 'sudo su'
	2. the directory it run is 'root/' not in 'home/ec2-user/'
------------		
	installing Node-js on EC2 -
		https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html

--------------------

RElation of Region of EC2-Coumpute unit and other logical or physical peripheral like EBS, EFS, SG, ENI.
SAME mns that both the EC2 compute unit and the object(EBS, EFS, SG, ENI) must lies in same subject(AZ, Region, Subnet, VPC) 

					AZ		Region			Subnet			VPC
EBS				SAME	SAME				-						-
EFS
SG				-			-						-						SAME
ENI				-			-						SAME				SAME

---------

EC2 CURL for meta-data and user-data:-
	A unique feature of EC2 is inside the EC2 you can do the curl to get couple of imp info of the same EC2.
	How:-
		First SSH into the EC2 instance
		now curl here
			curl http://169.254.169.254/latest/meta-data/<item_name>
		item_name could ne 
			hostname, local-ipv4, public-ip etc.
		In output you will get the respective item.
		
		To get the user dat just use 
			curl http://169.254.169.254/latest/user-data


---------------

Instance Tenancy:-
	Theirs ia 3 kind
	1. Default. Sared tanacy
	2. Dadicated: Dadicated Instance tanacy
	3. Host: Dadicated Host tanacy	
	
	The value of the tanacy can be set at two level:-
		1. VPC level
		2. Launch Configuration/Launch Template level
		
	
Dadicated Host/Instance:-
	You can purchase the dadicated host/Instance if your compience need it.
	First you have to decide about the Instance faimily. and then their is two Options:-
	1. Enable Support multiple instance Size:  You can change the size but not faimily
	2. Disable Support multiple instance Size: Nothing can be change. both fixed.

	- To launch instance in dadicated host/Instance you have to choose it at time of launching.
	- ASG and Dadicated Host: Only LT support it not LC. 
	- VPC and Dadicated Host: You can set the host tanency at VPC level also. 
			In conflict of ternancy among default and Dadicated Host/Instance, the Dadicated Host/Instance will always win. 
	- You cannot change the tenacy from Dadicated/Host to Default and vice versa
	- You can change the tenacy from Dadicated to Host and vice versa
	
	Auto-Placement:- 
		If enabled then matching EC2 will always launch in the dadicated host. if not enabled then Matching EC2 will launch in host only if Host Id is given in launch request.
	Affinity:-
		If enabled then restrted EC2 will launch in same host otherwise lauch in any avialable host.
	
		Dadicated Host VS Dadicated Instance:-
			Both are almost same except below two item is trimmed don in DI
			1. DI do not give much visibility an control to underline hardwate.
			2. DI do not allow to use existing server-bound software licenses like Windows Server etc.

----------------
AWS System Manager:-
	You can use this service to run the command on multiple EC2 together.
		
-----------

EC2 Horizental and Vertical Scalling:-
	HS means you add more servers of same type long with existing servers. and VS means you upgrade the existing server itself.
	EG: You have 3 Ec2 of t2.micro and wants  more capacity
	HS: Add 2 more of t2.micro
	VS: Change existing t2.micro to t2.large
		
		
		
		

	
	




