Why EC2: because purchasing a server and maintaining them is a hell.
          Now with EC2 you buy a machine and ready to go.
 
    
Instance Type(Faimily) and Instance Size-
  There are couple of EC2 instances which are design to achive a specific goal. they are called Instance Type or instance Faimily
  EG
	Faimily/Type		Best for										Use case
	--------------------------------------------------------------
    T3    				Low Cost-Genral purpose     web server/small DB
    G3    				Graphics intensive          video
    I3    				High speed storage          NoSql, DBs
    R5    				Memory optimized            Memory intensive
    M5    				General Purpose             App Server
    ...
    ...
    
instances Size:-
   Each above type of instance is design to support and handle specific type of requirment. Like one is best for
   DB and other is optimized for game. 
   After selecting a type nest thing is how intensive you wants to use your system.
   EG: you say i need a DB optimized Or web-server optimized instance, But how intensive your workload going to be.
   Depending on this you select the subcategory.
   
   Lets say i wants a general purpose T3 instance.
   Now    if my workload is moderate then i will go for t3.small
          if my workload is significant then i will go for t3.large
          if my workload is bulky then i will go for t3.xlarge
   Whats diffrence in between this instances :-
          diffrence comes in Memory-size (RAM not EBS), vCPU count, Storage type (EBS or other).
      
  

The next IMP thing comes in EC2 is Hard Disk Drive, You need to devide how much storage you need for any EC2 instance
The storage in EC2 is EBS    
    EBS:-
    As like any normal PC/Server the virtual PC/Server also need a hard disk, EBS play this role
    EBS is virtual Hard Disk Drive of you EC2 instance.
    You can use this drive to 
      install OS, mounting File System, DB etc.
    Type of EBS :-
      1. SSD
          1.1 GP2
          1.2 IO1
       2. Megnetic
          2.1  ST1
          2.2  SC1

Security Of EC2 instance:-
    This is most critical part of EC2, Security of EC2 is implemented via Security group attached to EC2 
    Security group is nothing but a kind of firewall around EC2, that decide who can communicate to EC2 and who cannnot.


EC2 and Other AWS services -> 
    EC2 can perform operation over diffrent aws service (E.G S3, cloudfront etc)
    But before performing the operation the EC2 instance should have proper autorization
    There is two way to Authorize the EC2-instance for other AWS operation
    1. By loging in to AWS-CLI in EC2 instance with authorized user of AWS account, For this you must have a authorized user
    2. By assigning the role itself to EC2 instance. (No IAM user required)
    
    #AUTHEC2_WAY_1
    Way 1: 
          1. Strat EC2 instance
          2. Create user with proper permission to access and manage S3 
          3. From SSH-terminal connect local pc ('muf') with EC2 ('bar') via proper private key
          4. One you are in terminal of EC2 (Not you local PC)
                    at   ec-user@1.1.1.1 >_
                    not  MufazzalPC: >_
             do the login to aws-cli via command 'aws configuration' with proper access key and ID of user created in step 2
             
          under the hood: 
                    the command 'aws configuration' create a config file i EC2 instance at path '?????'
          Security flaw in here :-
                    The EC2 instance actully save the access key and ID at './aws' directory of EC2 honme drive
                    So sombody may be able to see it if he has access to EC2 via SSH. So second aproach is recommended.
                    Also if your key is compromisesd and you change it. then you have to login in all Ec2 instances manulally
                    and change them via 'aws comfiguration'. 
                    
         
    #AUTHEC2_WAY_2
    Way 2:
          1. Crate a Role in IAM (for EC2) with proper permissions [seAdminFullAccess in our case]
          2. right click on EC2 > action > instance setting > add/remove Role
          - You can attach or dettach the Role   from EC2,  and it      will take immediate effect. you dont even have to restart the Ec2
          - You can attach or dettach the Policy from Role, and it also will take immediate effect. you dont even have to restart the Ec2
           
    VVVINMP : in way 2 the it is very IMP to remember that the aws configuration file will not be created at the path '??????'.
              so in the code if you have used 'new AWS.SharedIniFileCredentials({profile: <profile>});' 
              The code will fail for sure.
      
           
    Lets say you wants to create a S3 bucket wirh EC2
       For this Once login is successful, You can use the comands to create S3 bucket at location '  ec-user@1.1.1.1 >_ '
                    >  'aws s3 mb s3://muf12decbuck'

 -------------------

User Data:
	In the user data you can provide the script that can ran at the initilization of the EC2 insyance.
	This script run only at once. never rerun again even if you reboot the instance.

	You can provide it like this
			#!/bin/bash
			yum update -y
			yum install -y httpd 
			...
			...
	 The first line tell the AWS to run this script on EC2 with bash
	 -y: in the mid of running any command in script it may be possible that user would be asked to enter somthiy 
			like'press Y to continue'. fir this proide the answer in advance.
	 This script run with root user so no need for 'sudo su' 
	 The ouput log can be sen at 'var/log/cloud-init-output.log'

	Changing User Data after creation of instance:-
		You can changeit but first you have to stop the instance and then simpllty cahnge it via colsole or CLI.
		You cannot change the user data of running instance.
	
	Remeber two imp thing when writing user data script
	1. It run as root user not as ec2-user. so you have max privilages and no need to do 'sudo su'
	2. the directory it run is 'root/' not in 'home/ec2-user/'
------------		
	installing Node-js on EC2 -
		https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html

--------------------

RElation of Region of EC2-Coumpute unit and other logical or physical peripheral like EBS, EFS, SG, ENI.
SAME mns that both the EC2 compute unit and the object(EBS, EFS, SG, ENI) must lies in same subject(AZ, Region, Subnet, VPC) 

					AZ		Region			Subnet			VPC
EBS				SAME	SAME				-						-
EFS
SG				-			-						-						SAME
ENI				-			-						SAME				SAME

---------

EC2 Hibernate:-
	The EC2 hibernate provide fater alternative to start and stop the instances.
	When you stop the instance then the instance RAM is evoparated and OS is lost. so when you start it again then the EC2 has to 
	first load the OS then
	run the user data script and then
	run the applications again if needed.
	And all this takes time. 
	But if you hibernate the EC2 then the RAM conent is not loast instead it copied in the attached Root EBS and when its started back from Hibernation then 
	the conent preserved from RAM is loaded again from EBS. and so none of the process need to be re-done.
	To make EC2 hibernate compatible you have to have large EBS volume attach to accomodate RAM content and also you must enable it at a time of instance creation.
	
	By default EC2 do not enable Hibernation function. It must ne enable at a time of launch. 
	To put EC2 in hibenation:-
		Ec2 > your inst > state > Hibernate

        Charges when ec2 in the Hibernate;
           This is where u save money. u will be charged for EBS volume and Elastic ip (if attached).
           u will not have to pay for EC2 itself.
	
	Limitation:-
		- canot work if RAM > 150 GB
		- for instance store data in RAM will not be preserve
		- do not work for spot instances.
		- you cannot keep a instance in hibernate for more then 60 days.
		
		
	Hibernate and spot instance:-
		This feature is very useful for spot instances.
		you can change behaviour of Inturuption to 'hibernate' so instance will hibernate rather then stop. 
		so when instance is re-accuired, you can resume the process from the point where the instance was lost due to price rise. 
		Thogh to use this feature in spot instance
			- For a Spot Instance request, the type must be persistent
			- For an EC2 Fleet or Spot Fleet request, the type must be maintain
		
-----------------

EC2 Placement Group:-
	The EC2 ran in the data centers and are a nothing but a hardware devices stack in the AWS  dat centers.
	The AWS provide so detailed functionality that you can configure how and whhere in the stacks the your EC2 shoud instantiate.
	By default EC2 service places the instances in any single AZ in such a manner that they are well diversified wrt underline hardware. 
	but you can change this behaviour to met your requirment
	You can create a PG and place the EC2 instances in it.  This PG can have one of below 3 placement stratagy
	1. Clustered Placement Group:-
			- EC2s are placed very close to each other. So close that they are being placed in same stacks and share the same hardware.
				As they are in same hardware cluster, they have very less network latency when communicating with each other.
				This is useful when you need high and fast EC2-to-EC2 communication. EG. HPC apps.
				The EC2s in such kind of PG remain in single AZ.
				EG:
					Rack-1 [EC2_1, EC2_2, EC2_3, EC2_4, EC2_5]
	2. Spread:-
			-	EC2 are placed in such a manner that they do not share the common hardware and so remain very much isolated (in term of hardware) from each other.
				This is useful when you need highly distrubuted system with good fault tolerance so that failling on one hardware do not impact other.
				The EC2s in such kind of PG can lie in in single AZ or multiple AZ.
				EG:
					Rack-1 [EC2_1]
					Rack-2 [EC2_2]
					Rack-3 [EC2_3]
					Rack-4 [EC2_4]
					Rack-5 [EC2_5]
	3. Partition Placement Group:-
			- This in between Clustered and Partition Placement Group
				Here the CLUSTER of some EC2-instances are placed in isolated PARTITION of hardware. So that failing of one clusted do not impact other partitions.
				EG:
					Rack-1 [EC2_1, EC2_4]
					Rack-2 [EC2_2, EC2_3]
					Rack-3 [EC2_5]

	You can place the instances in placement group at a time of creating instances or after creation.
	Once instance is created then also it can be [but first instance has to put in stopped state]
		- Move to a placement group
		- Move from one placement group to another
		- Remove from a placement group

----------------------

EC2 CURL for meta-data and user-data:-
	A unique feature of EC2 is inside the EC2 you can do the curl to get couple of imp info of the same EC2.
	How:-
		First SSH into the EC2 instance
		now curl here
			curl http://169.254.169.254/latest/meta-data/<item_name>
		item_name could ne 
			hostname, local-ipv4, public-ip etc.
		In output you will get the respective item.
		
		To get the user dat just use 
			curl http://169.254.169.254/latest/user-data


	
----------------------

	Start / Stop / Hibernate/ Reboot instance:-
		
		Stop Instance:-
			- you wont bear charge for EC2 but will be charged for EBS volume
			- Lost the public IPv4 but retain the Private IPv4
			- Reatin the static EIP and you will be charged for that [EIP id free if its assosiated with running instance]
			- You can change below param of EC2 when it is stopped
					Instance type, User data, RAM disk, EBS-Optimization
					you cannot change above thing when EC2 is running.
			- Instance-store type instance cannot be stoped.
			- Instance may start again on new underlying Hardware Host
			
		Terminate Instance:-
			EIP, IP, private IP all will lost. 
			By default root volume will be deleted but it can be retain if its checked.
			By default non-root volume will be retain but this can also be changed.
			Termination Protection:-
				this is controlled by flag 'DisableApiTermination'. you can set it by console. api, sdk, cli.
				if enable then the instance cannot be terminated from console, api, sdk, cli.
				it can only be terminated from OS command only. so you have to ssh in instance and shut it down.
			
		
		Hibernate Instance:-
			- in hibernet state EBS remain attached and RAM data stored in Root-EBS
			- Lost the public IPv4 but retain the Private IPv4
			- Reatin the static EIP and you will be charged for that [EIP id free if its assosiated with running instance]
			- for instance-store type EC2 data will be lost.
			- Instance may start again on new underlying Hardware Host
	
		
		Rebbot Instance:-
			Here all thing remain attached
			public and private IP, volumes, all remian. you also bear all the charges.
			Rebooting instance-store instance:-
				Data will persist 
		
		
		
		
		
		
		
		
		

	
	




