Autoscalling is the GERM of AWS.

When you are using EC2 for any computing (like webserver, DB analysis, image processing), you may need to 
add/remove some more instance depending on load on each EC2.

EC2 - Auto scalling is done via configuring two part
  1.  Launch Configuration or Launch Template:-
        Here you decide how your each EC2 instance would look like. its cpu/memory/EBS capacity, bootstrap script, 
        Security Group, SSH-key pair
        Actully setting this up is almost same as launching a new EC2 instance except in the end it will not launche
        it, but save the set up for on demand launch.
        You can either use Launch Config or Template for this. 
        AWS recommend to use Template as it provides the latest feature like Spot Instances, and template versioning also.
  2.  Auto Scalling Group
        This will set the scenario and capacity, that in which condition we should launch the instances and how many of them
        should be launch. Also you set in which AZ they should be launch.
                
        2.1. First you need to select the 'Launch Configuration' you created earlier
        2.2. Then Desired capacity: the number of instances you wants up and running in normal load
        2.3. Then select the VPC, If you wants the launched instances to lie in some other VPC then default one.
        2.4. Then select subnet  -> 
           You have to select at leat one Subnet in which you wants your instances to launch. always select more then one subnet for higher availibility.
        2.5 LB: Connecting Auto Scalling and Load Balancing:-
             You can desigen the Auto-Scalling-Group in such a way that the launch instances in scalling group will auomatically get attached to a Load balancer.
             For this you have to connect the 'Auto Scalluing Group' [at auto scalling side] to the 'Target Group'[at LB side]
              2.5.1 Click 'Advance'
              2.5.2 Check 'Load Balancing'
              2.5.3 Select the target group[of load balancer] in which you wants to launche th instance.
              
        2.6 Publip Ip for each instance: 
            if you wants each launched instances to have a public IP then youst choose proper options in Advance setting
        2.6 Set the policy:-
              2.6.1 Policy for scalling: Set the condition when the scal up and scale down should happen
                  eg. :  if cpu utilization of each EC2 goes above 90% then sacle up.
              2.6.1 Set How Many Minimum instance you will need at least: This much instance will always be avaialable
              2.6.2 Set How many Maximum instance you can bear: Set one by one how many instance the system can create if situtation demand autoscalling
        7 Select some ore things like tah and all.
        DONE
        Once you are done, the EC2 instances will launch automatically and at the begining the number of instances launched 
        will be equal to value choosed in step 2.2
                      
        All Tuning eg:
         in normal time number of instances = value choosed in step 2.2
         if policy break an need more capasity (eg: if cpu utilization of each EC2 goes above 90% ) then sacle up
         and launch new instances. launch one at a time till you reach at point where no of running instances  =  value choosed in step 2.6.1
         Significance of value  choosed in step 2.6.2  ??????????????????
         
         
         IMP : 
            value in step 2.6.1  <= value in step 2.2  <=  value in step 2.6.2
         
       Launch Configuration VS ASG:-  
        The first one tell you how an each instance will look like in itself.
        Second tell you how those instances are arranged in infrastrucre. 
          Like in what VPC, Subnet behide what LB, wil they have public IP etc.
         
              
  AutoScalling and LB: 
    do not confuse the ASL with LB, the ASL is the feature that keep your capacity in check, depending in usage on each instance
      the ASL can kill/invoke the instances.
      For ASL it does not at all matter that what those instance are doing, from whome they are getting the requestes.
      The only thing they see if they are overloaded or underloaded then just kill/invoke few instances.
      
    The LB is the kind of balancer, when a new request comes to LB it check who has least task in its plate and assign the upcoming
      request to him. It will never be able to invoke /kill any instance.
      For LB it does not matter if system are heavily utilized, it will keep sending the requests to it subordinate EC2s even 
      all of them are at 99.99% occupied.
      
      
  --------------
  
  When you create the ASG it immediatly start creating the EC2's to reach for the minimum capacity.
  So it may be not a optimal. you may wants to create ASG but not wants to run the EC@ just now for thi
  go to 
  AWS > EC2 > ASG > 'tour group' > Action > Edit
  in this forn set 'Suspended Processes' to 'Terminate'

---------------

ASG Lifecycle Hook:-
  ASG also provide the lofecycle hook for launched and terminated instances. 
  In ASG you can set the hook to trigger when any instance is launched or terminated. This trigger could be a SNS or SQS.
  Whenver the ASG launch or terminate the instance the respective hook run. it send the message to SQS or SNS.
  
  CFR for hook:-
    EC2LaunchHook: 
      Type: AWS::AutoScaling::LifecycleHook
      Properties: 
        AutoScalingGroupName: 
          Ref: ASG
        LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
        NotificationTargetARN: 
          Ref: EC2WebsServerLaunchSNSTopic
        RoleARN: 
          Fn::GetAtt: 
            - ATSRoleForSNSAccess
            - Arn  
   
   ATSRoleForSNSAccess:
    This is the role created for ASG service(autoscaling.amazonaws.com) which give SNS:Publish permission of SNS topic. 
    
  There is two hook one for launch and one fo terminating. 
  When hook is running then at that time the instance is not in service state instaed it is in either Pending:Wait or Terminating:Wait state.
  
  What happed if hook fail with some error, then u r given the two param to handle such failure.
      DefaultResult: "CONTINUE" OR "ABANDON"
      HeartbeatTimeout: 120
  So if hook fail or hook take more then 120 second then the instance will
  - continue to process in service sate if DefaultResult = CONTINUE
  - discard the EC2 instance if DefaultResult = ABANDON

------------------------

Scalling Policy:-
  This define on what condition the instances will be launched or taken down.
  There is below way to do it.
  
  Manual:-
    - You set the desired capacityby yourself whnever you need to increase or decrease the capacity.
  Scheduled:-
    - Scheduled scaling allows you to set your own scaling schedule. 
      For example, let's say that every week the traffic to your web application starts to increase on Wednesday, 
      remains high on Thursday, and starts to decrease on Friday. 
      You can plan your scaling actions based on the predictable traffic patterns of your web application. 
  Automation: By Policy
    There is 3 kind od policy
    1. Target Tracking
      - You set a target say 70% CPU usage and ASG take care of adding/removing instances to acive this target.
      There are 4 preconfigured matrics which you can use for this
          ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, ALBRequestCountPerTarget
      you can use those to gauge the number of EC2 in group wrt targer value.
      For this you do not need to set any cloudwatch metrics bu you own.      
    2. Simple Scalling
      - You set a usage value, above wich n number of instance will be launched.
        the value of 'n' you have to gave. also you need to set the cloudwatch metrics that will be use for this 
    3. Step Scalling
      - You set the spans of uasges and set how many instance will be launched or taken down if usage is in respective range.
        also you need to set the cloudwatch metrics that will be use for this. 
    
  
    -------+-----------
  
  
   
    
    
    


