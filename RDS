RDS is the service that provide a way to integrate the Relation Databse.


  
Lets create a RDS instance with SQLServer :-
  
  AWS Console > RDS > Create DB  
  Engine options: Select which kind of DB and its version you wants to select from list #SDB
  DB instance identifier: A unique id that must be unique among all DB instance that are in your AWS account 'mufdatabaseinstance'
  Master username/Password: A user who will defining  users, objects, and permissions in the databases
  DB instance size: Chosse the proper one depending on computational poewer you need.
  Storage Type: 
    General Purpose (SSD) -> suitable for a broad range of database workloads. Provides baseline of 3 IOPS/GiB and ability to burst to 3,000 IOPS.
    Provisioned IOPS (SSD) -> suitable for I/O-intensive database workloads. Provides flexibility to provision I/O ranging from 1,000 to 30,000 IOPS.
  Storage autoscalingInfo: let it be default ??????
  Availability & durability: AWS keep the stadby replica of DB in cas of emergency.
  Now just press 'Creat Database' leave all other default. and u r done
  
  You have created the DB now.
  Lets now connect it with other things
  
  As like the any 
  linux machine connect     at SSH port 22
  window machine connect    at RDP port 3892
  MySql Databse  connect    at TCP port 3306
  
  So to let it connect with outside word we need to open the 3306 port of this RDS DB instance
  How  
  open the DB page by clicking 'mufdatabaseinstance' and click on vlaue of 'VPC security groups'
  VPC Security group: 
    This is simply a firwall around our DB. This firwall should leave the proper port (3306 for mysql) open for client
    (This client could be a IP, CIDR or security group)
    How a security group can also be a point of connction for other security group 
    Still A question ?????
    But for now lets open the TCP 3306 port to all so that anybody can connect our sql DB
  DB connection string:
    Note the VPC url from  RDS > 'mufdatabaseinstance' > DB url
    It formate is : 'mufdatabaseinstance.cu3kxg4kbwag.ap-south-1.rds.amazonaws.com'
    Also keep the note of root user you created at the time DB creation (rootUsername, rootPassword)
  
    
  How to connect with MySql workbench in you PC
  will see later ????
  How to connect with EC2-webserver instance.
  For this we first launch the EC2 instance and make it a webserver
  How? We have already seen it
  So create EC2 web server, select proper security group as such EC2 have HTTP-80 and TCP-22 open
  ##VVIMP: Why not TCP-3306: Because this  EC2 is not a databese itself, it will make a connection with DB at the port-3306 of DB
  
 ----------------------                           
                          ------HTTP--------                        
    world wide web        ------HTTP--------            80-----
                          ------HTTP--------                  |                                
 -----------------------                                      EC2-----------------  3306   RDS - MySql
                                                              |
 muf------------------SSH--------------------                 |
 fat------------------SSH--------------------           22-----
 mur------------------SSH--------------------
 
 The web-server created with EC2 may be built with any software like apache etc.
 We will place either our java(war file), php, nodejs code in proper directory (var/www/html) 
 
 To connect the DB at amazon RDS we will write simillar kind od code 
  phpDBLib.connect('DB connection string', '3306', rootUsername, rootPassword)
  OR
  javaDBLib.connect('DB connection string', '3306',rootUsername, rootPassword)
  OR
  etc.
 
  
  
  -------------
  
  Choosing VPC, subnet group, Publicly accessible at a time of DB creation
  
  VPC:  This is solely depend on you.
  Subnet group :- 
      Why subnet group important
      impact of public subnet group
      impact of private subnet group
Publicly accessible:-
      This one will decide if a public UPv4 should be assign to this DB or not
      If yes, then a public UP will be assigned and so anybody from outside internet can reach to this DB via SSH or any
      if no then no public IPv4 will be assigned and so the DB will be acceesible only in the subnet its been created. 
      
What if in a subnet group all are private subnet
???
What if in a subnet group all are public subnet
???
What if in a subnet group are public + private subnet
???
What if in a subnet group all are private subnet but the Publicly accessible set to be Yes?
???
    
    
    
    Subnet Group - 
      The subnet group is the set of subnets in same VPC. This subnets must lie in diffrent AZ.
      There is two time it playa a critical role - 
        1.  At a time of DB initilization, it determine which AZ is healthy and use that one AZ.
        Once AZ is fixed it now allocate the private IP to this RDS instance.
        2.  At a time of any failovere on any AZ, and DB is configured az multi AZ. the back up DB will be stand up at the other subnet
            in the same group.
        
        It good practice that you either have all the aubnet public or all the subnet private in the subnet group.
        
       If you need to access the database from internet then place it in all-public-subnet-group other wise place it in all-private-subnet-group
      
      Publicly accessible -
        The subnet group you choose will decide if the DB should be avialable to outside or not.
        But its not the final decision to let it connect from outside.
        There is one more thing 'Publicly accessible'
        If it is Yes then the amazon will allot an Public IPv4 for this DB
        If its is No then there wont be any public IPv4 allocated to this DB server.
        So if it is no then there is no way to connect this DB from outside (either bby SSH or by any DB client) becoz there is no IP to connect at all
        Though it has a private IP but that will be accesibile only inside the VPC.
        
        
        
 ---------------------------
 
 DB Engine and version-
  There is 6 RDB supported
  SQLSever
  ORACLE
  MySql
  PostgresSql
  Amazon Aurora : amazon itself
  MariaDb
  
  IMP: there are diffrent version of that DB also there. like in Oracle you may have enterprise and standard edition etc.
  Some of them may not be in free tier.
  
  Use Case:- 
    There are 2 use case 
    -Prod: This has some default onfiguration like Multi EZ enbaled and higher speed low letencty profile. 
    -Dev/Test: This has single AZ with low storage and lower speed.
      This is ust an default value set up, you can change them any time.
      
  DB Instance Class:-
  This define the quality and auantity of compute power
    This define what king of EC2 CPU you wants for this DB. 
    There is 3 family of class
      1.  T2 / T3
          1 - 8 vCPU
          1 - 32 GB RAM
          Moderate Networking performance
          >> Great for small and variable workload
      2.  M3 / M4
          2 - 64 vCPU
          8 - 256GB RAM
          High Networking performance
          >> Great for CPU intensive work
      3.  R3 / R4
          2 - 64 vCPU
          16 - 488GB RAM
          High Networking performance
          >> Great query intesnsive work and higher connection workload.
                 
    Miti AZ:-
      If you enable this then, you will have two diffrent DB instance under the hood. one is primary and 
      other is secondry and copy of primary. AWS take care to keep the secondry in synch to primary.
      In case of any failover the secondery will becom the primary.
  
    Storage Type Allocation :-
      This define the quality and quantity of storage 
      There is 3 type-
        1. General Purpose : GP2
          SSD
          up to 16TB
          3 to 3K IOPS [input outpu per sec]
        2. Provisoned IO : IO1
          SSD
          up to 16TB
          up to 40K IOPS
          >> High performance and should be use in prod
        3. Megnetic
          for legacy
  
  
  
  
Pricing:-
    The cost of DB is decided by this factors -
      1.  DB Engine and version + its licence if applicable
      2.  DB Instance Class
      3.  Miti AZ
      4.  Storage Type Allocation 
      
      
Databse Idetifier:-
    This is an unique identifier for the databse of you AWS account.
    In any region of any AWS account, the identifier will be unique. So choose the value as such.
    This is useful for aws API to identify DB.
    IMP: This is an identifier, not the database name. 
      
Credential:-
    This is the master user cred. and have most previlaged permission. this permission though varies for diffrent DB types.
    Its very dagourous to use this ser in Application. instead create the another user after DB creation
    with less privillages.
  
Networking Config:  
    VPC:-
      You must select an VPC in which you DB will lie. 
    Subnet Group:-
      
  
  
  
  
  
  
  
    

  
