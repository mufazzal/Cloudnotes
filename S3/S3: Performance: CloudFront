S3 and CloudFront(CDN) :-
  When you use the apt 'GET <s3-object-url>' to download any S3 resource, it usues the typiccal internet to load the file to client side.
  Now suppose you have bkt in usa and downloading the file in india, it will take hell of the time. 
  To minimize this time the solution is use CloudFront for the bucket.
  
  Cloud front in itself a large aws service, this serve fast delivery of many S3 servoce like S3, EC2, Rout53 etc
  For now we will see How S3 and CloudFront (CFT) interact.
  
    How to set it up:-
      in a nutshell you set CFT distribution with below info
        - Buccket
        - prefix
      and you get
        - A CFT url for this distribution.
    Now you should use the CFT url to invole CFT.
    
    mechanism:-
      User do GET <cft url for bucket> and query for an object
      The request reaches to nearest EL.
      It check if EL has the cache of that object.
      if yes
        then provide it from cache.
      if no
        then EL us the aws backbone netrwork to get that object 
        the retrived object saved in cache.
        and response returned with that object to user.
      
      - EL only keep the cache of the file/object that are at least being quried at once, if it never being quried then it will not be at that EL. 
  
  
  First lets make a bkt in farthest region possible 'mufa-cdf-enbled-bucket'.
  also say there is many folder in this bucket and you just wants a specific folder ('myDistItems') to be over CFT.
  so create couple of folder including 'myDistItems'. also create 'mufWebsite' and 'mufPriv'
  There is no single setting you have to do here for CFT, it all will be done on AWS > CFT page itself.  
  
  CDN with other then S3:-
    CDN provide service not only to S3 but many other system.
    you can use CDN for S3, LB, webserver, EC2.
    At a time of creating the CDN destribution you need to set the Domain name. The Domain name is in diffrent formate for diffrent service 
    EG:
          Amazon S3 bucket configured as a website – awsexamplebucket.s3-website.us-west-2.amazonaws.com
          Amazon S3 bucket not configured as a website – awsexamplebucket.s3.amazonaws.com
          MediaStore container – examplemediastore.data.mediastore.us-west-1.amazonaws.com
          MediaPackage endpoint – examplemediapackage.mediapackage.us-west-1.amazonaws.com
          Amazon EC2 instance – ec2-203-0-113-25.compute-1.amazonaws.com
          Elastic Load Balancing load balancer – example-load-balancer-1234567890.us-west-2.elb.amazonaws.com
          Your own web server – https://example.com

      
  lets create the distribution-
  Steps:-
    Simply go to AWS > Cloud Front > Create > web
    Fill the form, lets see mos imp things to fill for S3:-
    
    Origin Domain Name: 
      Select from the existing value, this will be related to bkt that we have create ealier
      choose option 'mufa-cdf-enbled-bucket.s3.amazonaws.com'. 
      So for S3, this is simply a   <Bucket Name>.s3.amazonaws.com
    Origin Path: 
      This is will be the folder inside that bucket, all the content inside the chossed folder will be accessible via 
      this CFT-distribution. anything outside this folder will not be accessible via this 'CFT-distribution'
      lets type here 'myDistItems'
      
    The above two param plays the vital Role in mapping of Object and CFL paths.
    you have bkt as
      mufa-cdf-enbled-bucket
        fruits
          apple, oranges, mangos [hafua, badam]
        veg
          potato, ginger, onion [big, small] 

    Say you create two diffrent distribution by choosing those
      dist for fruits:-
        Origin Domain Name = mufa-cdf-enbled-bucket.s3.amazonaws.com
        Origin Path = fruits
        ...so..
        The generate CDN url =>  blablabla.cloudfront.net
        By this url you can access - 
            blablabla.cloudfront.net/apple
            blablabla.cloudfront.net/oranges
            blablabla.cloudfront.net/mangos/hafua
         but not
            blablabla.cloudfront.net/fruits/apple  --> That is because the fruots itself is a root folder
            blablabla.cloudfront.net/potato
            blablabla.cloudfront.net/ginger
            blablabla.cloudfront.net/onion/big
            
        
      dist for veg:-
        Origin Domain Name = mufa-cdf-enbled-bucket.s3.amazonaws.com
        Origin Path = veg
        ...so..
        The generate CDN url =>  claclacla.cloudfront.net
        By this url you can access - 
            claclacla.cloudfront.net/potato
            claclacla.cloudfront.net/ginger
            claclacla.cloudfront.net/onion/big
         but not
            claclacla.cloudfront.net/veg/potato
            claclacla.cloudfront.net/apple
            claclacla.cloudfront.net/oranges
            claclacla.cloudfront.net/mangos/hafua  
      
    Restrict Bucket Access: 
      YEs! if you wants to restrict the accessibilitry only and only via CDN, not via direct S3 url
      ?????????????????????????
      
    Origin ID: unique id of this origin, I do not know why they call it a IT. better call it description or alias
      Enter a description for the origin. This value lets you distinguish multiple origins in the same distribution from one another. 
      ??????????????????????????
      
    Origin Access Identity: 
      This is just like(but not same) as IAM user, which is created to access the bucket. 
      Here you can either new identity or use the existing one. [its list is at AWS > CFT > security > Origin Access Identity]
      
    Grant Read Permissions on Bucket: 
      The identity you chossed in option 'Origin Access Identity', must have permission to perform 'GetObject' api on bucket.
      so BP of that bucket to allow the GetObject operation over tye bkt 'mufa-cdf-enbled-bucket'.
      
      If above two option is saetup properly then you will be able to observe two thing after distribution deployed.
      1. at page  AWS > CFT > security > Origin Access Identity  you can see the new identity created with id 'uidOF_OriginAccessIdentity'.
      2. in BP of 'mufa-cdf-enbled-bucket' there is a statement added automatically-
      ...
          "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity <uidOF_OriginAccessIdentity>"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::mufa-cdf-enbled-bucket/*"          
      ...
    
    Viewer Protocol Policy: 
      you can restric user either to use HTTP or to use HTTPS. Also you can configure to redirect any HTTP 
      to HTTPS. but such redirection will need a SSL certificate to. if you wants it then upload the SSL certifiate in option 'SSL Certificate' at tab 'Distribution Settings'
      Allowed HTTP Methods: which HTTP methodes are allowed, yoyu can allow 'GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE' methodes
      the confusion is, CFT mainly do viewing operatiojn so  How PUT, DELETE, POST works??????????????????????????
    
    Object Caching: 
        Maximum TTL: Once the objevt is cached at Edge-location, it may be possiblr that the file later changed at origin.
          To keepthe edgre location in synch it is must that the edge locations keep itself in synch to that origin.
          The max TTL time is the time that determine that how long the file will live at Edge-location.
          Once the TTL priode passed out the Edge-location communicate wuth origin and synch itself again.
          So any chages at origin will again be refected in edge-locations.
          
          So if you files in s3 buucket/folder is changing very rarly thaen keep the max TTL higher.
          but if it chages a lot then keep it small.expire.
  
   Restrict Viewer Access (Use Signed URLs or Signed Cookies): 
    yes! if you wants to use only personalized signed url to access the files.


What happen over CFT When
  1. You delete a file from S3 : 
        If you delete a file from S3 and this file may be alaredy over multiple edge location, then its deletion will not be immediatly
        reflected over all ELs, instead the CACHE of this file will remain over the all ELs till its TTL expire. and rhis cached file
        will be served to user.
        Once TTL expire the CFT make a sych request to origin (S3 bkt 'mufa-cdf-enbled-bucket' in our case)
        and look fot this object/file, once he is informed that its deleted then it will reflect it over all trhe ELs. 
        So deletion of file may not reflect immedietly but after the TTL expiration.

  2. Add new file in Bucket:-
       When uploaded upload it, at thattime the file will not be at ELs. becoz S3 upload do not care about CFT. 
       lets say the file key is 'graps' so when you do PUtObject operation on graps.txt, the fi;le will be uploaded obly on S3 bucket. thats it
       Now when any user make a request to CFT (not S3 bucket) for this object by calling 'blablabla.cloudfront.net/graps' 
       The file will be first cached from S3 to the nearest Edge location and then it will be served to the called.
       So in nutshell if new file is added the file be reflected as soon as somone call it via CFT url (no S3 url 'blablabla.s3.amazonaws.com/fruits/graps')
  
  3. When you cvhange the file:
        This work same as the delete one, it will be reflected after the TTL passed out.
        
  How S3-bucket and CFT synch :- 
      When i say su=ynch, it does not mns that all S3 object will be come into the CFT,
      CFT only keep the cache of the file/object that are at least being quried at once, if it never being quried then it will 
      neither it on ELs, nor synch it ever.
      Once the file is quried by any user then only its key is added on CFT and late those only keys are synched.
      When i say synch here, it means that synchronization between 
        CACHED file/object with the origin(Se). '
       not 
        file/object with the origin(Se). '
      


 Q: Impact of bucket Policy?
    BP must not explicitly DENY the GETObject to public user. 
    So below BP will dissallow the CDN to work on bucket
    
     "Effect": "Deny",
      "Principal": "*",
      "Action": [ "s3:GetObject" ],
      "Resource": "arn:aws:s3:::mufa-test-cdft-bucket-2021/*"
    also note that Empty BP will allow the CDN to work.
 
 Q: Does OBject also has to have a public access
    Yes, It has to be public.
    
 Q: Does bkt must have all BPAF as off for CloudFront to work: 
    Yes, it has to be off
    
    
  Origin Access Identity:-
    The very big security challange with the S3+CDN is that you have to make the bucket and object both public. you BP and ACL in no way can deny access to any object for CDN to work accordingly.
    This make the bucket vlnurable.
    To sovle this issue comes the concept of OAI.
    
    The OAI is kind os pseudo identity that provide a kind of identification (Principle) for CDN.
    By using OAI you can provide the access of Bucket for this OAI and deny the access for other identities(including public)
    
    With OAI, you can restrict the bucket to be readable by CDN only not with public S3 url.
    How:
      1.  in the bucket set the BPAF to off
      2.  ACL for the inner object = private
      3.  write BP
            "Sid": "1",
            "Effect": "Allow",
            "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E11YOP9QR1NZ7Q" },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::mufa-test-cdft-bucket-2021/*"
       4. Update Object ACL:-
            In the ACL of object just add the 'Amazon S3 Canonical User ID' and remove public access. 
    Now bucket content will be accessible via CDN only and bucket and its content will not be public. 
    IMP: you do not have to make any changes in the CDN url for this. the OAI provide the the identity to CDN distribution not the oerson who is using this url.
    
    
    CDN Signed url:-
      As discussed above with the OAI you can make the Bucket conetent private and restrict the content access via CDN only but still there is one flaw here
      if someone has the CDN url he can have the unlimited access of the content.
      to limit this CDN provide the mechanics of Signed URL, instaed of providing the user direct CDN url give him the signed url.
      
      The signed url is created with orignal CDN url with below factor
        1. key-pair-id
        2. Private Key
        3. valid till
        
      How:-
        For this first you have to create the CDN key RSA key pair
          AWS console > Login with Root accont > My Security Credential > Cloud frony Key > Create
          save the private key and note the accesskey id.
        Now you can use CLI. SDK etc to create the signed url
          use below command for CLI
            aws cloud front sign
            --url <value>                   EG. http://d15uraiww9uj93.cloudfront.net/site/muf.html
            --key-pair-id <value>               the one you noted down
            --private-key <value>               the path of pravate key 
            --date-less-than <value>            till when you want user to have access
            [--date-greater-than <value>]
            [--ip-address <value>]              
          
      
      aws cloudfront sign \
            --url https://d111111abcdef8.cloudfront.net/private-content/private-file.html \
            --key-pair-id APKAEIBAERJR2EXAMPLE \
            --private-key file://cf-signer-priv-key.pem \
            --date-less-than 2020-01-01
    
    Restrict the origin Access via signed url only:-
      You have provided user the signed url but unsigned url still can access the CDN so the last thing we do is to restric user from accessing the origin(via CDN) 
      with unsigned url. and also allow him only if url is signed from the set of correct .
      for this
        in Console:- 
          go to
            Cloud Front > Distribition > 'ypu distribution' > Behaviour > 'Behaviour for your origin' > Edit
            Restrict Viewer Access > Yes
            Trusted Key Groups or Trusted Signer > choss any
            Select signer or key group.
            done.
          The signer could be   
            your aws account or other aws account too.
         At a time of GET CDN will check if url is signed with proper key or not which is from correct set of signer.
    
    
Invalidate Cache on CFT:-
  As you know that after the TTL passes out the cache of file/object will get to be synched with origin, but you can also forcefully
  synch it with ortigin. use invalidate option for this.
  
  
  
CDN and Multiple Origin:-
  CDN can support the multiple origin. you can distiguoish them based in path.
  
Caching Policy:-
  For each origin you can set the cache policy this define how
    CDN will request to origin and how long it will hold it.

Default Caching Policy:-
  Thers is a default caching policy apply if no cache policy given for specific origin.
  
CFN add below header in the response too
  X-Amz-Cf-Id
  X-Amz-Cf-Pop
  X-Cache
  
  Cloudformation for CDN
  
   CDFTDistribution:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig: 
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior: <origin id for origin 1 or 2, on which you wats traffic to routed if no path pattern matches at CacheBehaviors.PathPattern>
          "TargetOriginId" 
          <setting for default cache behavior>
        Origins:
          - <origin 1>
          - <origin 2>
        CacheBehaviors:
          - TargetOriginId: <origin id for origin 1>
            PathPattern: site/*  <id url put by user is http://CDNURL/site/* then route it to origin 1>
            ...
          - TargetOriginId: <origin id for origin 2>
            PathPattern: api/*
            .....  
  
  origin:-
    it has detail about origin 
        "DomainName" : This will tell the origin url. it could be url of S3, EC2, ELB, webserver,
        "OriginPath" : This path will be added to domain name by CDN,
        "Id" : we will use this in as refrence,
        "CustomOriginConfig" : USe this for all other origin(S3, ELB, EC2, weserver) except non-static S3 website,
        "S3OriginConfig" :  Use this for S3 bucket who is not the static website. 
        "OriginCustomHeaders" : [ OriginCustomHeader, ... ],
  
  DefaultCacheBehavior and CacheBehaviors define that how CDN will connect to the origin
      "TargetOriginId"
      "PathPattern": 
      "MaxTTL" : Double,
      "MinTTL" : Double,
      "ForwardedValues"
      "CachedMethods"
      "ViewerProtocolPolicy"  The protocol that viewers can use to access the files in the origin specified by TargetOriginId, http, https
      "TrustedSigners" Use this if you wants to allow Signed url only. specify the key if of cloud front key pair here.
      
 - for any GET request if CDN has the data in cache then it will deliver it with response code 304 otherwise with 200.
 - CloudFront VS Transfer-Acceleration : Cloud front is for CDN, Both uses AWS backbone network for data transfer but CDN also cache the data at EL but TAX dont
 - PUT/POST on CDN: This operation are also supported in CDN. you need to simply do this operation with valid data.
 
 
  DistributionConfig.DefaultRootObject:-
    This is very usefukl if you do not wants to expose the materials when user try tio access the root url of CFT distrbution.
    EG: if orgin is S3 then CFT url may expose the list of object at root level in s3. So its better to set the default root object.
    
    
    
    
    
    
     
