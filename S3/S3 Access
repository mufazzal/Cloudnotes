#View file in tab = 2


Relation of Bucket/Object and root-USer/IAM-User/Congnito-USer/Anonymous-user
	Bucket can be created by root-USer, IAM-User, Congnito-USer but not by Anonymous-user
	Object can be created by root-USer, IAM-User, Congnito-USer, Anonymous-user
	
	exept for root-user, S3 has the flat structure for ownership of any bucket or object.
	for any S3 bucket or Object the only and only owner is ROOT USER. no one else. 
	
		Anyone either 
			IAM user, Cognito identity user, Anonymus user(*1)
		can 
			create, delete, edit, change Tag, modify policy, change any configuration on bucket or object
		if they have proper permission to do so.  
*1: Anonmous user at best can get list of object, read the object and its ACL only. no other operation allowd by anonymous.
		
		Visualize it like this 
			
																	#S3ACCESSVISUAL																																												 
			-----------------------																		 				          							 
			|IAM user							|																						          							 
			|	- Mufazzal_Hussain	|						---------												          							 
			|	- Murtaza						|	S3:*			|				|														      							 
			|	- Shabbir						|=========>>|	IAMP	|==============>>================|		      															 
			|IAM Role							|						|				|												        ||  							 
			|	- EC2ServerRole			|				 		---------												        ||  							 
			|	- LambdaUserRoel		|																										||								 
			|   <cognitoRoles>		|																										||								 
			|			- appRole1			|																										||			
			|			- appRole2			|																										||							            															
			-----------------------																						        ||    
																																								||
			       											                                              ||
			_______________________	       	                              						||				---------					______________________________
			|Root User						|		S3:*	          The Owner of ALL                ||        |				|         |															|
			|		h.mufazzal@gmail	|===============>>=====================|            |=======>>|				|         |					devopsBucket				|
			|_____________________|					  													||                      |	 BP		|=======>>|					profile_bucket			|
																																	||            |=======>>|				|         |						mubucket					|
																																	||            ||        |				|         |															|
																																---------       ||        ---------         |_____________________________|
				                                                        | Object|       ||
			_______________________						                        |	OR		|       ||
			|											|		S3:*		      	                |	Bucket|===>>===|
			|Other AWS accout			|===============>>================>>|	ACL		|       
			|		awsacc1						|							                      |				|       
			|_____________________|         		                      ---------
																																	 ^^
																																	 ||			 
			_______________________	       	 ----------------						 ||									 
			|											|					 |						 	|						 ||										 
			|Anonymous users			|===>>====>|			BPAF	 	|===>>========|																 
			|_____________________|		RA	 	 |							|																 
			                                 ----------------																 
													RA = Only some Rest APi are allowed, that are
															- GET objectList
															- GET BucketACL
															- GET Object
															- PUT Object
															- GET ObjectACL																			 
																			 

There two broad way to manage the access
	1. Resource Based
		1.1 ACL
		1.2 Bucket Policy
	2. User Based
		2.1 IAM Policy
		

ACL:-
	This is the most basic way to manage the access. Its a kind of legacy and necessary in very few scenario.
	most of the time we use BP or IAMP instaed of ACL. But in one condition where ACL is ir-replacible.
	ACL Apply on Bucket and Object both.
	ACL use the XML to define the permission. but you hardly ever write this XML.	we use console, sdl, cli to set the ACL.
	
	ACL work for below principle
	-	Cross AWS account Access
	- Predefined AWS Group Access
	- Public Anonymous Access
	It not work for
	- IAM User
	
	Kind of Access on Actions it provide is also very limited. It give just basic read and write access over bucket. bucket_ACL, object, object_ACL
		
	ACL for Bucket:-
		In context of bucket the ACL grant access to below operation to Principls
		READ: Will provide access to reading the list of object inside the bucket. So access to Action 's3:ListBucket, s3:ListBucketVersions'
		WRITE: Will provide access to add/update/delete object inside the bucket. So access to Action 's3:PutObject, s3:DeleteObject'
		READ_ACL: Will provide access to reading the ACL of Bucket. So access to Action 's3:GetBucketAcl
		WRITE_ACL: Will provide access to change the ACL of Bucket. So access to Action s3:PutBucketAcl'
		FULL_CONTRL: all 4 accesses
		
		Does any of those permission provide access to Resource/Action like
			isVersiningEnabled, getTags, setBucketPolicy etc
		NO. The ACL give only and only the basic read write accees nothing else.	
		So with ACL permission you can add/read/delete the objevts in Bucket but cannot change any configuration of bucket itself.

		Predfined AWS group for ACL:-
			The is three predefine user-group for ACL 'AuthenticatedUser-group' and 'AllUsers-group'
			AuthenticatedUser-group: means all the user in the universe who has authenticated with AWS account. so basically you allow whole word aws users to access your bucket.
			AllUsers-group: Access to whole world. no authentiaction required atall. so OPEN TO ALL. This is actully a Public Anonymus Access
			Log Delivery group: Represented by http://acs.amazonaws.com/groups/s3/LogDelivery

		You can set the ACL on bucket via AWS console or by CLI or by SDK.
		ACL on Bucket via AWS console:-
			go to bucket > permission > ACL
			You will see four panels(AuthenticatedUser-group is not there) and Each has 4 options to toggle. which are like below
									
									
																					List objects 	 | 	 Write objects    |  	Read bucket permissions   |  	Write bucket permissions
				1. For Bucket owner
				2. For Other AWS account
				3. Public Access or AllUsers-group
				4. Log Delivery Group
				5. AuthenticatedUser-group
			
			In this metrics you can easily figure out how you can set the accesses for difftent principle.
			
			To give access to diffrent AWS account you need to add the canonical Id of that AWS account.
			Log delivery group ??????
			You can also remove the permission of bucket owner too. if you remove access of owner then the owner himslef also not be able to view/edit object in bucket.
			When you create a bucket then by default this bucket is private. only the owner has all the permission in ACL no one else.
			
			
			ACL on Bucket via CLI, SDK, CFT :-
				To set ACL via console is quite straihtforward. you just need to fill a matrix form and you are done.
				But for other medium there is tricky way
							for this we use the Canned ACL. This is the predefined set of permission in diffremt combination of READ, WRITE, READ_ACL, WRITE_ACL, FULL_CONTROL.
				
				#CannedACLTABLE
				
				Canned ACL					Apply on											ingridients																	Use case
				private								B O						Owner: 														FULL_CONTROL						Bucket/Object Owner has full control. no one else has any access. This is default ACL setting.
																						Public_Access or AllUsers-group:	none 
																						Other AWS account:								none
																						AuthenticatedUser-group:					none
																						Log Delivery Group:								none
			
				public-read						B O						Owner: 														FULL_CONTROL						Bucket/Object Owner has full contron.
																						Public_Access or AllUsers-group:	READ	 									All other in the world can just read it anonymously without any kind of authentication.
																						Other AWS account:								???
																						AuthenticatedUser-group:					???
																						Log Delivery Group:								???

				public-read-write			B O						Owner: 														FULL_CONTROL						All in the world can read/write anonymously without any kind of authentication.
																						Public_Access or AllUsers-group:	FULL_CONTROL						
																						Other AWS account:								???
																						AuthenticatedUser-group:					???
																						Log Delivery Group:								???
				authenticated-read		B O						Owner: 														FULL_CONTROL						Bucket/Object Owner has full contron.
																						Public_Access or AllUsers-group:	FULL_CONTROL						Authenticated AWS user can read the bucket/Object
																						Other AWS account:								none
																						AuthenticatedUser-group:					READ
																						Log Delivery Group:								none		
				bucket-owner-read		 		O						Owner: 														FULL_CONTROL						Object Owner has full contron. Bucket Owner can read.
																						Bucket Owner:											READ
																						Public_Access or AllUsers-group:	none						
																						Other AWS account:								none
																						AuthenticatedUser-group:					none
																						Log Delivery Group:								none																								
		bucket-owner-full-control		O						Owner: 														FULL_CONTROL						Object Owner and Bucket owner has full contron.
																						Bucket Owner:											FULL_CONTROL
																						Public_Access or AllUsers-group:	FULL_CONTROL						
																						Other AWS account:								none
																						AuthenticatedUser-group:					none
																						Log Delivery Group:								none																							
																						
				
	ACL for Object:-
		Object level ACL decide that if grantee can access the Object and its ACL or not.
		At bucket level access grantee can be granted to add/edit/delete the object in the bucket but not to read or download the object itself.
		For this he need the ACL permission at object level.

		In context of bucket the ACL grant access to below operation to Principls
		READ: Will provide access to downloading/reading the object. So access to Action 's3:GetObjct'
		WRITE: Not applicable at object level. as write permission is granted via ACL of bucket
		READ_ACL: Will provide access to reading the ACL of Object. So access to Action 's3:GetObjectAcl
		WRITE_ACL: Will provide access to change the ACL of Object. So access to Action s3:PutObjectAcl'
		FULL_CONTRL: all 4 accesses
		
		Does any of those permission provide access to Resource/Action like
			isVersiningEnabled, getTags, setObjectPolicy etc
		NO. The ACL give only and only the basic read accees nothing else.	
		
		You can set the ACL on object via AWS console or by CLI or by SDK.
		ACL on Bucket via AWS console:-
			go to bucket > ypour object > permission > ACL
			You will see three panels(AuthenticatedUser-group is not there) and Each has 3 options to toggle. which are like below
									
																					 			Read object    |  	Read object permissions   |  	Write object permissions
				1. For object owner
				2. For Other AWS account
				3. Public Access or AllUsers-group

		ACL on Bucket via CLI, SDK, CFT :-
			See table 	#CannedACLTABLE
			
		By Default the Object ACL is private and so only the owner has the full access. no one else.
		but if you set it like to be accessible to public anonymously.
		

### ACL is a Legacy and it has very few use case. Only time it is unavoidable to use is to 
			-	when you need to share the bucked between multiple AWS accounts.
			- You wants any particular object to be anonymously public accessible
		Otherwise DO NOT USE IT. 
		Even allowing/denying the anonymous public access of bucket is also possible with Bucket Policy.		
	
	Intrasting use case of ACL: Making a particular object public in bucket:-
		Suppose you wants to allow some particular objects in the bucket to be public. Now how would you do it?
		1. BPAF: You have to set it Off. so it allow anonymous request to flow.
		2. Bucket ACL: You can keep the bucket private as for reading/downloading object we need Object-ACL permission not Bucket-ACL permission
		3. Object ACL: It must be publi-read so that anonymous user can readthe object.
		4. IAMP: IAMP do not matter for Anonymous user
		5. BP: ???????????????????????
	
Bucket ACL VS Object ACL:-
	When you wants to get the list of object in bucket or add/edit/delete the object in bucket then Bucket-ACL is used to give access.
	When you wants to read/download the object then Bucket-ACL is used to give access.
	After any request only one of then will be ued so they never come acrossin each other path.
	Once finish up with one of them the request go to BP to determine if BP also allowing the operation or not. 


-----------------
IAM Policy:-
	The IAM policy is use to give the access of AWS resources to IAM user. This is user based policy. and apply to user
	Unlike ACL it provide way to give access to the actions like
		getObjetTaging, getBucketTagging, getObjectVersion etc.
	
	IAMP work for below principle
	- Root User ????????
	- IAM User it is attched to
	- IAM Role it is attched to
	- Cognito identity that is attached to IAM Role it is attched to
	It not work for
	-	Cross AWS account Access
	- Predefined AWS Group Access
	- Public Anonymous Access
	
	When you create the IAM user, by default he is toothless. he can do anyting. so you have to assign him the proper group.
	So newly created IAM user will be stop at IAAMP block only in #S3ACCESSVISUAL
	
	to give him access you need to write the policy doc for that user.
	There is two AWS managed policy you can use if you want to give the not so fine grain access ti that user
	- S3FullAccess:- This will grant user the full acceess to do anything on S3. This policy is basically
							{		"Version": "2012-10-17",
									"Statement": [{
													"Effect": "Allow",
													"Action": "s3:*",
													"Resource": "*"
											}]
							}			
	- S3ReadOnlyAccess:- This will give read access
							{		"Version": "2012-10-17",
									"Statement": [{
													"Effect": "Allow",
													"Action": [ "s3:Get*", "s3:List*"],
													"Resource": "*"
											}]
							}
	This two will give "Allow" to read anything or read/write anything on S3. so it is bit risky.
	If you want then to have access on limited number of resource and action with some condition then you shoud write the policy by yourself
	see #WRITEPOLICY
	
	IMP: By default if IAM user has no policy attached for S3 so it give "DENY" always.
				but if you set it with "S3FullAccess" then it will allow all.
				and if you set it with "S3ReadOnlyAccess" then it will allow all read(get*) and deny write(put/delete*).
	

------

Bucket Policy:-
	The Bucket policy is resource based policy. and apply to the Bucket. consider it to be the final check point for any principle to pass to S3.
	This is most fine grained access system for S3.
	
	BP work for below principle
	- Root User ????????
	- IAM User
	- IAM Role
	- IAM Role of Cognito identity 
	- Other AWS Account
	-	Cross AWS account Access
	- Predefined AWS Group Access  ??????????
	- Public Anonymous Access	 ????????
	It not work for
	??????????????
	
	When you create the Bucket, by default he is defenceless for BP side. anybody can do anything on it if he has come up to BP block in #S3ACCESSVISUAL.
	So Empty BP of bucket will give "Allow" to any action on S3. so it is bit risky.
	to make it secure from BP side, need to write the policy doc for that user.
	
	to write BP-
	see #WRITEPOLICY
	
	
#WRITEPOLICY
Writing BP or IAMP:-
		Writing policy for both is almost same with below major diffrence
		1. In IAMP you do not have Principle, because the IAMP is attach to a IAM user/grou/role so the principle is inherently the IAM identity on which this policy is attached.
				But BP do have principle Tag.
		2. In IAMP the scope of resource is too larger, ot could be the EC2, lambda, RDS, Bucket etc. [Thoug for S3 we use only from S3:*]
				But in BP it is only limilter to the bucket is is attached to.
		3. The BP is apply to Bucket so it can restrict the operation only up the bucket and object level. But by IAM you can restrict usre to do operation over S3 itself
				EG:- Creatinig or deleting bucket. 				
		4. If a User/role do not have a IAMP attached or has policy attached which says naothing for S3 then that user will have "Deny" for all S3 operation.
				But if a BP is empty then it will "Allow" any opration on any resource by anyone.

	Principle:-
		This is only for BP not for IAMP.
		Formate:-
			For root user-
											Principle: { "AWS": "arn:aws:iam::<12_digit_acc_no>:root"}
			For IAM User-
											Principle: { "AWS": "arn:aws:iam::<12_digit_acc_no>:user/Mufazzal_Hussain"}
			For Role:
											Principal: { "AWS": "arn:aws:iam::<12_digit_acc_no>/role-name" }
			For Federated
											Principal: { "Federated": "graph.facebook.com" }
											Principal: { "Federated": "cognito-identity.amazonaws.com" }
			Federated SAML
											Principal: { "Federated": "arn:aws:iam::<12_digit_acc_no>:saml-provider/provider-name" }
			For Anonymous 
											Principal: { "AWS": "*"}			OR		Principle: '*'
			For more then one aws identity you can use the array
											Principal: { "AWS": [{}, {}...] }

			With canonical id : hardly used
				Principal: {"CanonicalUser":"64-digit-alphanumeric-value"}
			
			Wildcard and Principle-ARN:-
				VVVIMP: You CAN NOT use the wild card in the ARN of principle. So anything like below is invalid
				 "Principal": { "AWS": "arn:aws:iam::388412347424:user/*" },
				 "Principal": { "AWS": "arn:aws:iam::388412347424:role/*" },
				 "Principal": { "AWS": "arn:aws:iam::388412347424:user/muf*" },
				Basically you cannot allow or deny all the role or user matching the pattern.
				You have to be very specific in the ARN about the grantee. iyt must be a definative user/role
				
			

	Resource:-
		In IAMP the resource could by anything drom EC2 to Lambda to S3 to CFT. but we are concentrating on S3 only.
		In BP it is only limilted to the bucket is is attached to.
		Formate:
			Filter To Bucket only [not its inner objects]
				Resource: "arn:aws:s3:::bucket_name"
			Filter To all the inner object of bucket [not bucket]
				Resource: "arn:aws:s3:::bucket_name/*"				
			Filter To all the inner object of bucket and bucket both
				Resource: ["arn:aws:s3:::bucket_name", "arn:aws:s3:::bucket_name/*]				
			Filter To some object
				Resource: ["arn:aws:s3:::bucket_name/obj1.txtx", "arn:aws:s3:::bucket_name/obj3.txt"]				
			Filter To ALL the Bucket and its objects
				Resource: "arn:aws:s3:::*"		

	Conditions:-
		Apart form Principle, Action there is more filter from which the request passes in the policy. this is Conditions. 
		in the Conditions you can check some other things that come with the request.
		only if the condition matches, then the Effect will take place.
		Formate:-
			Condition: {
				"A_Condition" : [
					{"Condition_key": ["value_1", "value_2", "value_3"]}
				]
			}
		EG:-
			Allow user to put objecy=t but only if ACL = public_read
						Condition: {
							"StringEquals": [										-----> A_Condition
								"S3:x-amz-alc": 									-----> Condition_key
									["public_read"]									-----> values
							]
						}
					
			Allow put only if encryption provided
			Allo delete only if usr has multifactor auth

	Effect: this could be "Allow" or "Deny"
	
Sce-1:-
	When a ceratain PRINCIPLE requested to perform certain ACTION on certain RESOURCE but that PRINCIPLE is not mentioned in the BP
	OR
	When a ceratain ACTION requested to be performed on certain RESOURCE by certain PRINCIPLE but that ACTION is not mentioned in the BP
	OR
	When a ceratain RESOURCE is asked to have certain ACTION by certain PRINCIPLE but that RESOURCE is not mentioned in the BP
	
	Then they all will be consider as "Allow"	
		EG:-
			On a bucket you have a empty BP. OR
			Have a policy like below
						{
								"Statement": [{
												"Effect": "Deny/Allow",
												"Principal": { "AWS": "arn:aws:iam::388412347424:user/Mufazzal_Hussain"},
												"Action": "s3:ListBucket",
												"Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw"
										}]
						}		
				Suppose a other kind of user like an anonymous user or IAM user 'Murtaza' or IAM user of aws accout '21334312' wants to do 'ListBucket' then what happen.
				- As this policy say nothing for them. it mns they all got "Allow"
				Suppose someone asked to perform the action 'GetObject' then what happen.
				- As this policy say nothing for GetObject. it mns it got "Allow"
				
Sce-2:-			
			The fine grainness of BP-
				In above statement if you ue "Deny" then 'Mufazzal_Hussain' will not be able to see the list of object in bucket 'muf-aws-tuto-acl-public-rw'. 
				IF he login to AWS console, he may 
					- see/edit the all other info of bucket like bucket policy, ACL, version enabe etc
					- he may add/edit an object in the bucket
					But he cannot at all view the list of object in that bucket. there he will got the access denied.
					neither you will be ale to get the list of object via CLI or SDK with Accesskey-id of Mufazzal_Hussain.
	
Sce-3:-	
			The action mentioned in the Action tag must be applicable on at least one resource in the Resorces
			EG:-
				Below statement will give error while saving, because 'ListBucket' is a bucket level opearion and its not applied to objects of that bucket. 
				 and 'arn:aws:s3:::muf-aws-tuto-acl-public-rw/*' is all objects of bucket not bucket.
			      "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw/*",
				Below statement will work because 'ListBucket' is a bucket level opearion.
			      "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw",
				Below statement will also work because 'ListBucket' is a bucket level opearion and 'arn:aws:s3:::muf-aws-tuto-acl-public-rw' is bucket.
            "Action": "s3:ListBucket",
            "Resource": [ "arn:aws:s3:::muf-aws-tuto-acl-public-rw", "arn:aws:s3:::muf-aws-tuto-acl-public-rw/*" ]			
				Below will also give error because 'GetObject' is for object not bucket:-
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw"				
				Below will work fine:-
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw/*"						
			
Sce-4:-	
		Allowing Anonymous but deny spesific-		
											"Statement": [{
																	"Effect": "Deny",
																	"Principal": { "AWS": "arn:aws:iam::388412347424:user/Mufazzal_Hussain" },
																	"Action": "s3:ListBucket",
																	"Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw"
															},{
																	"Effect": "Allow",
																	"Principal": { "AWS": "*"},
																	"Action": "s3:ListBucket",
																	"Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw"
															}]
	
		This will work as the statement say.
		You will get the list without any authentication info in REST API. but if you 
			-	login in AWS console via Mufazzal_Hussain, you will not see the list of object in that bucket
			- if you use SDK, CLI with cred of Mufazzal_Hussain you wont get any list.
		
Sce-5:-
	Allowing all the IAM user/role but deny the one.
											"Statement": [{
																	"Effect": "Deny",
																	"Principal": { "AWS": "arn:aws:iam::388412347424:role/*" },
																	"Action": "s3:ListBucket",
																	"Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw"
															},{
																	"Effect": "Allow",
																	"Principal": { "AWS": "arn:aws:iam::388412347424:role/Mufazzal_Hussain"},
																	"Action": "s3:ListBucket",
																	"Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw"
															}]
		Impossible: This will give error. you cannot use wildcard in principle ARN.
		
Sec-6:-
	Deny always win
	If a principle is matched with two criretrion in policy with diffrent result then "Deny" always win
	EG:-
				{		"Effect": "Deny",
            "Principal": { "AWS": "arn:aws:iam::388412347424:user/Mufazzal_Hussain" },
            "Action": [ "s3:GetObject", "s3:PutObject" ],
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw/*"
        },
				{		"Effect": "Allow",
            "Principal": { "AWS": "*" },
            "Action": [ "s3:GetObject", "s3:PutObject" ],
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw/*"
        },	
		Now if you try to do operation with creds of 'Mufazzal_Hussain' then it will e denied.
		but if you do it anonymously or by Murtuzas account then it will work.

Sec-7:-
	The Actions and the Resource could be clubbed if principle is same.
				{		"Effect": "Deny",
            "Principal": { "AWS": "*" },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw/*"
        },
				{		"Effect": "Allow",
            "Principal": { "AWS": "*" },
            "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::muf-aws-tuto-acl-public-rw"
        },	
		This can be writtedn in one like below
				{		"Effect": "Allow",
            "Principal": { "AWS": "*" },
            "Action": [ "s3:ListBucket", "s3:GetObject" ],
            "Resource": ["arn:aws:s3:::muf-aws-tuto-acl-public-rw", "arn:aws:s3:::muf-aws-tuto-acl-public-rw/*" ]
        },		
				

IAM Group with BP and/or IAMP:-
	Do remember, At bucket policy you cannot identify the user based in IAM Group so anything like below will never be effective or valid
			"Principal": { "AWS": "arn:aws:iam::388412347424:group/devopsUserGroup" },
	IAM group can only be used at IAMP. for this you just creat Group then create policy and finally you assign this policy to group.
	
----
Suppose Mufazzal_Hussain has the permisson of Put* so he uploaded the object 'mufPic.jpg'
Q: Who is the owner of 'mufPic.jpg' and can Murtuza delete/edit it?
A: OWmer is root user(h.mufazzal@gmail.com). but Murtuza can delete/edit it if murtada has permission to do 'Delete*'/'put*'

Suppose someone anonymously did Put* and uploaded the object 'mufPic.jpg'
Q: Who is the owner of 'mufPic.jpg' and can Murtuza delete/edit it?
A: OWmer is root user(h.mufazzal@gmail.com). but Murtuza can delete/edit it if murtada has permission to do 'Delete*'/'put*'

Suppose somone uploaded the Object in a bucket Anonymously with ACL of object = private
Q: then who can read/edot/delete it 
A: No one will be able to read it but owner of bucket can delete or edit it.

VVVIMP: The Object can be uploaded Anonymously but A bucket cnnnot be created Anonymously. Sp ACL may not allow the root user/bucket owner to read the object 
but ACL cannot deny hime from deleting/editing.

Assumption: BP is empty and ACL of bucket os public-read-write
Object Created By Anonymous + No ACL
Owner: 65a011a29cdf8ec533ec3d1ccaae921c
									Read											Edit/Delete									
	Anonymous				Yes												Yes
	IAM							No												Yes
	
Object Created By Anonymous + ACL = Private
Owner: 65a011a29cdf8ec533ec3d1ccaae921c
									Read											Edit/Delete									
	Anonymous				Yes												Yes
	IAM							No												Yes
	
Object Created By Anonymous + ACL = publicRead
Owner: 65a011a29cdf8ec533ec3d1ccaae921c
									Read											Edit/Delete									
	Anonymous				Yes												Yes
	IAM							Yes												Yes
	

Object Created By IAM User + ACL = public 
Owner: h.mufazzal
	Impossible: it will give error.

Object Created By IAM User + ACL = public-read
Owner: h.mufazzal
									Read											Edit/Delete									
	Anonymous				Yes												Yes
	IAM							Yes												Yes
	
Object Created By IAM User + ACL = private
Owner: h.mufazzal
									Read											Edit/Delete									
	Anonymous				No												Yes
	IAM							Yes												Yes	
	
Object Created By IAM User + ACL = bucket-owner-full-control
Owner: h.mufazzal
									Read											Edit/Delete									
	Anonymous				No												Yes
	IAM							Yes												Yes		
--------------

Actions of Object and Buckets-
	Action on Bucket or on 'arn:aws:s3:::muf-aws-tuto-acl-public-rw'
		-	S3:CreateBucket	
		- S3:ListBucket					-> This is for getting all the objects inside the bucket.
		- S3:ListBucketVersion
		- S3:DeleteBucket
		- S3:ListAllMyBuckets   -> This is for getting all the bucket in aws account
		Subresource level for bucket
		- S3:GetBucketTagging
		- S3:PutBucketTagging
		-	S3:GetBucketPolicy
		-	S3:PutBucketPolicy
		- S3:GetBucketCORS
		- S3:PutBucketCORS		
		- S3:GetBucketAcl
		- S3:PutBucketAcl
		-	S3:DeleteBucketPolicy
		- S3:GetBucketWebsite
		- S3:PutBucketWebsite
		- S3:PutBucketWebsite
		- S3:GetBucketVersioning
		- S3:PutBucketVersioning
		
	Action on Objects or on 'arn:aws:s3:::muf-aws-tuto-acl-public-rw/*'
		-	S3:GetObject	
		-	S3:GetObjectVersion	
		-	S3:PutObject	
		-	S3:DeleteObject	
		-	S3:GetObjectAcl	
		-	S3:PutObjectAcl	
	
		API for chnging storage class???????????????
	
---------
Accessing Bucket and object Anonymously:-

	By AWS SDK:-
		No single AWS SDK support the anonymous access. so if you wants to do any anonymous operation on S3 buckets o object then you have to use the REST API directly.
	By CLI:
		Not support for anonymous access here also
  By AWS console:-
		No way. you must first login in console
	By direct Rest API:-
		Yes. This is the only way
	
	What operation you can do on bucket and object anonymously:-
		This is also very limited.
		Bucket:-
			You can get list of object in bucket  API:- see in S3Tuto function 'getObjectListAnonymous'  
			You can Add/Delet obect								API:- see in S3Tuto function 'doAnonymousUpload'  
			You can get the ACL of Bucket.
		Object:-
			You can get the object with metadata
			You can get the ACL of Object.
		
		Can you do below operation anonymously via S3 Rest API
					isVersiningEnabled, getTags, setObjectPolicy, getBukeyPolicy, betBucketEncryption etc
			No! Not at all.
			
		I can access the object anonymously when
			1. bucket ACL:
					Doensnt matter at all. For bucket ACL to be private mns you can get the list of object in tha bucket or add/delete/edit new object.
								For getting object you should have grant from object ACL only
			2. Object ACL:
					Must be have public access enabled. so public or public-read
		  3. BP 
					Must allow Anonymus access. 
		  3. IAMP
					Doesnt matter. For anonymous user IAM policy never comes to picture.
		  4. When BPAF.
					It must be off.
		
	If BPAF is block on the bucket then all the anonymous request will be stop at block 'BPAF' in #S3ACCESSVISUAL	
			
	Who is the owner of bucket object if it is uploaded anonymously. who is its owner?
	DO NOT GO IN THIS DETAIL. We never have a bucket that is public write. its rarest of the rare.
	so forget it.
	
	Just assume that we never upload object anonymously. at best we can just read/download it.

	How BP can allow/deny Anonymous access
	- BP remain empty
	- BP say nothing for like  	Principle: *		OR		Principle: {"AWS": "*"} 	
	- BP say "Allow" nothing for like  	Principle: *		OR		Principle: {"AWS": "*"} on "S3:GetObject" 	
	
--------

BPAF->
	Default BPAF setting if bucket is created via any medium CLI, sdk, CFR is all are off
	Default BPAF setting if bucket is created via any console is all are on

---

Controlling User:-
													BPAF							ACL								IAMP							BP
	Root User								NO								YES								No								??
	IAM User								NO								NO								YES								YES
	AWS Account							NO								YES								??								Yes			
	Anonymous								YES								YES								NO								Yes

---------

S3 and Identity Pool ????????????????/


    






