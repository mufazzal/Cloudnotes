Amazon SNS provide Fan Out mechanics for messages. You can send message to Topics and subscribe topics to process this messages.

There is two main part in SNS
  1. SNS Topic:-
      A topic design to fan out the messages sent to this topic to all of its subscriber. one topic can have many subscriber.
      you can publish messages to the topic. When a message is published, Amazon SNS attempts to deliver the message to the subscribed endpoints
  2. SNS subscription
      A endpoint where the messages will be dilivered. So you first create the topic and add subscriptions to it.
  
Event Source:-
  Many AWS services can Publish the event like S3, AWS Athena, EC2 etc on certain event.
  You can also send event via AWS sdk with 'sns.Publish' API.
Event Subscriber:-
  It could be Application-to-Application:-
    - Lamda
    - SQS
    - Kenesis
    - HTTP/HTTPS
  Or Application-to-Person:-
    - Email
    - SMS
    - Mobile Push Notification
  
-----------------------

Message:-
  It contains below element
    1. Message Body
    2. Message Attribute: up to 10 max 
    3. MessageId: This is generated when message is pushed in queue.
  For FIFO Queue there is additional Param:-
    1. Message deduplication ID
    2. Sequence number
    
 - Max size of message = 256KB 

    Message Attribute:-
      Message attributes are optional and separate from—but are sent together with—the message body. 
      The receiver can use this information to decide how to handle the message without having to process the message body first.
      Each message attribute consists of Name, Type, VAlue. 

    For Message > 256KB
      For large message you can use 'Amazon SQS Extended Client Library for Java' which uses S3 to point the payload of the message 
      and could handle message of up to 2GB. Only JAva sdk work here. it only work though with AWS SDK. not with any ither.
      
----------------------

Message Filtering:-
  By default, an Amazon SNS topic subscriber receives every message published to the topic. To receive a subset of the messages, a subscriber must assign a filter policy to the topic subscription.
  A filter policy is a simple JSON object containing attributes that define which messages the subscriber should receives. 
  When you publish a message to a topic, Amazon SNS compares the message attributes to the attributes in the filter policy for each of the topic's subscriptions. 
  If any of the attributes match, Amazon SNS sends the message to the subscriber. Otherwise, Amazon SNS skips the subscriber without sending the message. 
  - If a subscription doesn't have a filter policy, the subscription receives every message published to its topic.
  - This help you to avoid writing filtering logic at publisher or subscriber end. and also reduce the cost as less message now has to send
  - This is set at Subscription level nor at topic level.
  - filtering logic is applied over Message Attribute not on message body.
  
  Example of FP:-
    Suppose the Topic has attributes in the message Customer's interests, Store name, Event state, Purchase price in USD
    Then you can write policy like
      {
         "store": ["example_corp"],
         "event": [{"anything-but": "order_cancelled"}],
         "customer_interests": [ "rugby", "football", "baseball" ],
         "price_usd": [{"numeric": [">=", 100]}]
      }
    You can write logic to:-
      - Exact matching
      - Prefix matching
      - Anything-but matching
      - prefix with the anything-but operator
      - IP address matching: You can use the cidr operator to check whether an incoming message originates from a specific IP address or subnet
      - Value range matching
      - ANd and OR logic
      
----------------------

SNS FIFO Queue:-
  You can use Amazon SNS FIFO topics and Amazon Simple Queue Service (Amazon SQS) FIFO queues together to provide strict message ordering and message deduplication
  SNS FIFO Topic only support the FIFO SQS queue as subscriber. no other type of subscription(like lambda, SMS, Email) is possible. 
  
  An Amazon SNS FIFO topic delivers messages to subscribed Amazon SQS FIFO queues in the exact order that the messages are published to the topic. 
  and then in SQS FIFO queue, the queues' consumers receive the messages in the exact order that the messages are sent to the queue
  
  - When you publish messages to an Amazon SNS FIFO topic, you set the message group ID. al the message of same group id are arranged in order.
    
----------------------

Message Delivery Status:-
  Amazon SNS provides support to log the delivery status of notification messages sent to topics with the following Amazon SNS endpoints:
  > HTTP
  > Kinesis Data Firehose
  > Lambda
  > Push Notification
  > SQS

  - log entries are sent to CloudWatch Logs 
  - You must provide the proper Role for cretaing CW group.
  
------------------

Delivery Failure HAndling:-
  AWS provide pe-configured delivery policy for each Endpoint type except HTTP/S. This cannot be override or changed.
  AWS do certain retries if delivery failed.
  Number of retry and gap between the retried depends on Endpoint type.
    For AWS managed EP like LAmbda, Kenesis, SQS retry behavour is
      Immediate retry:      3
      Pre-backoff phase:    2 time, 1 sec apart
      Backoff phase:        10 time with exponential backoff, from 1 second to 20 seconds
      Post-backoff phase:   100,000 times, 20 seconds apart	
      TOTAL:                100,015 times, over 23 days
  
    For Customer managed EP like EMAIL, SMS, Push notification retry behavour is
      Immediate retry:      0
      Pre-backoff phase:    2 time, 10 sec apart
      Backoff phase:        10 time with exponential backoff, from 10 second to 600 seconds
      Post-backoff phase:   38 times, 600 seconds apart	
      TOTAL:                50 times, over 6 hour
  
  For HTTP/S you can customize this policy for othr you cannot.
  
  When the delivery policy is exhausted, Amazon SNS stops retrying the delivery and then 
    - either discards the message 
    - or send message to dead-letter queue if it is attached to the subscription

  Dead Letter Queue:-
    DLQ is attached to the Subscription not the Topic.
    A dead-letter queue is an Amazon SQS queue that an Amazon SNS subscription can target for messages that can't be delivered to subscribers successfully
    - Amazon SNS subscription and Amazon SQS queue must be under the same AWS account and Region
    - For a FIFO topic, use an Amazon SQS FIFO queue as a dead-letter queue for the Amazon SNS subscrption.
    
 ------------
 
  
  
  
  
  
  
  



  
  
