Amazon SNS provide Fan Out mechanics for messages. You can send message to Topics and subscribe topics to process this messages.

There is two main part in SNS
  1. SNS Topic:-
      A topic design to fan out the messages sent to this topic to all of its subscriber. one topic can have many subscriber.
      you can publish messages to the topic. When a message is published, Amazon SNS attempts to deliver the message to the subscribed endpoints
  2. SNS subscription
      A endpoint where the messages will be dilivered. So you first create the topic and add subscriptions to it.
  
Event Source:-
  Many AWS services can Publish the event like S3, AWS Athena, EC2 etc on certain event.
  You can also send event via AWS sdk with 'sns.Publish' API.
Event Subscriber:-
  It could be Application-to-Application:-
    - Lamda
    - SQS
    - Kenesis
    - HTTP/HTTPS
  Or Application-to-Person:-
    - Email
    - SMS
    - Mobile Push Notification
  
-----------------------

Message:-
  It contains below element
    1. Message Body
    2. Message Attribute: up to 10 max 
    3. MessageId: This is generated when message is pushed in queue.
  For FIFO Queue there is additional Param:-
    1. Message deduplication ID
    2. Sequence number
    
 - Max size of message = 256KB 

    Message Attribute:-
      Message attributes are optional and separate from—but are sent together with—the message body. 
      The receiver can use this information to decide how to handle the message without having to process the message body first.
      Each message attribute consists of Name, Type, VAlue. 

    For Message > 256KB
      For large message you can use 'Amazon SQS Extended Client Library for Java' which uses S3 to point the payload of the message 
      and could handle message of up to 2GB. Only JAva sdk work here. it only work though with AWS SDK. not with any ither.
      
----------------------

Message Filtering:-
  By default, an Amazon SNS topic subscriber receives every message published to the topic. To receive a subset of the messages, a subscriber must assign a filter policy to the topic subscription.
  A filter policy is a simple JSON object containing attributes that define which messages the subscriber should receives. 
  When you publish a message to a topic, Amazon SNS compares the message attributes to the attributes in the filter policy for each of the topic's subscriptions. 
  If any of the attributes match, Amazon SNS sends the message to the subscriber. Otherwise, Amazon SNS skips the subscriber without sending the message. 
  - If a subscription doesn't have a filter policy, the subscription receives every message published to its topic.
  - This help you to avoid writing filtering logic at publisher or subscriber end. and also reduce the cost as less message now has to send
  - This is set at Subscription level nor at topic level.
  - filtering logic is applied over Message Attribute not on message body.
  
  Example of FP:-
    Suppose the Topic has attributes in the message Customer's interests, Store name, Event state, Purchase price in USD
    Then you can write policy like
      {
         "store": ["example_corp"],
         "event": [{"anything-but": "order_cancelled"}],
         "customer_interests": [ "rugby", "football", "baseball" ],
         "price_usd": [{"numeric": [">=", 100]}]
      }
    You can write logic to:-
      - Exact matching
      - Prefix matching
      - Anything-but matching
      - prefix with the anything-but operator
      - IP address matching: You can use the cidr operator to check whether an incoming message originates from a specific IP address or subnet
      - Value range matching
      - ANd and OR logic
      
  


  
  
  
