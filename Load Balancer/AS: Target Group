target group is used to route requests to one or more registered targets. 
When you create each listener rule, you specify a target group and conditions. When a rule condition is met, traffic is forwarded to the corresponding target group

You define below things in the TG:-
  1. Routing configuration:-
      You specify the Port and Protocol at the tile of creation the TG. 
      load balancer routes requests to its targets using this protocol and port number.
      Port and Protocol are useless if target type is 'Lambda'.
  2. Target Type:-
      This define what kind of target this Target group can registed. In any TG there is only single type of Target Type can be registered.
      it could be
      - EC2
      - IP [Private only, not Public]
      - Lambda [Does Not work with NLB ]
  3. Routing Algorithm:-
      This define how the Target will be selected for traffic. Ir coud be 'round_robin' or 'least_outstanding_requests'. The default is round_robin.
      You can control it by 'load_balancing.algorithm.type'.
       - Least outstanding requests is good when the requests for your application vary in complexity or your targets vary in processing capability. 
       - Round robin is a good choice when the requests and targets are similar, or if you need to distribute requests equally among targets
      If you enable sticky sessions, the routing algorithm of the target group is overridden after the initial target selection
  4. Slow Start:-
      When you registed the target with TG and it passes it Health Check, the Target(of any type) will start reciving the traffic. But if you enable the slow start
      then it will give the Target some time to warm itself up after passing out from Health Check.
      This is control by 'slow_start.duration_seconds'
  5. Deregistration delay:-
      When you deregister the target, it may be possible that there some unhoured request pending in its queue. you can set some valyue of 'Deregistration delay' so that
      when you deregister it, it will wait for somtime before the target is reregistering from TG.
      By default it is 300 sec. but you can change it via 'deregistration_delay.timeout_seconds'
      
--------------      
  
  Overriding Port and Protocol for Target:-
    You can overried the Port and Protocol of TG for specific Target. So other targets in the TG will receive the traffic at TGPort:TGProtocol 
    but this one will receive at overrided one. 
---------------
  Health Check for TG:-
    Your Load Balancer periodically sends requests to its registered targets to test their status. These tests are called health checks.
    
    - Each load balancer node checks the health of each target, using the health check settings for the target groups with which the target is registered.
    - After your target is registered, it must pass one health check to be considered healthy
    
    Health check settings:-
      The load balancer sends a health check request to each registered target every 'HealthCheckIntervalSeconds' seconds, 
      using the specified 'TG.HealthCheckPort', 'TG.HealthCheckPort', at path 'TG.HealthCheckPath'
      for maximum waiting time of 'TG.HealthCheckTimeoutSeconds'
      in each 'TG.HealthCheckIntervalSeconds'
      If the health checks exceed 'TG.UnhealthyThresholdCount' consecutive failures, the load balancer takes the target out of service. 
      But LB do not just deregister it instead it keep sending signal and 
      When the health checks exceed 'TG.HealthyThresholdCount' consecutive successes, the load balancer puts the target back in service.
    
    
---------------
  Target Status:-
    There are the possible stage of a target
     1. Initial: The Target registering or its initial Health Check is in progress.
     2. Healthy: All ok and traffic is hadled by this target.
     3. Unhealthy: The target did not respond to a health check or failed the health check
     4. draining: The Target registering. and connections are draining from this target.
     5. Unused:
          The target is not registered with a target group either
          - the target is in an Availability Zone that is not enabled, 
          - or the target is in the stopped or terminated state.  

     Unused instance VS Unheathy Instance:-
       This are two diffrent thing. Unused means instance no longer in the TG itself. but Unhealthy means that instance is not in healthy state but still part of TG. 
--------------------------

Sticky Session:-
  This work only for ALB and CLB not for NLB.
  you can use the sticky session feature to enable the LB to bind a user's session to a specific target. 
  This ensures that all requests from the user during the session are sent to the same target.
  Sticky sessions are enabled at the target group level.
  Mshanics:-  
    The first request of the user is redirected to target based on the Routing Algorithm.
    The target then set some cookies for sesion.
    Now next request from that session will deliver to target who handle the first request. irrespective of Routing Algorithm.
  To determining how long your load balancer should consistently route the user's request to the same target you can use two approch
    1. duration-based stickiness:-
        The load balancer route the request with same cookie to same target(The one who handled the first request) for specified time.
        For this AS use the Cookie name 'AWSALB' and set its value himself.
        Use 'stickiness.enabled' and 'stickiness.lb_cookie.duration_seconds' attributes for this.
    2. application-based stickiness:-
        This give you better control. The target has to set the Cookie value on the first request. Next request with same value of that cookie will be deliver to same target.
        Though LB also set the cookie name 'AWSALBAPP' for is use.
        Use below param for this
          stickiness.enabled
          stickiness.type
          stickiness.app_cookie.cookie_name
          stickiness.app_cookie.duration_seconds
    
---------------
  Target as IP:-
    If you target is IP then you can
    - use any private IP in CIDR of VPC
    - Private IP of instance or RDS
    - Private IP of any Peered VPC
    - Onprmise resource connected with Direct-connet or Site-to-site VPN 
    - not use Public routable IP
---------------

Target as LAmbda:-
    It is also possible that to have a Target group whise traget are lambda. LB will invoke tha lambda on that requests.
    Elastic Load Balancing must have permissions to invoke the Lambda function.
---------------------




Single EC2 can lies in multiple TG.
