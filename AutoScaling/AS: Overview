Amazon EC2 Auto Scaling helps you ensure that you have the correct number of Amazon EC2 instances available to handle the load for your application
It has 3 main component
  1. Auto scalling Group:-
      Define MAx, Min and desired capacity.
  2. Launch Template(LT) or Launch Configuration(LC):-
      Define how a indivisual instance look. also what will be the purchase model.
  3. Scalling Policy:-
      Define scalling based on event
  
Benefits:
  Better fault tolerance: 
      Replace unhealthy instances with new one.
  Availibility:    
    Span to multiple AZ for better availibility
    
    
Scaling Event:-  
  Scalling Out: ASG will LAUNCH new instances if
    - You manually increase the size of the group
    - Scalling policy can cause it to maintain its poolicy value
    - Scalling Schedule can cause it.
    
    The isntance launch based on LC/LT. 
    New Instance first remain in 'Pending' state. 
      Here also the LAUNCHING lifcycle Hook ran. and state change to 'Pending:Wait'
      Then it pass through ELB/EC2 Healthcheck
    Then instance passed into 'InService' state.

  Scalling In: ASG will TERMINATE the running instances if
    - You manually decrease the size of the group
    - Scalling policy can cause it to maintain its poolicy value
    - Scalling Schedule can cause it.
    
    ASG use its 'Termination Policy' to find out which instance should be terminate first.
    Those instance goes in 'Terminating' state.
      Those instance are now detached and shutting down
      Here also the TERMINATING lifcycle Hook ran. and state change to 'Terminating:Wait
      
  
StandBy Instance:-
  You can temporarily place the instance in 'InService' to 'StandBy'.
  This enable you to perform some maintainance operation on EC2. but kept that EC2 in the ASG as well.
  ASG make sure that LB do not send traffic to this instance and instead distribute to other.
  but ASG wont launch any new instance
  Once you mainatainance dome Exit the standby.
  At a time of putting the instance to StandBy you can allow to decrease the Desire capacity or not
    - If you allow the decrese the capacity the new istance will not be lauch
    - IF you do not allow then a new instacne will be launch to provide you consistent capacity.
  At a time of moving it from Standby to InService the desire capacity wil be increamented by one. due to this
    - If you allowed to decrese the capacity at time of putting it to Standbay then no scal-in will be happen
    - If you do not allowed to decrese the capacity at time of putting it to Standbay then a scal-in will happen.    
  
Limits:-
  Launch configurations per Region: 200
  Auto Scaling groups per Region: 200
  Scaling policies per Auto Scaling group: 50
  SNS topics per Auto Scaling group: 10

-----------

Diffret Time priodes:-
  1. ASG.HealthCheckGracePriode:-
      - For Scale out only
      - For all Scalling Policy
      - Grace Time given to instance for    starting the App + comes behing LB + capable to handle the traffic   before doing the first Health Check
      - This time start after  EC2 started and Hooks are ran and instance comes to 'InSevice' state. 
  2. ASG.<Hook>.heartBeatTimeOut:-
      - For Scale out only
      - For all Scalling Policy
      - Time given for Hook to ran      
  3. ASG.<SimplaeScallingPolicy>.CoolDownPriode:-
      - For Scale out and in both
      - For Simple Scalling Policy and Manual scalling.
      - A time given to last scalling activity to take effect, before that all the scalling trigger will be subdued.
      - This time start after instacne comes into the service and Healthcheck has passed
  4. ASG.<Step_or_TargetTracking_ScallingPolicy>.WarmUpTime:-
      - For Scale out only
      - For Step and TargetTracking Scalling Policy only
      - A time given in which, the LB will distribute the traffic to newly up instance. till that time all the scalling trigger will be subdued.
      - This time start after instacne comes into the service and Healthcheck has passed

-----------------

ASG scaling processes:-
  The ASG in backgroud run mane processes. This process ran for doing the specific Job. 
  Most of their name tells you what they do
  There are two primary process
    1. Launch
    2. Terminate
  There are below secondry proces
    1. AddToLoadBalancer
    2. HealthCheck
    3. InstanceRefresh
    4. ReplaceUnhealthy
    5. ScheduledActions
    
 Suspendin/Resuming Process:  
  go to 
    AWS > EC2 > ASG > 'tour group' > Action > Edit
    See 'Suspended Processes' and select the proess to be suspended.
    Or remove process form the 'Suspended Processes' to resume it.
    
  
  Terminate: The ASG will not terminate the instances for scale-in by any event like Manual, Scalling Policy or Schedule scalling.
  Launch: The ASG will not launch the instances for scale-out by any event like Manual, Scalling Policy or Schedule scalling.
  AddToLoadBalancer: Instances will be launched but not added to LB. Resuming again will also not add the instances launched during the paused phase. but will add the new one.
  AlarmNotification: ASG will not scale-in or scale-out for any Scalling Policy event. Resuming again will immediatly start hadling the breached alarms.
  ScheduledActions: ASG will not scale-in or scale-out for any Schedule Policy event. Resuming again will immediatly start hadling the scheduled [if it is still in time frame].
  HealthCheck: ASG will stop doing healthe from ELB or EC2. REsuming it will first terminate the instances that were marked unhealthy
  ReplaceUnhealthy: ASG will do the health check but will not terminate them with new one

 - Each process type can be suspended and resumed independently
 - Keep in mind that suspending individual processes might interfere with other processes
 - Suspending Terminate and Launch will also impact the AZRebalance, ReplaceUnhealthy, InstanceRefresh 
 - When you create the ASG it immediatly start creating the EC2's to reach for the minimum capacity.
    So it may be not a optimal. you may wants to create ASG but not wants to run the EC2 just now for this just suspend the Launch Process.

----------

AS Instance Lifecycle - LB target status - timeouts:-
  1. Pending: 
      The instance is starting.
      --> LB.TG.Instance-target-status set to 'Initilize' here 
  2. Pending:Wait :-
      Instance is running the Lifecycle Hook. The time given to run this hook is set by 'ASG.<Hook>.heartBeatTimeOut'.
      ==> ASG.<Hook>.heartBeatTimeOut start here.
      If hook ran succesfully then instance goes to next state. otherwise it will goes in state 'Terminating';
      --> LB.TG.Instance-target-status remain 'Initilize' here 
  2. Pending:Proceed :-
      --> LB.TG.Instance-target-status remain 'Initilize' here 
  3. In-Service:-
      At this point the isntace is ready for Health check.
      Still you can give instance some time to cofigure itsself up for healthcheck by 'ASG.HealthCheckGracePriode'
      ==> ASG.HealthCheckGracePriode Start here.
      After this time the First health check begin
      if it fail then 
        --> LB.TG.Instance-target-status set to 'Unhealthy'. And now ASG will start purging this instance. 
      if it passed then 
        --> LB.TG.Instance-target-status set to 'Healthy'. And now instance will start receiving the main traffic 
        Here now depending on scalling type below time can start
        For step and Target scalling: 
          ==> WarmUpTime will start here. 
        For Simple Scalling and Manual scalling:-
          ==> CoolDownPriode will start here
  4. Stand By:-
      You can place the instance in it by yourself.
      
      [At in in-service state the somehow due to scale out the instance is scheduled to terminate then
        --> LB.TG.Instance-target-status set to 'draining']
      
  5. Terminating:-
       This can happen due to Failed Health check, Scal-in or manual terminationn.
       ==> CoolDownPriode will start here
       --> LB.TG.Instance-target-status set to 'draining'
  6. Terminating:Wait    
       ==> ASG.<Hook>.heartBeatTimeOut start here.
       --> LB.TG.Instance-target-status remaining 'draining'
  7. Terminated
       --> LB.TG.Instance-target-status remaining 'unused'
        
      
      
  
  
  
  


    
