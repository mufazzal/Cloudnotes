You Can use CodeBuild for building the Docker file and uploading it to ECR.
For this:-
  Along with your source code create the file 'buildspec.yaml'
      env: 
        variables: 
          key: "value" 
          key: "value" 
      phases:
        pre_build:
          commands:
            - echo Logging in to Amazon ECR...
            - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            - REPOSITORY_URI=012345678910.dkr.ecr.us-east-1.amazonaws.com/hello-world
            - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
            - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
        build:
          commands:
            - echo Build started on `date`
            - echo Building the Docker image...
            - docker build -t $REPOSITORY_URI:latest .
            - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
        post_build:
          commands:
            - echo Build completed on `date`
            - echo Pushing the Docker images...
            - docker push $REPOSITORY_URI:latest
            - docker push $REPOSITORY_URI:$IMAGE_TAG

      #artifacts: 
          # - location 

Below is the IMP parts:-
  pre_build: To log in to an Amazon ECR registry. The runner must has permission of ECR:GetAuthorizationToken .
  Build: Use it for building the docker image and tag it finally with 'latest' and customize tag [you can change the formate]
  post_build: Use it for pushing both the bocker build[wuth latest and custom tag] to ECR repository.
  
Now simply create the CodeBuildProject. and set al the proper value and source code location which has 'buildspec.yaml' at its root
- You can also override commands in buildspec file, when you creating the CodeBuild project
- You can also override the env var here.
- Also nothe that CodeBuild use the service role that must has permission 'ECR:GetAuthorizationToken'
Now simply run the build and once done you will see the new docker build is pushed in your ECR repo.. 
