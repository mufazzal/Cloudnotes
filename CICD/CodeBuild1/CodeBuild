Overriding Build Command:-
  You can override the commads in 'buildspec.yaml' at a time of creating the project in CodeBuild.
  that also can be overriden by providing the command at a time of running build via console or CLI via 'BuildSpecOverride' flag.
  
CodeBuild and VPC Access:-
  Some time as a part of build process you may need to access the resources living in the VPC. 
  For this you have to set up some additional configuration at CodeBuild project. that is
  - Slect VPAc
  - Select Subnets
  - Select SG.
  Once set up it create the ENI for that CodeBuild Project in the VPC. Now you can access the below resurce in build process
  - EC2
  - ECS
  - RDS
  - Elascticache etc.
  You can use those resource in step like Test, Downloading hosted dependency, DB query etc. 


Caching Dependency:-
  When you run a build, the system first download all the external dependeny mentioned in 'package.json' or 'requirment.txt' 
  This takes lot of time and also cost you data transfer chrges.
  As you know the external dependency remain same most of the time so downloading them exerytime is not a good option.
  for thisyou can have option of 'Caching Dependency'
  here yoou select the S3 bucket in codebuild and the CB will use this bucket to cache the dependency and reuse then across the builds.
  you can then clear the cache or have lifecycle policy to clear it priodically.
  You can also use the 'InvalidateProjectCache' api to clea t for next build and keep it till currect build finish.
  
Permission Model:
  In CodeCommit, the CodeCommit:GitPull IAM policy permissions apply to any Git client command where data is retrieved from CodeCommit, including git fetch, git clone, and so on. 
  Similarly, the CodeCommit:GitPush IAM policy permissions apply to any Git client command where data is sent to CodeCommit. 
  Take note that CodeCommit:GitPull and CodeCommit:GitPush are IAM policy permissions and not API actions.


Source Location for CodeBuild:-
  It could be Git, Githug, BitBucket, CodeCommit Or S3.
  You an select the specific Branch (by default master) as source for build

Trigger Build Via Source Changes:-
  You can set up to trigger the build automatically if below of the one operation happen on the source code repsitory
  1. PUSH
  2. PULL_REQUESR_CREATED
  3. PULL_REQUEST_MERGED
  Further you can filter those trigger events based on 
  - Files changes in the commit
  - Person who changes it
  - The Branch
  - Commit Message
  
  So you can set like, Trigger build if code is PUSHED by the mufazzal in file myf.ts with commit message 'runbuild'
  It is very useful to run the build befire and after the Pull Request merging so that you can know the delta if it failed.
  
Enviorment:-
  The codebuild basically run in the containers and so you need to set the OS with proper Docker Image
  You can select the AWS managed docker image and OS for the CodeBuild or can have custom.
  AWS managed OS + Docker image
    1. Amazon Linux + respective Docker image
    1. Ubuntu + respective Docker image
    1. Windowa + respective Docker image
  You can have the custom image for build enviorment if you need diffrent softwares installed and configured in env.
  For this you have to provide the docker image url of ECR or any diffrent repository    

Timeout:-
  A Codebuild can have 5 mnt to 8 hour timeout. default is 1 hour. Though it will keep the resource only till build ran. 
  but release it if build failed to finish in specified timeout.
  
Compute:-
  You must set the value of requred RAM and vCPU for build process.
  
Networking:-
  You can select the VPC [with sunet and SG] if you wants to access the VPC private resources in the build process.
  like accessing EC2 or RDS for testing in build test phase.
  
  
Envirment Variable:-
  You can set the EV in the build project or in buildspec file or set it when start a build
  for build project:-
    set it at a time of creation of project via console or CFR
  setting in buildspec:-
      env:
        variables:
          App1EnvVar1: "value of App1EnvVar1"
        parameter-store:
          App1ParamStore1: /app1/dev/app1ParamStore1
          App1ParamStoreSecret1: /app1/dev/app1ParamStoreSecret1
        secrets-manager:
          App1Secret1: "App1Secrets:App1SecretKey1"
          App1Secret2: "App1Secrets:App1SecretKey2"    

  setting in Cloudformation CodeBuild resource:-
    Type: AWS::CodeBuild::Project
    Properties:
      EnvironmentVariables:
       - Name: <name of var>
         Type: PARAMETER_STORE | PLAINTEXT | SECRETS_MANAGER
         Value: <value goes here>    

  - You must give codebuild proper IAM riole to access the SSM or Secret manager.
  - In build phase you will get this variable in 'process.env.<key>'
  
--

Monitoring and Logging:-
  - You can send the CodeBuild logs to a specific Cloudwatch Log group or S3 bucket. You should also set auto delete on tose log buckets or logs stream. 
  - You have bwlow CW metrics for a code build for dimention Account and Project
    > Successful Build, Fail Build, Toatal Build, Build Duration.
    You can use those to handle scenario such as too many fail, or too long for build etc.
  - You can use the EventBridge to handle the specifc state change in codebuild
  
Scheduled Builds:-
  With the help of Cloudwatch Event[EventBridge] you can set the Corn job. and then can have the target as the codebuilb project.
  The EventBridge will trigger the build based on the rule of cron job.

    
  
  
  


