
Here you have to provide 
  The Source: The location of 'Artifact' on S3 or github or other
    Inside the artifat lies
      1. The new Code
      2. Appspec.yml file.
      3. Scripts that you wants to run at events of deployment life cycle
  The Destination: Wher you wants to deploy, 
    1. EC2/On-Premise
        - On EC2s of specific tags
        - On a Autoscalling group of EC2
        - On premise instances.
    2. Lambda
      ???????????????
    3. ECS
    
      
      
 VVIMP: Code deploy automate the steps of deploment in the EC2/LEmbda But it not at all automate the deployment if a new artifact 
        come in the source location. For this you have to use the CodePipeline.
      
      
      
Some component of CodeDeploy ->

  #INSTCODEAG
    
  AppSpec File:- 
          
     
     Calling mechanism fo BG :-
      For BG deplloyment there is a patch. that is 
      in the In-Place the app is installed in same EC2 and so EC2 remain there and hooks are called over those EC2.
      But in BG its bit tricky
      new EC2 are created from ASG, those are attached to LB and the older EC2 are dettached fron LB.
      So its obvious that hooks of the lifecycle will be called over the respective EC2 only
      for EG:
        The older instaces will be deattached but app wont be installed on older and it also not be re-attached to LB
        so on the older instaces only this hook will be called
                BeforeBlockTraffic
                AfterBlockTraffic
        The newer one not be attached to LB initialy but app will be installed on newer one and it also re-attached to LB 
        so on the newer instaces only this hook will be called
          ApplicationStop
                BeforeInstall
                AfetrInstall
                ApplicationStart
                validateService
                BeforeAllowTraffic
                AfterAllowTraffic
      
    




---------------------

Role of EC2-Tag, ASG, LB:-
  In th Codedeploy The EC2-Tag and ASG help the agent to finding out which EC2 he need to work upon. 
  The devops engineer do have to provice at least one of this information in step 6.5
  This has nothing to do with LB.
  Devops engineer have option either to specify the LB in step 6.7. 
  If he specify-
    For In-Place and BG both:-
       Then as discussed the deattach and attach of LB and EC2 take place on deployment Lifecycle
  If he do not:-
    For In-Place:-
        THen all the time of deployment the LB keep sending the traffic to EC2.
    For BG:-
        For BG it is must. BG is impposible without LB. you have to specify the LB if you are doiing BG deploynet.


   Auto Scalling Group, Load-Balancer-Target-Group and BG deployment:-
    Do not confuse.
    The CodeDeploy first go to ASG to find which are the candidate instances. All the instances in that invoked by this ASG are candidate.
    Now codedeploy go to LB(you provided in step ??) and get the Load-Balancer-Target-Group of that LB
    Now from Load-Balancer-Target-Group he determine which instances are subordinate of LB.
      In general both the list of EC2 one from ASG and one of those subordinate to LB are same.
      lets assume its same.
    Now Codedeploy will create a copy of ASG as ASG_2 with 100% same configuration
    Now launch instances in new ASG
    Now add the new instances to Load-Balancer-Target-Group and so newly craeted instances also subordinated to LB
    later suspend the ASG (the older one not the copied)
    then remove the old instances from Load-Balancer-Target-Group and so only newly craeted instances remain subordinated to LB

--------------------------
Appspec file structure:-

                      version: 0.0
                      os: linux
                      files:
                        - source: /DepTest/
                          destination: /MufProject/DepTest
                        - source: /Resources/
                          destination: /MufProject/Resources
                      hooks:
                        BeforeBlockTraffic:
                          - location: scripts/beforeBlockTraffic.sh
                            timeout: 300
                            runas: root
                        AfterBlockTraffic:    
                          - location: scripts/afterBlockTraffic.sh
                            timeout: 300
                            runas: root  
                        ApplicationStop:
                          - location: scripts/stop.sh
                            timeout: 300
                            runas: root      
                        BeforeInstall:
                          - location: scripts/beforeInstall.sh
                            timeout: 300
                            runas: root
                        AfterInstall:
                          - location: scripts/afterInstall.sh
                            timeout: 300
                            runas: root      
                        ApplicationStart:  
                          - location: scripts/start.sh
                            timeout: 300
                            runas: root      
                        ValidateService:
                          - location: scripts/validateService.sh
                            timeout: 300
                            runas: root      
                        BeforeAllowTraffic:
                          - location: scripts/beforeAllowTraffic.sh
                            timeout: 300
                            runas: root    
                        AfterAllowTraffic:
                          - location: scripts/afterAllowTraffic.sh
                            timeout: 300
                            runas: root

-------------------------


    Hook Script File:-
      The script in hook file do couple of operation at time that hook run. This is how it shoul look like generall
      laets say you want to run somthing at BeforeInstall then
      in appspec.yml
        BeforeInstall: 
          - scripts/BeforeInstall.sh
          
      in scripts/BeforeInstall.sh
            #!/bin/bash
            echo "I am in BeforeInstall"
      
      This first line in this file will be the Shebang,  which tells the systen in which enviorment this file should ran.
      for Bourne shell envirment       #!/bin/sh
      for Bash envirment               #!/bin/bash
      for python envirment             !/usr/bin/env python
      for node envirment               !/usr/bin/env node
      
------------------
 
CodeDEploy and design hook for Node App
  1. in BeforeInstall hook install the nodejs via 
                          #!/bin/bash
                          echo "I am in BeforeInstall" >> 'home/ec2-user/mmmll.txt'
                          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
                          . ~/.nvm/nvm.sh
                          nvm install node
                          echo "	Node Version installed: $(node -v)" >> 'home/ec2-user/mmmll.txt'  
  2. in ApplicationStart Hook give
                          node /MufProject/DepTest/src/main.js
                          echo "	Your App is running at: $(sudo ss -tulpn | grep :3000)" >> 'home/ec2-user/mmmll.txt'  
         [Though command in ApplicationStart not working fine fioe now. why ??????????????????]                 
                          
------------------
Deployment Bundle:-
    This is the zip file whose strucure shouls look like this [but not neccessary]
    MuBundle.zip
      |--- AppSpec.yml    MUST
      |----Config         NAme could change, this is the folder of config files
      |----Scripts        NAme could change, this is the folder of scripts
      |----Source         NAme could change, this is the folder of source code.
    This look of zip is very primitive it can have some more files in it.  
      
      
  IAM Roles:-
    - You must create one Role for 'CodeDEploy' with policy ??????? attached. This role will grant the CodeDeploy to perform operation such as
        start EC2, terminate EC2, attache EC2 for LB, dettache it etc.
    - IF your code is on S3 then you must give EC2 the access of S3. So you should have a role with S3FullAccess policy attached to EC2
  So depending on this you should create two Role one for EC2(if you are usin S3) and one for CodeDeploy(Must)  
    
  

            
  
  

    
  Deployment Group:-
    Think of Dep Group as reusable deployment comfiguratiuion template which contain lot of config detail like, dep type, enviorment, 
    sucsses stratagy, LB detail, EC2 groups or tag, ASG etc.
    Once you created dep group with all this infor you can then for deployment you give two things
    1. The grouo that you wants to use
    2. The deployment bundle location 
  
  #CDCREATION
  Steps:-
    1. Create 2 IAM role one for Ec2 and one For CodeDeploy
    2. Launce the EC2's and
      - provide them the tag 'MufCodeDEployTag' so codedeploy later can idetify it for deployment
      - provide hime the role for EC2 created in step 1 [if you are using S3 for deploymeny ]
      - Install codedeploy agent on those EC2 as described in section #INSTCODEAG
          To do this Quickly you can provide this script in 'start script' at a time of launch configuration.
    3. Now create a S3 bucket where in you will upload your code and later codedeploy get it from here for EC2.
         - Do remember to enable the versioning in this bucket
    4. Now this is time to create a zip package of you deployment unble. create a Deploymet Bulble with must have 'appspec.yml' file
       with sourcvve code, scripts and resources etc. then upload thisZip in S3 bucket
       You can use below command to upload it or can do it via aws console.
        ???????????????    
    - Now at this point you have your deployment package ready in S3, our destination EC2 is running, everyone have all necessary roles,
      From here we will see the steps we need to take for deployment of it.      
      
    5. Create CodeDeploy Application
      go to   AWS > CodeDEploy > Deploy > Application > Create Application
          - Name of Application [say MufCodeDeploy]
          - Platform [EC2 in our case]          
     
    6. Create Deployment Group:
        6.1  AWS > CodeDEploy > Deploy > Application > MufCodeDeploy > Deployment Group > Create 
        6.2  choose name [say MufCodeDeployGroup]
        6.3  choose the service role we created in step 1 for CodeDeploy so that it can perform crtain task.
        6.4  Select Deployment Type
            - If you are deploying for the firset time then you shoulg choose the in-place deployment otherwise b\g
        6.5 Set Environment configuration:   
            Here you nned to specify that how CodeDeplot will idetify the EC2 for Deployment, this depend on hwhat deployment type you have choosen
                  
                
        6.7 LB:
          IF the EC2 are attached to any LB then select them, so that codedeploy can attach/dettach it while in deployment.
 
     7. Now finally Create deployment
        7.1  AWS > CodeDEploy > Deploy > Application > MufCodeDeploy > Create Deployment
        7.2  Select the deployment group created in step 6
        7.3  select thee source from S3 bucket and choose the bundle you uploaded to s3 
        Now you can see thst deployment is started and in aws cosole you can see its process.
     Done        
    So here the process is finished.
    
    SO notice here that 
    - The deployment group created in step 6 is reusable. if you created once then you can resue it again for next version of deployment
    - Step 7 is one time activity. you create a deployment and run it once for next release you have to re-create one more deployment.
    
    
    In the DodeDeploy you actully create a the app;ication and inside this application you can create diffrent deployment group
    later for actul deployment you can use those groups.
    
    Application
      |-------------- App1 [Info: Lembda]
                        |---------Deployment group1  [info: Blue/green, LB1, MyEc2Tag, AllAtOnce etc]
                        |---------Deployment group2  [info: In-place, LB2, MyEc5Tag, AllAtOnce etc]
                        |---------Deployment group3   ; ;     ;;  ; ; ;
      |-------------- App2 [Info: EC2]
                        |---------Deployment group11  [info: Blue/green, LB1, MyEc2Tag, AllAtOnce etc]
                        |---------Deployment group21  [info: In-place, LB2, MyEc5Tag, AllAtOnce etc]
                        |---------Deployment group31   ; ;     ;;  ; ; ;
    
    
    
    
   ----------------
   Log fie location of CodeDployAgent:-
    var/logs/aws/code-deploy
       
       
----------------------------

Deploy on ECS cluster:-
  For this you have to select the type='ECS' when creating the CodeDeploy Application.
  For deployment Group you need to select below items
  3. Name and Service Role
  
  - ECS only support BG not the In-Place
---------------------------

Deploy on Lambda:-
  Deployment on the LAmbda is bit tricky.
  Here you do not actully push the code of lambda via the codeploy instead you alredy have lambda version deployed and 
  you simply mangae the traffic shifting from old lambda version to new lambda version.
  You can do the this via Codedeploy or via SAM + CodeDeploy
  
  Deplyment of lambda codedeploy only:-
    First you need to create the CodeDeploy Application with type = lambda.
    then create the Deployment group with below detail
    - Group Name
    - Service role
    - Trigger
    - Alarm
    - Rollback Cofig
    All above are same as for EC2 instance platform.
    Deployment configuration:-

    Appspec file:-
    Below is how its look, You have to provide it at a time of deployment. Its not part of deployment Group.
      Resources:
        - myLambdaFunction:
            Type: AWS::Lambda::Function
            Properties:
              Name: "myLambdaFunction"
              Alias: "myLambdaFunctionAlias"
              CurrentVersion: "1"
              TargetVersion: "2"
      Hooks:
        - BeforeAllowTraffic: "LambdaFunctionToValidateBeforeTrafficShift"
        - AfterAllowTraffic: "LambdaFunctionToValidateAfterTrafficShift"    
    
      This will shift the traffic from 1 to 2 in the manner defined in the sected deployment Group.
      hook:-
        This is the lambda that will trigger before and after traffic shifted to new versions
      Alias:
        New version will be mapped to this Alias. if alias not exist then it will be created first.
  
  Deplyment of lambda codedeploy + SAM:-
    CodeBuild + SAM + CodeDeploy for better system.
    In CodeDeploy you set values via SAM template 'DeploymentPreference' in 'AWS::Serverless::Function'
    This are:-
      AutoPublishAlias 
      DeploymentPreference 
      Hooks 
    For detail see #lambda/SAM.txt  
  
----------------

Supported Deployment:-
  EC2.            inplace and BG
  On premise.     inplace
  ECS.            BG
  Lambda.         BG
        
        
-----------------

CodeDeploy and CloudWatch EventBridge:-
  CodeDeploy is heavily integrated with EventBridge, you can create Trigger lambda or anything to handle scenarion like deployment failed or etc.
CodeDeploy Trigger:-
  This also provide the way to trigger some functionality on CodeDEploy state change but here it only support SNS.
  You get the trigger for below state change
    Deployment start/fail/ready/rollback etc.
    intance start/stop etc.
    
Cloudwatch metrics/logs published by CodeDEploy:-
  NONE, CodeDeploy nither generate logs nor metrics in the CW.  
  
---------

Automatic RollBack:-
  In deployment group configuration you can set if you wants to have automatic roll back enabled or not.
  If its not enabled then any fail deployment will be remain as it is and app goes offline. You have to go and manually roll it back.
  You can set diifrent event(multiple) for starting roll back
  1. Any deployment fail:-
      If deployment failed on any stage of any instamce then the rollback will be started on all the instances.
  2. On certain CW alarm:-
      Even if all the deployment succed then you can stil set an CW alalrm. anf if that alarm goes red the deployment will be rollded back.
      This ios useful if say new version of code causing the 90% of CPU usage
  3. Manually Stopping Deployment:-
      If user sop the the deployment manually trhen you can set if you wants roll back or not
  
 Manual Rollback:-
  Simply run a new deployment with previous working version
  


        
        
        
