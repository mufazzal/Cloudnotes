CodeBuild for Docker:-
  You Can use CodeBuild for building the Docker file and uploading it to ECR.
  For this:-
    Along with your source code create the file 'buildspec.yaml'
        #env: 
          #variables: 
             # key: "value" 
             # key: "value" 
        phases: 
          install:
            runtime-versions:
                docker: 18     
            commands: 
              - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
              - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
          pre_build: 
            commands: 
            - $(aws ecr get-login --no-include-email --region eu-central-1) 
          build: 
            commands: 
            - docker build -t mydockerrepo . 
            - docker tag mydockerrepo:latest 757250003982.dkr.ecr.eu-central-1.amazonaws.com/mydockerrepo:latest 
          post_build: 
            commands: 
            - docker push 757250003982.dkr.ecr.eu-central-1.amazonaws.com/mydockerrepo:latest 
        #artifacts: 
            # - location 
  
  Overriding Build Command:-
    You can override the commads in 'buildspec.yaml' at a time of creating the project in CodeBuild.
    that also can be overriden by providing the command at a time of running build via console or CLI via 'BuildSpecOverride' flag.
  
  Below is the IMP parts:-
    pre_build: To log in to an Amazon ECR registry. The runner must has permission of ECR:GetAuthorizationToken .
    Build: Use it for building the docker image and tag it finally
    post_build: Use it for pushing the bocker build to ECR repository.

  Now simply create the CodeBuildProject. and set al the proper value and source code location which has 'buildspec.yaml' at its root
  - You can also override commands in buildspec file, when you creating the CodeBuild project
  - You can also override the env var here.
  - Also nothe that CodeBuild use the service role that must has permission 'ECR:GetAuthorizationToken'
 Now simply run the build and once done you will see the new docker build is pushed in your ECR repo.. 
  
CodeBuild and VPC Access:-
  Some time as a part of build process you may need to access the resources living in the VPC. 
  For this you have to set up some additional configuration at CodeBuild project. that is
  - Slect VPAc
  - Select Subnets
  - Select SG.
  Once set up it create the ENI for that CodeBuild Project in the VPC. Now you can access the below resurce in build process
  - EC2
  - ECS
  - RDS
  - Elascticache etc.
  You can use those resource in step like Test, Downloading hosted dependency, DB query etc. 


Caching Dependency:-
  When you run a build, the system first download all the external dependeny mentioned in 'package.json' or 'requirment.txt' 
  This takes lot of time and also cost you data transfer chrges.
  As you know the external dependency remain same most of the time so downloading them exerytime is not a good option.
  for thisyou can have option of 'Caching Dependency'
  here yoou select the S3 bucket in codebuild and the CB will use this bucket to cache the dependency and reuse then across the builds.
  you can then clear the cache or have lifecycle policy to clear it priodically.
  You can also use the 'InvalidateProjectCache' api to clea t for next build and keep it till currect build finish.
  
Permission Model:
  In CodeCommit, the CodeCommit:GitPull IAM policy permissions apply to any Git client command where data is retrieved from CodeCommit, including git fetch, git clone, and so on. 
  Similarly, the CodeCommit:GitPush IAM policy permissions apply to any Git client command where data is sent to CodeCommit. 
  Take note that CodeCommit:GitPull and CodeCommit:GitPush are IAM policy permissions and not API actions.


Source Location for CodeBuild:-
  It could be Git, Githug, BitBucket, CodeCommit Or S3.
  You an select the specific Branch (by default master) as source for build
  

Enviorment:-
  The codebuild basically run in the containers and so you need to set the OS with proper Docker Image
  You can select the AWS managed docker image and OS for the CodeBuild or can have custom.
  AWS managed OS + Docker image
    1. Amazon Linux + respective Docker image
    1. Ubuntu + respective Docker image
    1. Windowa + respective Docker image
    





