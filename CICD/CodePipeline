The CodePipeline is the tool that bring play the three stages of development in synch.
This stages are
  commit
  build
  deploy
  
  There are many diffrent combination of tool possible for commit and build starge of development. 
  EG you can use 
    git and jenkins  or
    bitbucket and jenkins  or
    git and CodeBuild  or
    SVN and Jenkins etc.   
    
  To abstract them with each other comes a codepipeline
  In CodePipleline it does not matter what set of tool you used its so beatifully designed that it mask each stage with each other.
  
  In the code piple line you make sure that when 
    developer commit the code
    the build process started either by jenkins or CodeBuild [as set by devops]
    once build process finish it make sure the artifact also uploaded to proper source location like S3 or google drive [as set by devops]
    Now when Codedeploy find that new artifact comes to source location
    it start deploying it over proper EC2 or Lembda.
    
    CodePipeline with Git + Jenkins + CodeDEploy
    The flow will be
      
      Developer Commit Code in GIT/SVN/bitBucket
                      |
                      |
      The buld insntrument like Jenkins/CodeBuild detected it and start build process. trun tests etc
      and finally generate the deploument bundle Zip and upload that to proper S3 bucket
                      |
                      |
      CodeDeploy detect the new artifact and start deployment
      
-----
  
S3 and CodePipeline:-
  Behind the scene codepipeline used S3 to move the artifact between diffrent stages. You can have it encrypted by aws or cutomer owned CMK.

CW and CodePipeline:-
  You can create many kind of CW alarm trigger to repond on changes happen in codepipeline state. 
  like a state change forn stage1 to stage2.
  Also Codepipeline createa default CW alarm that work as backbone of pipeline event handling.
-------------
 
Structure:-
      Stages:
        - Name: <st1>
          Actions:
            - <st1_ac1>
            - <st1_ac2>
            - <st1_ac3>
        - Name: <st2>
          Actions:
            - <st2_ac1>
            - <st2_ac2>
            - <st2_ac3>

   You can have as many stages as you wants. They wil run one after another. Each stage will have number of action that can run in parallel or in sequence.
   Stage:-
    Each stage will have basically two config
    1. Name: A name of stage
    2. Actions:-
        All the Action that will happen in this stage. This action will run in parallel or in sequence.
-----------  
  
Actions:-
  Action is part of the sequence in a stage of a pipeline. 
  It is a task performed on the artifact in that stage. Pipeline actions occur in a specified order, in sequence or in parallel, as determined in the configuration of the stage.
 
  Actions[i].ActionTypeId.Category:-
    This define what kind of task it is. 
    There is 6 type of Category we can have
      Source, Build, Test, Deploy, Approval, Invoke
  Actions[i].ActionTypeId.Provider:-
    For each type there is number of provider that an perform the action
    Eg: 
      For Source provider could be Code CodeCommit, S3, ECR or Git etc.
      For Build provider could be CodeBuild, Jenkins etc.
      For Test provider could be  CodeBuild, Jenkins or any third part
      For Deploy provider could be CodeDeploy, S3, ECS, Cloudformation, Beanstalk
      For Approval provider is manual only
      For Invoke provider is Lambda or Step fuction.
  Actions[i].ActionTypeId.Owner:-
    It could be 'AWS', 'ThirdParty', 'Custom'
  To see the valid mapping between diffrent kind of   Provider<-->Owner<--->Category please see
  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html
  
  Actions[i].Name: Name of action
  Actions[i].RunOrder: 
    Actions will run from runorder 1 to infinite order. 
    The order in which actions will run. actions with same runorder will run in parrallel. 
  Actions[i].InputArtifacts: The artifact consumed by this action if any [IMP: not all the Category consume the artifact]
  Actions[i].OutputArtifacts: The artifact produced by this action if any [IMP: not all the Category produced the artifact]
  Actions[i].Configuration: The configuration detail for the selcted 'ActionTypeId' like for s3, the bucket name, for git the git url etc.
      
  Approval Action:-
    Here you can set a required manual intervention for codepipeline to succed. YOu can set a SNS topic and susbscribe the approver to it.
    Once pipeline reach to this point, The approver receive the email with some more detail to review the pipeline, Code, test etc.
    Now the appriver can go to console and approve it so pipeline can move ahead. If he decline then it will fail.
    It does not have any input or output artifact
      
  Invoke Action with Lambda:-
    You can also use a lambda to run as any action. This lambda can do some opearion like. run some test or start a test infra etc.
    Once finished lambda must call either 'codePipeline.putJosSuccess(jobId)' or 'codePipeline.putJosFailure(jobId)' to tell pipeline about success or fail.
    You will get the jobId in event param of lambda
      
      
  Custom Action:-
    You can write the custom action for 
      Build, Test, Deploy, Approval, Invoke
  Action Fail:-
    If a stage completes with one or more failed actions, the stage fails, and the pipeline execution does not transition to the next stage in the pipeline.
    You can retry the failed action without restarting the pipeline from begin.
  Lambda as custom Action:-
    You can use the lambdain te pipeline as custom action too.
      
----

Staring Pipeline Execution:-
  There are three ways to start a pipeline execution in AWS CodePipeline
  1. When a source changes:- S3, CodeCommit, Butbucket, SVN, GIT
  2. Manually
  3. On a schedule:

    
    
    
    
    
    
    
    
