Deployment group:-
  The deployment group contains settings and configurations used during the deployment.
  - It will have common setting of depg used for all compute platform like Roolback, alarm etc.
  
Deployment group > Deployment Type:-
  There are two type for EC2 platform
    1. In-Place:  
        In this kind of deployment the application is installed on existing running instances. 
        they will be brifly taken offline
        then dettached from the LB (if any)
        then upgraded with new version 
        then attached to LB(if any) again
        and then finally started again
        This has couple of risk
          1. It take the instances offline so capacity is reduced
          2. roll back is difficult you have to re-deploy the older version once again
          Actully it is rarle user, it use only for the first time deployment.
    2. Blue Green  
          This pne is most widely user Deployment. This has certain featurewhich make it very reliable and practical to use.
          Why ?
            Because 2 risk of In-Place deployment mentioned above
          What is neccessary for BG?
            The candidate EC2 must be attached to the LB. if not then you cannot do the BG.
          How it work:
            Unlike in In-place wherein the upgraded app is deployed over same EC2. in BG 
            completely new EC2 instances will be Used or Created [depending on 'Environment configuration' user choose] for each candidate instance 
            and then   upgraded app is deployed over the new instances 
            and then   all newly instances will be attached to LB (LB is must for BG)
            and then   for sometime all the instances (old + new) will be subordinated to the LB
            and then   after some time [user can configure this time for sanity] the older one will be dettached from LB
            and then   the older one will be terminated.
            
            So in nutshell you create the new instances and attach it to LB and kill older one.
            
          Advantages:-
            1. Reverting deployment way too easy. just attch the old EC2 with LB
            2. No capacity reduction 
          
          How New Instances are Created or Used:-
            There is two way for the new instance
            1. Use existing one:-
                The developer creat a instances MANUALLY and at the time of deployment he will give info about either its tag or ASG
                This is rarely used because it add the overhead task of creating the EC2 manually.
            2. Let Codedeploy create for you:-
                For this you must have the ASG. without ASG it will not work.
                Here you will give information about the ASG in deployment group. 
                later at the time of deployment the codedeploy agent will create a copy of that ASG with exactly same cofiguration 
                and create new instances in that ASG for you. then use those new instances foe new version and kill the older ones.
                This one is widely used. here you hjust have to set the proper ASG and codedeploy will do the rest.
  
Deployment Group > Environment configuration:
    Here you need to specify that how CodeDeploy will idetify the EC2 for Deployment, this depend on what deployment type you have choosen
    For In-Place:- 
       If you choosed 'In Palce' there is two possible way to identify the candidate EC2
         1. By Tags: 
             You provide the tag (Only key is enough value not required) here so that all the EC2 (aws/on-primises) with this Tag will be deployed with app version
         2. By AutoScalling Group: 
             You must choose the ASG here, All the EC2 running in this ASG will be upgraded with new version.
    For BG:-
       In BG you kill the existing instance of EC2 and create the new ones. So you set how you choose the instances to kill and on how to choose or launch new one
         Manual:- 
           In deploy-group you specify the tag or ASG of existing EC2 instances 
           and before deployment you manually create the new EC2 instances(with tag 'mufNewInc') or new ASG ('mufNewAsg') 
           and finally at a time of deployment you provide the info (TAg(mufNewInc) or ASG(mufNewAsg)) of new instances.
           This is not at all recomendded as it onvolve manula process.
         Auto:-
          In deploy-group you specify the ASG(not tag) of existing EC2 instances. 
          Now at a time of deployment The codedeploy will create a copy of this ASG with 100% same configuration of ASG mentioned above
          create new instances in that new ASG.

Deployment group > Deployment Setting/Configuration:-
  For EC2 it define on how many instances the deployment will happen at a time and when the success and failure will be considered.
  Possible values are:-
    AllAtOnce:  
        For In-Place: 
          The deployment will happen on as many instance as possible at once.
          deployment as success if all the EC2 deployment is successful at least on one instance, Fail otherwise
        For BG: 
          The deployment will happen on as many replacement-instance as possible at once.
          Once finish with deployment traffic routing will happen to all intance together at once.
          Succeeds if traffic is successfully rerouted to at least one instance, Fail otherwise
        The application will be totally offline for certain time.
    HalfAtATime: 
        For In-Place: 
          The deployment will happen on half of instance at once.
          succeeds if the application revision is deployed to at least half of the instances, Fail otherwise.
        For BG:
          The deployment will happen on half of replacement-instance at once.
          Succeeds if rerouting to at least half of the instances succeeds, Fail Otherwise.
    OneAtATime: 
      For In-Place:-
        Deploys the application revision to only one instance at a time.
        succeeds if the application revision is deployed to all of the instances, Fail otherwise [exception if last instance fail then it still consider success]
      For BG:-
        Deploys the application revision to only one replacement-instance at a time.
        Succeeds if traffic is successfully rerouted to all replacement instances. Fails after the very first rerouting failure.
            [exception if last instance fail to register for traffic then it still consider success]
    Custom:-
      You can set the percentage of instance to deploy at a time.
      
  You can also set below setting in Dep Config if Deployment type = BG [not possible in in-place]
    - If you wants to rerout the traffic to newly launched instances immediatly or after some time
    - If you wants to rerout the traffic after some time then set the time also
    - If you wants to terminate the orignal instances or keep it running too.
    - IF you wants to terminate the orignal task then when you wants to terminate them.
  
  
Deployment group > Load Balancer:-
  You can define Tarrget GRoup of load balancer here.
  In-Place:-
    For In-Place deployment this is optinal. If you set it then CodeDeploy will make sure that in deployment instance will not receive any traffic from LB.
  BG:-
    It is must for BG. BG deployment not possible withoyt LB. The new instances will strat recivingtraffic only after their health check are passed.
  

CodeDeploy Agent:- 
  if you wants to deploy the code with codedeply on EC2 you have to install the 'CodeDeploAgent' on EC2 instance.
  THis is one time activity for EC2. once it is installed you will be able to use the CodeDeploy for automation.
  Usually you should install it when you start a EC2 instance. Provide the proper script in the start script of EC2
  Script for installing CodeDeployAgent:-  
      go to https://aws.amazon.com/premiumsupport/knowledge-center/codedeploy-agent-launch-configuration/
      copy script and paste it in user data.
  
EC2 Appspec file:-
  This is the file that must lie at the root of the zip file of you code. This has all the configuration related information for for deployment
  It has 4 parts:-
    Version : always 0.0, will be used in future
    OS: supported OS
    Files: 
      This has info of list of file that should be copid to destination. this is array.
         EG:
            - source: /DepTest/
              destination: /MufProject/DepTest
        This will copy all the content inside the folder 'DepTest/' in the zipped bundle to the '/MufProject/DepTest' of EC2 instance
        
    Hooks: See related file.


-----------------------

Auto Scalling Group, Load-Balancer-Target-Group and BG deployment:-
  Do not confuse.
  The CodeDeploy first go to ASG to find which are the candidate instances. All the instances in that invoked by this ASG are candidate.
  Now codedeploy go to LB(you provided in step ??) and get the Load-Balancer-Target-Group of that LB
  Now from Load-Balancer-Target-Group he determine which instances are subordinate of LB.
    In general both the list of EC2 one from ASG and one of those subordinate to LB are same.
    lets assume its same.
  Now Codedeploy will create a copy of ASG as ASG_2 with 100% same configuration
  Now launch instances in new ASG
  Now add the new instances to Load-Balancer-Target-Group and so newly craeted instances also subordinated to LB
  later suspend the ASG (the older one not the copied)
  then remove the old instances from Load-Balancer-Target-Group and so only newly craeted instances remain subordinated to LB

-----------------------
What happeen in BG deployment if it is for the first time and so no plder instances exist?
  In that case some of the steps like blockTraffic and kill instance will not be called. 
  But new ASG will be created and new instances will be launched in that. So for first time deployment is also fine with BG                  
