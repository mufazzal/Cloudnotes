In CFT you have 3 option of Secrity

  1. Encryption in Transit
    - For this simply make CacheBehaviour[*].ViwerProtocolPolicy and Origin[*].OriginProtocolPolicy as HTTPS.
  2. Encryption at Rest
    - AWS uses SSD drives at Edge location and have the Encryption always enabled. so no worry for this.

  3. Restrict Access to Content
    - Use signed URLs or cookies
    - Use OAI for S3
    - Restrict access to content served by an Application Load Balancer with CustomHeader
    - Use AWS WAF
    - Use Geo Restriction
-----------------
1. Signed URL/Cookie:-
    One of the issue with CFT is if somone have Distribution url he may have unrestricted access to the content of dstribution.
    So directly accessing the contet via CFT url is not a good idea.
    IF you wants to give access to the user for specific time priode yoy can use Signed URL/Cookies.
    For this first you have to create the CDN key RSA key pair
      AWS console > Login with Root accont > My Security Credential > Cloud frony Key > Create
      save the private key and note the accesskey id. 
    The signed url is created with orignal CDN url with below factor
      1. key-pair-id
      2. Private Key
      3. valid till          
      use below command for CLI
        aws cloud front sign
              --url <value>                   EG. http://d15uraiww9uj93.cloudfront.net/site/muf.html
              --key-pair-id <value>               the one you noted down
              --private-key <value>               the path of pravate key 
              --date-less-than <value>            till when you want user to have access
              [--date-greater-than <value>]
              [--ip-address <value>]              

        aws cloudfront sign \
              --url https://d111111abcdef8.cloudfront.net/private-content/private-file.html \
              --key-pair-id APKAEIBAERJR2EXAMPLE \
              --private-key file://cf-signer-priv-key.pem \
              --date-less-than 2020-01-01      
    - IAM user/role who run those command or code must have proper policy attched to create sign url. 
    
    Restrict the origin Access via signed url only:-
      You have provided user the signed url but unsigned url still can access the CDN so the last thing we do is to restric user from accessing the origin(via CDN) 
      with unsigned url. and also allow him only if url is signed from the set of correct .
      for this
        in Console:- 
          go to
            Cloud Front > Distribition > 'ypu distribution' > Behaviour > 'Behaviour for your origin' > Edit
            Restrict Viewer Access > Yes
            Trusted Key Groups or Trusted Signer > choss any
            Select signer or key group.
            done.
          The signer could be   
            your aws account or other aws account too.
         At a time of GET CDN will check if url is signed with proper key or not which is from correct set of signer.      
         
     Signed URL vs Cookie:-
        Use Signed URL if You want to restrict access to individual file.
        Use Signed Cookie if You want to restrict access to multiple files.
        Use Signed Cookie if You don't want to change your current URLs
        RTMP do not support signed cookie
        
    Signed URL/Cookie VS OAI:-
      Signed URL/Cookie used to restric the user by time, ip to get the object from CFT [USER <--> CFT ]
      OAI restrict the bucket to expose only to CFT. [CFT <--> bucket]
    
2. S3 and CDN access issue:-
    IF you are usinf S3 bucket as origin the problem is that you have to make the Bucket public. and so it lead to unecessary data expose.
    To resolve this special issue for S3 and CDN connection, comes a concept of Origin Access Identity (OAI)
    The OAI is kind os pseudo identity that provide a kind of identification (Principle) for CDN.
    By using OAI you can provide the access of Bucket for this OAI and deny the access for other identities(including public)

    With OAI, you can restrict the bucket to be readable by CDN only not with public S3 url.
    How:
      1.  in the bucket set the BPAF to off
      2.  ACL for the inner object = private
      3.  Update BP or Object ACL:
          Use BP if you wants to apply it to all the objevt in the bucket.
          Use ACL if you wants to apply it to individual object only.
          BP:-
            "Sid": "1",
            "Effect": "Allow",
            "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E11YOP9QR1NZ7Q" },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::mufa-test-cdft-bucket-2021/*"
          ACL:-
            In the ACL of object just add the 'Amazon S3 Canonical User ID' and remove public access. 
    Now bucket content will be accessible via CDN only and bucket and its content will not be public. 
    IMP: you do not have to make any changes in the CDN url for this. the OAI provide the the identity to CDN distribution not the person who is using this url.    
    
3. Use Custom Header for Custom Origin:-
    Use Custom header to be added and check it at you origin server side. honor the request only if that Header is prsent.

4. Geo Restriction:-
    This is apply at Distribution level not at CacheBehavoiur level. 
    You can either 
      - deliver the content to all countries except the one listed in Blacklisted Or
      - restrict the content to all countries except the one listed in whitelisted

5. Field Level Encryption:-
    This is used for Additional Encryption layer for POST operation.
    It uses Asymetric encryption. The data uploaded via POST is encrypted at Edge location with private key. 
    It remain encrypted througt the whole jounry then. Only the app or system who has public key can decrypt this data.
    How:-
      1. CloudFron > field level-encryption > Create Profile. It will create the public and private key
      2. Chose public key name.
      3. Chose the data field you want to encrypt in the request. at max you can encrypt 10 field.
      5. Link this profile to CacheBehaviour.
      4. Now provide the public key to all the trusted app or user whome you wants to decrypt the data.
      
      
     
    
