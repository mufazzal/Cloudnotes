This is the NOSQL DB. it does not have any restricion at column side

HoW to creater a Table[By AWS console] :  :-
  AWS > DynamoDB > Table > Create
  HEre you do not have to tell how much colum are there. the items in the table could have variation in colum.
  But you have to peovide the key. 
  There is two type of key here 
    1. Partition key	: This is just like a primary key, think of it like a address for the data related to this key.
       This has to be the unique in the whole table. IT best case scenario is UUID in user table. 
       you wants to add the user then create UUID and put thid user data with 'Partition key' = that uuid.
    2. Sort key: 
    	provide a sort-key if you wants to have a primary key as combination of two
    
    In nutshell :-
      Say you need to create a user table but you do not know the user structure, that user could be employee, cutomer, admin, vendor 
      etc. Those all may have variuos params to store.
      The NoSql will handle it like acharm.
      You can store any kind of user with its UUID : Just for eg : ->
        uTable.store(genetrateUUID(), {name: muf, eId: 100, salary: 111} )
        uTable.store(genetrateUUID(), {name: hus, eId: 100, salary: 111} )
        uTable.store(genetrateUUID(), {name: juj, vendor: airtel, contractType: annual} )
        uTable.store(genetrateUUID(), {name: gtg, cutomerId: 34, buyListId: 45} )
    The DDB table user will take care of all this cvariation in colums and if you see the user table in AWS consoole you will 
    see all those colums but of couse many will have empty entries agains those colums.
  
 Structure of Data :-
    IN DDB the data stored somthing like this. 
    U simply have to have a unique PRimary-key for any data-item that you wants to store in the DDB.
    against this PRimary-key all the data will be stored. 
    The that data inside also have a attributes which are nothing but a column 
  Primary Key:- 
    This is the partition key which has to be unique in the table. VVIMP: it is not at all qutogenerated. 
    you have to provide by yourself only.
    It is of 2 types
    a. Partition Key :- a simple one key 
    b. Partition Key + Sort key :- combination of two keys 

  Data with single Partition Key :-
    Say we are using a simple partition key, and You have a tabe userTable and u store somthing like.
      uTable.store(genetrateUUID(), {name: muf, eId: 100, salary: 111} )
          P_KEY[userID]      name:       eId       salary
          123	 ->          muf        100       111
      uTable.store(genetrateUUID(), {name: hus, eId: 101 salary: 161} )
          P_KEY[userID]      name:       eId       salary
          123	 ->          muf         100       111
          456	 ->          hus         101       161
     uTable.store(genetrateUUID(), {name: juj, vendor: airtel, contractType: annual} )
          P_KEY[userID]      name:       eId       salary      Vendor      contractType
          123	 ->          muf         100       111
          456	 ->          hus         101       161
          789	 ->          juj                              airtel        annual
     uTable.store(genetrateUUID(), {name: gtg, cutomerId: 34, buyListId: 45} )
          P_KEY[userID]      name:       eId       salary      Vendor      contractType    cutomerId       buyListId
          123	 ->          muf         100       111
          456	 ->          hus         101       161
          789	 ->          juj                              airtel        annual
          901	 ->          gtg                                                           34               45

  So above there you can see how a data are stored against there PK and eacg row have diffrent attributes.
  But the best way to IMAGIN about this data-sructure is the following-
	Just imaginn in your home PC you have on directory that is 'uTable'
	Now when you open this directory you will see below folders, and inside each of this foler data related to that partition-key
		uTable
		  |-----> 123
		  	    |---> [...data...]
		  |-----> 456
		  	    |---> [...data...]
		  |-----> 789
		  	    |---> [...data...]
		  |-----> 901
		  	    |---> [...data...]


  Data with single Partition Key + Sort Key :-
    Another way two havingeach uniqly identifiable item is by having the combination of two key one is partition-key and another is sert-key
    EG:-
    Say you have a userOrderTable which will have entry of user and his order. so for every order of each user there will be a row
    
    #DDB_FIG_PK_SORT
    uoTable.store({userID: muffy, orderId: mob1}, {device: samsung, model: J7} )
         P_KEY[userID]    S_KEY[orderID]	device       model       
         muffy		   mob1			samsung		J7   
    uoTable.store({userID: muffy, orderId: mob2}, {device: oneplus, model: 8, price: 1000} )
         P_KEY[userID]    S_KEY[orderID]	device       model	  price    	   
         muffy		   mob1	->		samsung		J7   	  	
         muffy		   mob2	->		oneplus	 	8   	  10000
    uoTable.store({userID: muffy, orderId: lap1}, {device: dell, ram: 8GB, rom: 1TB} )
 	P_KEY[userID]    S_KEY[orderID]         device       model	  price		ram	rom	   
        muffy		   mob1	->		samsung	 	J7   	  	
        muffy		   mob2	->		oneplus		8   	  10000   
        muffy		   lap1	->		dell		8   	  		8GB	1TB
    uoTable.store({userID: fattu, orderId: mob1}, {device: samsung, model: J8, price: 12222} )
	P_KEY[userID]    S_KEY[orderID]         device       model	  price		ram	rom	   
        muffy		   mob1	->		samsung	 	J7   	  	
        muffy		   mob2	->		oneplus		8   	  10000   
        muffy		   lap1	->		dell		8   	  		8GB	1TB
	fattu		   mob1	->		samsung	 	J8	  12222   	  	
    uoTable.store({userID: fattu, orderId: mob2}, {device: samsung, model: J9, price: 67667} )
	P_KEY[userID]    S_KEY[orderID]         device       model	  price		ram	rom	   
r1      muffy		   mob1	->		samsung	 	J7   	  	
r2      muffy		   mob2	->		oneplus		8   	  10000   
r3      muffy		   lap1	->		dell		8   	  		8GB	1TB
r4	fattu		   mob1	->		samsung	 	J8	  12222   	  	
r5	fattu		   mob2	->		samsung	 	J9	  67667   	  	

 So above there you can see how a data are stored against there PK[partition key + sort key] and each row have diffrent attributes.
  But the best way to IMAGIN about this data-sructure is the following-
	Just imaginn in your home PC you have on directory that is 'uoTable'
	Now when you open this directory you will see tyhe folder with partition-key and inside each partition key there is a folder 
	with sort key and inside that lies the data
		uoTable
		  |-----> muffy
		  	    |-----> mob1
			    	     |-----> [...r1...]
		  	    |-----> mob2
			    	     |-----> [...r2...]
		  	    |-----> lap1
			    	     |-----> [...r3...]
		  |-----> fattu
		  	    |-----> mob1
			    	     |-----> [...r4...]
		  	    |-----> mob2
			    	     |-----> [...r5...]

   Now you have got a idea how the architeture of DDB table is. Now what is the biggest issue here.
   The biggest problem is you can query the item with either by   partition-key    or with   partition key + Sort Key
   Now lets say you wants to query by somthing else. with any non-partition, non-sort attribute.
   I actully do not at all wants to provide the partition or sort key
   for this you have to use either
	1. GSI (Global Secondry Index) 
	2. LSI(Local Secondry Index).
   
   GSI :-
     By creating a GSI you actully creat a additional vie of the table. to ceate the GSI in existing table
     go to table > indexes > create
     Now fill the below IMP value
     	1. inex name: name of this index.
	2. partion-key: This is the key which later you can use for querying the data. [this is not same as the one we shose in begining]
		lets call ir GSI-part-key
	3. Sort-key: if you want theis secondry key to be a combination then select the second one.
	
     lets say in our table 'uoTable' you choose the 'device' as GSI-part-key.
	     Now you will be able to query the data with the Attribute 'price' [and not at all have to give the actual PKs in the query]
	     Also when you use the GSI you have to pass the name of index inkey 'IndexName'.
	     So 
			var paramsQueryGSI = {
			    TableName: "UserOrder",
			    IndexName: 'device-index',
			    KeyConditionExpression: "device = :a",
			    ExpressionAttributeValues: { ":a": "samsung" }
			}     
		will produce all the data cell which have device = samsung. no matter what are there partition or sort keys are.
		output :- r1, r4, r5
		ALso as like part-key the GSI-part-key also support only and only '='
		so    KeyConditionExpression: "device > :a",     will give error.

	lets say in our table 'uoTable' we create one more index and and choose the 'device' as GSI-part-key and price as GSI-sort-key then we can 
	do the query like this also
			var paramsQueryGSI = {
			    TableName: "UserOrder",
			    IndexName: 'device-price-index',
			    KeyConditionExpression: "device = :a AND price > :b",
			    ExpressionAttributeValues: { ":a": "samsung", ':b' '100'}
			}     	
			
	Suppose you wants the data to be searchable by 'name' then you have to create a GSI for the attribute 'name'.  
      	SO: in nutshell, if you wants any attribute ar a combination oftwo attribute queriable, then create GSI out of them.

   LSI :-
	 	In LSI you have the same partitition key as DDB table but the sort key is diffrent from DDB table.
		So if you have DDB table primary key = orderId + personId
		you can have the LSI piomary key = orderId + dateTime.
		- Here data are indexed under same partition key but saved twice in that partition 
		- You can create it only at a time of Table Creation.
		- once created it can not be edeleted also
	


	When to use SI(secondry index): Though SI make the DB very queriable and dynamic but there is one very big secret here. that secret is
	for each created SI for ant table the AWS in background have to capture almost double information and store almost double data
	for each entries. it take lot of memore and. 
	AWS almosty crea a new table in which data is arrage againt SI and instead of real promary key.
	So there is three disadvantage here
		1. Speed:	saving additional info about data cause little delya
		2. Memory	more the indexes are, more the memory u need
		3. Cost		each SI cost aroud 3$ a month.
	

These are the possible query by index:

	By Part-key
	By Part-key + Sort-key
	By Part-key + GSI-Sort-key		--> LSI
	By GSI-Part-key				--> GSI
	By GSI-Part-key + GSI-Sort-key		--> GSI

