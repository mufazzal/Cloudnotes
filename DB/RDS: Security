Encryption :- 
  You can sekect if you wants to eencrypt the DB or not. if yes you also must select the key for AWS KMS [key management syatem]
  once done the RDS take care of rest pof the things.
  
  VVIMP:-
    Remeber that not all the db instance type support the Encryption. so if you wants the encrypt your DB at rest then you must select proper db instance type.

  snap shot, Automated back up :-
    If source DB is not encrypted :-
      Then restored one will also be remain un-encrypted and cannot be changed to encrypted.
    If source DB is encrypted :-  
       Then restored one will also be remain encrypted and cannot be changed to un-encrypted

  Read-Replica :-
      If source DB is not encrypted :-
        Then replica must be unencrypted. user cannot change it.
      If source DB is encrypted :-  
        Then will always be encrypted! user cannot change it.

IAM and RDS connection:-
  IAM play no role here. if you wants to conneect to RDS theyou must have hosu, username and password along with access to RDS instance via SG,NACL or RDS in public subnet.
  
DB connection string/Password and Secret Manager:-
  It is advisable to use the AWs secret manager to store the DB password and other string in AWS Secret manager instead of in Code.
  This give you safty from compromising this info.
  
  Also for the password you can enable the rotation.
  
  Secret Manager is integrated with:
    - Amazon Aurora on Amazon RDS
    - MySQL on Amazon RDS
    - PostgreSQL on Amazon RDS
    - Oracle on Amazon RDS
    - MariaDB on Amazon RDS
    - Microsoft SQL Server on Amazon RDS
    - Amazon DocumentDB
    - Amazon Redshift

------------

IAM DB Authentication:-
  Whenever you wants to connect to the DB for queryig you first has to provide the Username and Password of DB user.
  But in case of MySql nad PostgresQl there is one advance and more secure way, that is IAM DB Authentication.
  
  For this first you have to genrate the Auth token via the IAM role or user and then use this token for connecting to DB.
  This token has max liftime of 15 minute and so access will be till that time only. 
  So this access is very personal and time bounded.
  
  Advantage:-
  - IAM database authentication tokens are generated using your AWS access keys or EC2 instance profile. You don't need to store database user credentials
  - Authentication tokens have a lifespan of 15 minutes, so you don't need to enforce password resets
  - IAM database authentication requires a secure socket layer (SSL) connection
 
  Prerequisite:-
  - It must be enabled first.
  - database must has the database user account that uses an AWS authentication token.
  - The Role or user must allow "rds-db:connect"

 
 
    
  


