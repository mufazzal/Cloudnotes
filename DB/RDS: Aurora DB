Aurora is In house RDB product from AWS.
and so Amazon provide many special feature with this DB. This DB give almost all the thing that MYSQL and Postgress gave but also add lot other things.
Even some of the tool design for MYSQL and Postgress ccan be used with Aurora

Below are the exclusive Aurora features:-
  Back Tracking DB:-
    If you enable this feature in Aurora DB then you can backtrack the DB clusted to the point in time easily in few seconds. 
    In other RDS point in time recovery take lot of time.
    When you enable it then you need to set the Time provide the MAx Window time for backtracking. max value is 72 hour.  
  High Avialibility:-
    By default Aurora keep the 6 copies of data. they spread in 3 AZ wirh each has 2 nodes so 3*2 = 6.
    So no need to to have the MultiAz here as data is alreday fault tolerant higly available.
    Non aurora RDS take some time in case of failover and move to secondery storage[only if Multi-AZ is on]
    but Aurora do it whithine a minute only.
  
  Aurora-Replicas or Reader-Instances:-
		You can create this for handling the read only traffic and can bring up to max 15 readed instances.
		This is nothing but the EC2 instances and the storage unit is one of the 6 storage node of aurora cluster.
		When a problem affects the primary instance, one of these reader instances takes over as the primary instance. 
    RDS provide max 5 replica. Aurora give you 15. Replication process is also way faster in aurora.
		Aurora-Replicas Priority:-
			Each Replica can have the priority value from 0 to 15 which define which replica will be consider first for promoting to primary instance in case of it failover.
			If two replica has same value of priority them the one with larsge size will win.
    Read Replica Load Balancing:-
      In Aurora you can create a load balancer to distribute the reading load across the read replicas.
      In RDS there is no way to do this.
  
  Performance:-
    Amazon Aurora provides five times the throughput of standard MySQL or twice the throughput of standard PostgreSQL

  Capacity type:	
    Provisioned: You have to select the DB instance size and take care of changing it if load increase.
    Serverless: You just have to select the mis and max ACU and then Aurora will take care of capacity allocation or de-alocation on load change

  Aurora Serverless: 
    This is germ of aurora.
    With aurora serverless you do not have to worry about compute capacity of instance.
    this will be taken care by aws hself based on load on db
    load here will be function of number of connections and cpu utilisation.
    you can even configure the db compute to go to 0 when there is no activity 
    for crtain priode of time. at this moment their wont be any ec2 attached to rds. only storage capacity remain their
    
    for aurora sereverless you do not have to select instace type like dbe.t2.micro etc.
    this is decided based on load.

    for aurora serverless you need to set below params
      max ACU (aurora compute unit)
      min ACC
        max and min value of compite capacity
      AutoPause
       if true then compute element(ec2) will be disassociate from db.
      SecondsUntilAutoPause
       after how much time of no a ativity, compute should be removed.
     
    use case for serverless db:
      this is best when you do not need the rds instance up and running all the time.
      when load on the db has pattern cycle and fluctuate considerably.
      also when lot of time there is no activity on db yhen feature of compite shut down will save u lpt of money
      
      
  Aurora global databases:-
    you can set up Aurora global databases and AWS keep primary AWS Region and each of the secondary Regions in synch.
    this gives you
    - low latency global reads capability
    - disaster recovery from outages across an AWS Region
      
      
  Aurora with Other DB:-
    Currently You can use MySql and PostgresSql also with Aurora. You cannot use other.
    But Aurora DB is not compatible with Microsoft SDQ, OracleDB, MariaDB etc


- It support IAM DB authentication via token
