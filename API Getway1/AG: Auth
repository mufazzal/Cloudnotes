
There is two places where you can check it
	- At Apigetway by the apigetway itself
	- At Apigetway but by the Authorizer
 
At Apigetway by the apigetway itself:-
	Verify (not authenticate) if API is in correct form:-
	Verify if API caller has provided proper structure like body, header, query param
      This will check if the caller has proper params in the API. it does not verify if he has the access to that api or not.
      How:-
        at your  Api > Method Request 
          set 'URL Query String Parameters', 'HTTP Request Headers', 'Request Body'
      This is very basic level of check.
		How:-
			go to AWS > API GEtway > API collection > api > methode > MEthode Request
			Now set the 'Request Validator' as such that what parts in api you wants to check
			Now you can configure belo three things
				Query String ->  www.*******.com?uName=Muf                    Here you setup qery in api must look like  
				Header       ->  www.*******.com {Header:{ uname: "Muf"}}     Here you setup headers must look like  
				Query String ->  www.*******.com?{body:{ uname: "Muf"}}       Here you setup body model must look like  
			This authoization can work only upto request formate level.
			It n verify if required data prsent in the call or not. But there is no way that it can verify that whoever
			is accessing this api have permission/authority to go into it.

#APIGETAUTH
At Apigetway but by the Authorizer:-
  There are 3 way to authenticate if caller has access to API or not
  1. custom authorizer + Cognito user-pool
  2. AWS_IAM with Cognito id-pool
  3. custom authorizer + Lambda
  
  
  1. custom authorizer + Cognito user-pool:- called on behalf of an appclient with valid user id_token
    When you want to restrict the access of API only to the user who has valid id_token of the selected user-pool.
    So here in the api you have to pass the valid id_token.
    go to 
      Authorizers > Create 
      Choose Type = Cognito
      Select the user-pool of you choice.
      Type the key of Header param who has the id_token in 'Token Source'
      Apply this authorizer to API that you wants to authenticate.
      Done
    Now at the time of calling the caller has to provide the valid id_token and api getway take care if it is valid for the give user-pool
    if yes then the api get executed or else it fail.
    EG:-
      see 'getUsers-US pool' api in postman and provide the valid id_token in Authorization param.
      
      When to use it:-
        This approch is good when you wants to give the balncate access to all the user of certain user-pool.
        It say 'if caller has valid id_token then gothrough'
        Actully here the call is placed on behalf of certain AppClient that is registerd at cognito portal. The id token has 
        the information about on whose(AppClient) behalf this call took place.
      
   2. AWS_IAM with Cognito id-pool :- called on behalf of an cognito user with valid user key and secret
      In above approch you give access to the user if it has the valid id_token
      Suppose you wants to write a IAM kind of access management where you write a policy for any authenticated cognito-user to tell
      if he has access to set of api or not.
      For this you have to add the IAM policy in the role of authenticated user of the identity pool
        go to Cognito > Identity Pool > your pool > Edit
        check the role of 'Authenticated role' say 'autr1'
        Now go to IAM > Role > select role 'autr1'
        Add policy 
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Sid": "VisualEditor0",
                          "Effect": "Allow",
                          "Action": "execute-api:Invoke",
                          "Resource": [
                              "arn:aws:execute-api:us-east-1:388412347424:di4smva06m/*/GET/getUsers",
                              "arn:aws:execute-api:us-east-1:388412347424:di4smva06m/*/GET/getUser",
                              "arn:aws:execute-api:us-east-1:388412347424:di4smva06m/*/GET/getpro"
                              ]
                      }
                  ]
              }        
      So now the authenticated user will have acces to the APi listed in 'Resource'
      
      
      Now cofiguring the API for this identity pool- 
      For this first you need to set the identity poll and then 
        Resources > your api > METHODE > Method Request
          in 'Authorization' select AWS_IAM
        Done
      
      Actully here the call is placed on behalf of cognito-user directly. you have to provide the identity of that cognito user 
      in form of Access key and Secret.
      Unlike approch 1 here you do not have to create the Authorizer.
      
      At the time of calling first you have to generate the access-key, secret and session_token via id_token for given identity pool.
      once generated then we will call the api with the signature v 4 params with access-key, secret, session_token
      EG:-
        'getUsers-ID pool' in postman
      
      The AWS system automatically determine the identiti pool from the params passed in signature-v-4-params.
      So you do not have to provide it at the time of set up.
      
      
      Calling this API from Front End:-
        To call this api which is secured by AWS_IAM, you have to use signed v4 api call.
        for this use 'aws4fetch' npm lib.
      Code-
                                    import { AwsClient } from 'aws4fetch'
                                    
                                    async function getUsersCognitoIDPAuth(session) {
                                      const idpKeysAndToken = await getUsersIdentityPoolIdValues(session);
                                      console.log(idpKeysAndToken)

                                      const aws4Client = new AwsClient({
                                        accessKeyId: idpKeysAndToken.accessKeyId,     
                                        secretAccessKey: idpKeysAndToken.secretAccessKey,
                                        sessionToken: idpKeysAndToken.sessionToken,
                                        service: 'execute-api',
                                        region: 'us-east-1'
                                      });

                                      // This will work only if the role assign to authenticated user do have proper permussoin to execute this api
                                      const res = await aws4Client.fetch('https://hhswh9zgfa.execute-api.us-east-1.amazonaws.com/beta/getUsersIDPAuth').
                                                                    then(res => res.json());
                                      console.log(res)
                                    }


                                    async function getUsersIdentityPoolIdValues(session) {

                                      const credentials = new AWS.CognitoIdentityCredentials({
                                        IdentityPoolId: 'us-east-1:1918fbf6-b033-442c-8ae9-5a0b9b047200',
                                        Logins: {
                                          'cognito-idp.us-east-1.amazonaws.com/us-east-1_d8rcMtMXj': <valid id token>
                                        }
                                      }, 
                                      { region: 'us-east-1' });

                                      const prm = new Promise((res, rej) => {
                                          credentials.get((error, data) => {
                                            if (error) {
                                              rej({error: error.message});
                                            } else {
                                              res({
                                                accessKeyId: credentials.accessKeyId,
                                                secretAccessKey: credentials.secretAccessKey,
                                                sessionToken: credentials.sessionToken,
                                              })
                                            }
                                        });
                                      })

                                      return prm;
                                    }      
    
    
   
    
  3. custom authorizer + Lambda:-
      This is extremly fine grain way to give access at a runtime.
      In this approach you have to create a lambda who take the input for the api and return the IAM policy like this
          var effect = 'deny'
              if(event.authorizationToken === 'muf')
                  effect = 'allow'

              const po = {
                  principalId: 'user',
                  policyDocument: { 
                      Version: '2012-10-17', 
                      Statement: {
                          Action: 'execute-api:Invoke',
                          Effect: effect,
                          Resource: 'arn:aws:execute-api:us-east-1:388412347424:r3k1ggk9s7/Dev/GET/personalinfo'
                        } 
                  }
              }         
      
      
----      
Authorizer of API Getway   VS   Lambda Role 
  Most of the time you will see a lambda attached to a certain api in API getwatway.
  Now there is two point of authorization check here (in order of execution)
  1. By Api Getway Authorizer
  2. By Lambda execution Role
  
  By Api Getway Authorizer:-
    This one will determine that does the called of the API has permission to erxecute this api. No matter what this api is doing inside
    But do the caller even have the permission to un it.
    Once it says 'yes the caller has access' then the lambda attached will start running 
      but In any way this authorizer wil not affect the operation done inside the lambda itself.
    If it says 'No the caller do not has access' then the lambda attached will not run at all. 
    There is three way to manage access. see it at '#APIGETAUTH'
    So this access is actully depend on the previllage level of USER
    
  By Lambda Role:-
    Onxce the 'Api Getway Authorizer' say yes, then the next step is executing the lambda itself. 
    Now making changes in any aws resource the lambda must have the proper ppermission and role. for this comes the 'execution Role'
    This define that what kind of operation on what kind of resource does the lambda has permission to perform
    So this access is actully depend on the previllage level of Lambda [not user]
    
---------------------------------------------------

      
=----------------

API Getway and CORS:-
  By default all the api in the API getway has the cors disabled. It can be enecbled easily by 
    AWS > API Getway > you api > resources > Select Action in DD > Enable CORS.
    
  API Getway and CORS and Lambda:-
    If lambda is integrated as the response generator in the APPI then above step is not enough for cors. 
    for this you havr to take care of additional headers in the reponse of lambda.
    
    So the response of lambda should have this header:-
      
 	  res = { 
          statusCode: ****, 
          body: *******,
          headers: {'Access-Control-Allow-Origin': '*'}
		}
		return res;      
      
  
