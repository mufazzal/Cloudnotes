Throttling:- 
	>> Making Sure that certain API do not get out of control call. and protect back-end from overwhelming.
	
  In API gateway you can set the Throttle value for an API. This save your API and Back-end from overwhelming.
  This is enabled for stage level but can be overried for Specific HTTP Methode. This Throttle limit is shared among all the resouce coming in the API.
  You set 2 value here
  1. Rate:  The maximim request per sec it can handle [for given stage and for among all the resources]
  2. Burst: Maximum request in 1 milisecond it can handle [for given stage and for among all the resources]
  
  After that the request will be throttled for that second priode.
  EG: Rate: 1000 and Burst: 6000. then
  If 10000 request will come in one sec evenly then all will be served.
  If 12000 request will come in one sec evenly then 10000 will be served. and 2000 will throttle.
  If 10000 request will come in one sec but in first milisec it is 4000 and rest 999 sec it is 6000 then all will be served
  If 10000 request will come in one sec but in first milisec it is 8000 and rest 999 sec it is 2000 then 2000(=8000-6000) from those 8000 will throttle rest will be served. 
  
  - Throttling value can be override for specific Methode type.
  - After limit the the request will be throttled with error '$29 too many request'
  
-------------------------

Usage Plan and API Key:-
	>> Making Sure that certain Client do not make out of control calls for certain APIs. and protect back-end from overwhelming by that client.

	When you create a apis in AG. they can be public and people can use it for many number of time at any rate.
	Now suppose you wants to limit the number of request per second and total number of request for some set of users.
  This is enabled for stage level but can be overried for Specific HTTP Methode. This Throttle limit is shared among all the resouce coming in the API.
	say tou wants to give 5000 request call and 10 requets call max per sec for any of your client. How would you do it.
	For this use the 'Usage Plan' and 'API key':-
	Usage Plan:-	
		Usage plan has 3 values:
			Rate: max request per second, the client can send. after which request throttle.
			Burst: max request in 1 milisecond it can send
			quota: Max number of request in given time preiod[day, week, month]
	API Key:-
		The api key is mapped to one and only one Usage Plane. 
	Source of API Key:-	
		At the time of request caller can sent the Api key at two places 
			HEADER: in the header 'X-API-Key'
			AUTHORIZER: use cutom lambda authorier and have it return the API Key in response agaibst key 'usageIdentifierKey'. 
		AG Setting:-
			You need to set this in setting at AG > your api > Setting, from which you will read the API key.
		Now finally ar resource level:
			Go to 
				AWS > AG > APIs > your api > select proper api resource > Methode Request > 
				set API Key Required = true.
				So at this point you can set what resousrce need to have api key in request and wha not.
		One usage plan can map to many API Key. but one api key can have only one Usage plan  
  
 Usage Plan and API Key  VS  Throttle Limits:-
  'Usage Plan and API Key' limits the specific client (who use that API key) for per sec and pe milisec use of APIs. 
  'Throttle Limits' limits all the client for per sec and per milisec use of APIs. 
	Flow of applicable limits:-
		1. Per-client per-method throttling limits that you set for an API stage in a 'usage plan'
		2. Per-client throttling limits that you set in a 'usage plan'.
		3. Per-stage Per-Methode limit that you set in 'API stage settings'
		4. Per-stage limit that you set in 'API stage settings'
		5. Account-level throttling per Region.
--------------------

AWS WAF:-
	>> Making Sure that certain Client do not make malicious calls.

	You can enable WAF ptotection of API at Stge level. You have to select the proper Web ACL for this.
	With this you can protect your API from:
	- Malicious IP address ranges, 
	- Malicious CIDR blocks, 
	- block requests that originate from a specific country or region, 
	- requests that contain malicious SQL code or script
	- You can also create rules that match a specified string or a regular expression pattern in HTTP headers, method, query string, URI, and the request body
	
--------------------------

Private API:-
	>> Making Sure that only authorized client make calls. and no internet involve anywhere.

	Private APIs are the API which is accessible to only a slected VPC of authorized AWS account.
	and even traffic from that VPC to API gateway only travel in AWS boundry not on public internet.
	For this you have to set your Endpoint as 'Private' at time of API creation. and then
	At AG:-
		Set up the rersource policy to selectivly allow which VPC can access those resources in APIs.
	At VPC side:-
		Create Interface VPC endpoint.
	- You can access multiple API gateway endpoint from sigle Interface EP in VPC.
	- You can also use AWS Direct Connect to establish a connection from an on-premises network to Amazon VPC and access your private API over that connection.
	- This is very useful when you have many private component in your VPC which do not has the Internet but need to execute the underlined APIs.

------------------------------

Client Certificate:-
	>> Making Sure that bacck-end accept calls from API gateway only. and no one else.
	
	You can use API Gateway to generate an SSL certificate and then use its public key in the backend to verify that HTTP requests to your backend system are from API Gateway. 
	This allows your HTTP backend to control and accept only requests that originate from Amazon API Gateway, even if the backend is publicly accessible
	


