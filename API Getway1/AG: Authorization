There are 3 way to authenticate if caller has access to API or not
1. custom authorizer + Cognito user-pool
2. AWS_IAM with Cognito id-pool
3. custom authorizer + Lambda
  
  
1. custom authorizer + Cognito user-pool:- called on behalf of an appclient with valid user id_token
    When you want to restrict the access of API only to the user who has valid id_token of the selected user-pool.
    So here in the api you have to pass the valid id_token.
    go to 
      Authorizers > Create 
      Choose Type = Cognito
      Select the user-pool of you choice.
      Type the key of Header param who has the id_token in 'Token Source'
      Apply this authorizer to API that you wants to authenticate.
      Done
    Now at the time of calling the caller has to provide the valid id_token and api getway take care if it is valid for the give user-pool
    if yes then the api get executed or else it fail.
    EG:-
      see 'getUsers-US pool' api in postman and provide the valid id_token in Authorization param.
      
      When to use it:-
        This approch is good when you wants to give the balncate access to all the user of certain user-pool.
        It say 'if caller has valid id_token then gothrough'
        Actully here the call is placed on behalf of certain AppClient that is registerd at cognito portal. The id token has 
        the information about on whose(AppClient) behalf this call took place.
      
2. AWS_IAM :- 
      This is useful if you need to authenticate the user who in some way has mean to generate temporary IAM credentials.
      This temporary credentials is attached to a role which define wheather this user has access to call this api or not.
      - Here the API of API gareway is called with signed url. which is created with the help of this temporary IAM credentials.      
      - This temporary credentials can be generated by STS, Cogniti-Id-pool, EC2 Role, assuming role etc.
      
      The role attached to that cred must carry below kind of [ermission:-
        "Effect": Allow
        "Action": "execute-api:Invoke",
        "Resource": ["arn:aws:execute-api:us-east-1:388412347424:di4smva06m/*/GET/getUsers", ...]
      
       To cofiguring the API to use this mechanics for auth: 
        Resources > your api > METHODE > Method Request
          in 'Authorization' select AWS_IAM
        Done
        
  3. custom authorizer + Lambda:-
      This is extremly fine grain way to give access at a runtime.
      In this approach you have to create a lambda who take the input for the api and return the IAM policy like this
          var effect = 'deny'
              if(event.authorizationToken === 'muf')
                  effect = 'allow'

              const po = {
                  principalId: 'user',
                  policyDocument: { 
                      Version: '2012-10-17', 
                      Statement: {
                          Action: 'execute-api:Invoke',
                          Effect: effect,
                          Resource: 'arn:aws:execute-api:us-east-1:388412347424:r3k1ggk9s7/Dev/GET/personalinfo'
                        } 
                  }
              }         
