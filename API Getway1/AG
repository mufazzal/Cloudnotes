
API Gateway Endpoint [Reaching ti API]:-
	When you create API [Not API resource] you can how user can reach to those APIs
	There is 3 way
		1. Regional
		2. Edge Optimized
		3. Private
		
		Regional:-
			Here the API are deployed to specific AWS region. Though user can access those apis from any where in worls but its faster for the user of the region  where this API lies.
			This is useful if you user are clustred in specifiv region.
		Edge Optimized:-
			Here AG utilize the Edge location for fast respionse to anywhere in the world. This is useful if you user are spread globally.
		Private API:-
			This useful if you wants the APIS to be callable from your VPC only. It cannot be called form outside of VPC by public internet.


-----------------------------------

Over all lookout:-

API Gateway
  |
  |------API_MyApp
  |       |---------/users
  |       |            |-----GET											IMPL_1
  |       |            |-----PUT											IMPL_2
  |       |            |---------id
	|       |            |           |-----GET					IMPL_3
	|       |            |           |-----POST					IMPL_4
	|				|						 |
	|				|						 |
  |       |            |---------{proxy+}
  |       |                        |-----GET					IMPL_5
  |       |                        |-----POST					IMPL_6
	|				|												 |	
	|				|												 |
	|				|												color or {type+}		IMPL_11	 --INVALID
	|				|
  |       |---------/products
  |       	            |-----GET											IMPL_7
  |       	            |-----POST										IMPL_8
  |       	            |---------{proxy+}
  |       	                        |-----GET					IMPL_9
  |       	                        |-----POST				IMPL_10
  |------API_MyApp1
  |------API_MyApp2
  |------API_MyApp3
                      

API:-
	This is are the APIs
	API_MyApp, API_MyApp1, API_MyApp2, API_MyApp3
	each api has it own id and hostname so for
	API_MyApp:		https://<id of API_MyApp>.execute-api.us-east-1.amazonaws.com/<stage>
	API_MyApp1:		https://<id of API_MyApp1>.execute-api.us-east-1.amazonaws.com/<stage>
	API_MyApp2:		https://<id of API_MyApp2>.execute-api.us-east-1.amazonaws.com/<stage>
	
	
Resource:-
	In each of the APIs you create the resources. This resources could be of proxy or non proxy resources.
	Resources can be accessed with Hostname + resource path
	for API_MyApp:-
		https://<id of API_MyApp>.execute-api.us-east-1.amazonaws.com/<stage>/users						IMPL_1, IMPL_2
		https://<id of API_MyApp>.execute-api.us-east-1.amazonaws.com/<stage>/users/id				IMPL_3, IMPL_4
		https://<id of API_MyApp>.execute-api.us-east-1.amazonaws.com/<stage>/users/bla/bla		IMPL_5, IMPL_6
		https://<id of API_MyApp>.execute-api.us-east-1.amazonaws.com/<stage>/products				IMPL_7, IMPL_8
		
	Methode:-
		Each resource can have diffrent HTTP methode implemented.
		this could be GET, POST, PUT etc.
		for proxy resources their is additional one name 'ANY'
		
	Proxy resource:-
		The proxy resource is made of the greedy parameter which will mask all the rights side parameters in url path.
		in the above diagram all below url path will resoulve to either IMPL_5 or IMPL_6
		- users/**/**/**..
		- users/type
		- users/class
		- users/type/data
		- users/id/45			 	:yes! even 'id' exist as saperate resource but that one is not greedy.
		
		Though below will not resolve to IMPL_5 or IMPL_6, because if exact name of resource match then proxy resource will not be taken.
		- users/id
		
		DEfault methode ANY for proxy resurce:-
			For proxy resource you have to provide defalut implementation which will be used if the specific HTTP methode is not implemented.
			When you deploy the proxy resource all the HTTP methode also deployed for that proxy resource.
			The implementation could be user defined of default (define via ANY)
		
		Proxy parameter cannot have a child resource. so you cannot have below herarchy
		So 'IMPL_11' is not possible.
		
		You can also the heirarchy like 	/users/{userId}/orders/{orderId}
		but not like   /users/{userId+}/<any string>
		
------------------------------------
			
API Gateway Integration [forwarding request]:-
	This is applicable at resource level of API. 
	You can configure how a request will be handle for any resource of any methode type.
	You forward the request to
		Lambda
		HTTP
		AWS service 
		Private link
----------------------------------


Binary Payload:-
	The request from client and response from Interation can have a binary data like image, GZIP file etc.
	To handle this in API gateway
	For Proxy-Integration:-
		To handle binary payloads for AWS Lambda proxy integrations, you must base64-encode your function's response
	For non-proxy:-
		Use The contentHandling value can be CONVERT_TO_BINARY, CONVERT_TO_TEXT, or undefined
-----------------
Stage:-
	A stage is a named reference to a deployment. you can configure stage settings to enable 
		- Caching
		- Default Method Throttling [Not Usage Plane]
		- WAF
		- Client Certificate
		- Stage Variable
		- Monitering mechanics

	Stage VAriable:-
		Stage variables are name-value pairs that you can define as configuration attributes associated with a deployment stage of a REST API. 
		They act like environment variables and can be used in 
		-  the mapping templates, 
		-  pass configuration parameters to your AWS Lambda or HTTP backend
		-  USe in HTTP endpoint like 'http://${stageVariables.url}'
		-  USe in LAmbda function name like 'http://${stageVariables.function}'
		
----------------------
HTTP API:-
	HTTP API is next version of REST API. This provide fater and low latency.
	But it still not has all the feature. 
---------------------

WEbsocket API
  this provide the bidirectional persistent connection between server and cloent.
  For this you have to implement three route
  $connect
  $disconnect
  $default
  you can also create your own custom route
 
