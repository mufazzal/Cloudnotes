Elastic BeanStalk is the way to plant a seed for aws insfra and let it grow.
With EB, you can quickly deploy and manage applications in the AWS Cloud without having to learn about the infrastructure that runs those applications

EB supports applications developed in Go, Java, .NET, Node.js, PHP, Python, and Ruby
Supported Platform: Tomcat, Nginx, IIS

You can interact with EB by using the 
	- EB console, 
	- AWS CLI
	- eb, a high-level CLI designed specifically for EB	
	
Bird Eye View:-
		EB
		|
		|---------App1 [name, tags]
		|						|
		|						|------EV1[type, Domain, Platform, Code] 
		|						|
		|						|------EV2[type, Domain, Platform, Code] 
		|						|
		|						|------EV3[type, Domain, Platform, Code] 
		|						
		|---------App2
		|---------App3

Applicaion:-
	This is the logical collection of resources.
	When you create the Application AWS do not provision any resource rather its just sittimg empty logical unit.
	The application contains Enviorment App Version etc.
		
Application Version:-
	- This refers to a specific, labeled iteration of deployable code for a web application
	- It point to single S3 object that contains the deployable code, such as a Java WAR file
	- Applications can have many versions and each application version is unique

Environment:-
	- An environment is a collection of AWS resources running an application version.
	- AWS automatically provision resources when you create envirment 	
	- Each environment runs only one application version at a time
	- At a time you can have many environmentruning simultenousl and each having diffrent app version.
	
	Environment tier:-
		The environment tier designates the type of application that the environment runs, and determines what resources EB provisions to support it
		You have to chosse it when you create Env. it cannot be changed later.
		There is two type:
		1. Web server environment tier. 
		2. Worker environment tier.
	
	Domain: 
		You can choose the subdomain part like below. Though it must be avialable.
		<userdefinedstring>.us-east-1.elasticbeanstalk.com
		This will be endpoint of youe system for end user.
			
	Platform:-
		A platform is a combination of an operating system, programming language runtime, web server, application server, and EB
		This are preconfigured by AWS and you can choose one from 
		Java, PHP, Node, .NEt, Docker etc.
		- You can create env and upload docker image to begin the infra
		
	Application Code:-
		You need to provide the soure code at a time of creatinf Env.
		You can provide Git, S3 or ZIP file as source code.
		
	Configuring Envioment:-
		Once the insfra is created after creatinf enviorment you can then also changes couple of item in theundeline AWS resources and Platforms
		AWS EB provides a wide range of options for customizing the resources in your environment, and EB behavior and platform settings
		You can change like, config of EC2, SG, LB, ASG etc.
		S3 bucket for code repository.
		Below are the some item you can configure
		Software: 
			Server, Log to S3 and CW, Enviorment Variable, X-Ray
		Instances:
			Monitring interval, EBS type and IOPS, SG
		Capacity:
			Type [single or load balanced, AZ, min, max, Scalling Policy, Intance type, AMI, ]
		Load Balancer:
			Configure Listeners [can be more then one]
			Configure Process and map it to listener. also Configure Health check for each Process.
			Configure Rule for traffic routing to the process.
		Modify rolling updates and deployments:-
			Application deployments:-
				Coose the one from 5 option
			Configuration updates
				Coose the one from 4 option
		Monitoring:-
			Choose if you wanst Basic or Enhanced Monitoring.	
			You can choose to ignore 4XX error from app or LB.
		Security:-
			- EC2 key pair
			- Instance Role
			- EB Service Role
		Platform Update window:-
			Set the weekly window for platform update.
			Your application stays available during the update process
		DAtabase:-
			Set it up in the env if needed.
	
	Env Monitoring:-
		You can monitor component in diffrent way
		Monitoring console: The EB specif panel for monitering
		Basic health reporting:	
		Manage alarms: You can create alarms for metrics that you are monitoring by using the Elastic Beanstalk console
		change history: You can use the AWS Management Console to view a history of configuration changes that have been made to your EB environments
											It uses cloudtrain to get it. it has date and time, IAM user, Tool, config param.
		Event and Notificatioon:
		Monitor instances:
		View instance logs:
			Logs are stored in S3 and also can be sent to CW.
			In EB console you can request to get the latest 100 line of logs or full log from all the instances.   
											
--------		
	Web Server Enviorment:-
		Below are the item configured for Web Server Enviorment tier.
		EC2 instance: 
			Its default config is depends on the platfirm you choose. 
		Instance security group: 
			By default it open Inbound port 80 on HTTP and open all outbound
		Load balancer :
		Load balancer security group:-
			By default it open Inbound port 80 on HTTP and open all outbound
		Auto Scaling group:-
	
	Worker environments:-
		Below are the item configured for Worker Enviorment tier.
		All items in Web tier + SQS.
		
-----------

Permission:-
	see https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts-roles-instance.html
	Service Role:-
		A service role is the IAM role that Elastic Beanstalk assumes when calling other services on your behalf
	instance profile:-
		An instance profile is an IAM role that is applied to instances launched in your Elastic Beanstalk environment.
		It must have some predefined permissions.
		
--------

Integrated AWS services:-
	Once the App and Env is initiated, the basic building block is ready now still you cann add below AWS services in the infra tack of EB.
	1. RDS
	2. DynamoDB
	3. ElastiCache
	4. EFS
	5. S3
	6. CW log and CW agent 
	
--------------

EB and RDS DB:-
	You can choose to have DB in the env or outside it.
	It is advisable to use it outside so you database persist once env is taked down.
	Use EV variable for connection string.

------------

Updates:
	There is three kind of updates happen in the EB system
	1. Deploying Application: A new source code of Application is deployed
	2. Changing Configuration: Env config is changed
	3. Platform Update: Undelying Platform like Apache, Nginx is updated or patched.
	
	1. Deploying Application:
			You can deploy the new bundle or previosly uploaded bundle.
			There is 5 way					
			1. All At once
					- Work with LB and Single instance both
					- Take least time
					- Application installed in all the instance together at one
					- There will be short down time
					- Rolling back is difficult and time taking and have down time. You have to re-deploy the older version again
					- No new instances launched
			2. Rolling							
					- Work with LB only
					- Take more time
					- New version is installed in subset of all existing instances and then on remaining ones.  
					- No down time but some capacity redution.
					- Rolling back is difficult and time taking. You have to re-deploy the older version again
					- No new instances launched
			3. Rolling with Batch
					- Work with LB only
					- Take even more time
			 		- Elastic Beanstalk launches an extra batch of instances, then performs a rolling deployment.
					- No down time and No capacity redution.
					- Rolling back is difficult and time taking. You have to re-deploy the older version again
					- Some New instances also launched and serve along with some older one after deployment.
			4. Immutable						
					- Work with LB and Single instance both
					- Slowest
			 		- Elastic Beanstalk launches a fresh set of instance and then install new App in them. New will comes to service once the Health checked is passed.
					- No down time and No capacity redution.
					- Rolling back is easiest as you just need to terminate thenew instance.
					- New inatances are launched and older ones are terminated once deployment success.
			5. Traffic splitting		
					- A canary testing deployment method.
					- Same as 'Immutable' but keep older istance with old app version alive with few new instance with new app version




