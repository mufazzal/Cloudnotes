Elastic BeanStalk is the way to plant a seed for aws insfra and let it grow.
With EB, you can quickly deploy and manage applications in the AWS Cloud without having to learn about the infrastructure that runs those applications

EB supports applications developed in Go, Java, .NET, Node.js, PHP, Python, and Ruby
Supported Platform: Tomcat, Nginx, IIS, Passenger

You can interact with EB by using the 
	- EB console, 
	- AWS CLI
	- eb, a high-level CLI designed specifically for EB	
	
Bird Eye View:-
		EB
		|
		|---------UserApp [name, tags]
		|						|
		|						|------EV1[type, Domain, Platform, Code of UserApp_version_1] 
		|						|
		|						|------EV2[type, Domain, Platform, Code of UserApp_version_2] 
		|						|
		|						|------EV3[type, Domain, Platform, Code of UserApp_version_3] 
		|						
		|---------AdminApp
		|---------ManagementApp

Applicaion:-
	This is the logical collection of resources.
	When you create the Application AWS do not provision any resource rather its just sittimg empty logical unit.
	The application contains Enviorment App Version etc.
		
Application Version:-
	- This refers to a specific, labeled iteration of deployable code for a web application
	- It point to single S3 object that contains the deployable code, such as a Java WAR file
	- Applications can have many versions and each application version is unique

Environment:-
	- An environment is a collection of AWS resources running an application version.
	- AWS automatically provision resources when you create envirment 	
	- Each environment runs only one application version at a time
	- At a time you can have many environmentruning simultenousl and each having diffrent app version.
	
	Environment tier:-
		The environment tier designates the type of application that the environment runs, and determines what resources EB provisions to support it
		You have to chosse it when you create Env. it cannot be changed later.
		There is two type:
		1. Web server environment tier. 
		2. Worker environment tier.
	
	Domain: 
		You can choose the subdomain part like below. Though it must be avialable.
		<userdefinedstring>.us-east-1.elasticbeanstalk.com
		This will be endpoint of youe system for end user.
			
	Platform:-
		A platform is a combination of an operating system, programming language runtime, web server, application server, and EB
		This are preconfigured by AWS and you can choose one from 
		Java, PHP, Node, .NEt, Docker etc.
		- You can create env and upload docker image to begin the infra
		
		Custom Platform:-
			In case you need a platform that EB do not support like C, Cobol. then you can create the custom platform from open source tool like Packer.
			This will basically create the AMI for you with some custom software + configuration + setting.
		
	Application Code:-
		You need to provide the soure code at a time of creatinf Env.
		You can provide Git, S3 or ZIP file as source code.
		
	Configuring Envioment:-
		Once the insfra is created after creatinf enviorment you can then also changes couple of item in theundeline AWS resources and Platforms
		AWS EB provides a wide range of options for customizing the resources in your environment, and EB behavior and platform settings
		You can change like, config of EC2, SG, LB, ASG etc.
		S3 bucket for code repository.
		Below are the some item you can configure
		Software: 
			Server, Log to S3 and CW, Enviorment Variable, X-Ray
		Instances:
			Monitring interval, EBS type and IOPS, SG
		Capacity:
			Type [single or load balanced, AZ, min, max, Scalling Policy, Intance type, AMI, ]
		Load Balancer:
			Configure Listeners [can be more then one]
			Configure Process and map it to listener. also Configure Health check for each Process.
			Configure Rule for traffic routing to the process.
		Modify rolling updates and deployments:-
			Application deployments:-
				Coose the one from 5 option
			Configuration updates
				Coose the one from 4 option
		Monitoring:-
			Choose if you wanst Basic or Enhanced Monitoring.	
			You can choose to ignore 4XX error from app or LB.
		Security:-
			- EC2 key pair
			- Instance Role
			- EB Service Role
		Minor Platform Update window:-
			Set the weekly window for platform update.
			Your application stays available during the update process
		DAtabase:-
			Set it up in the env if needed.
	
	Env Monitoring:-
		You can monitor component in diffrent way
		Monitoring console: The EB specif panel for monitering
		Basic health reporting:	
		Manage alarms: You can create alarms for metrics that you are monitoring by using the Elastic Beanstalk console
		change history: You can use the AWS Management Console to view a history of configuration changes that have been made to your EB environments
											It uses cloudtrain to get it. it has date and time, IAM user, Tool, config param.
		Event and Notificatioon:
		Monitor instances:
		View instance logs:
			Logs are stored in S3 and also can be sent to CW.
			In EB console you can request to get the latest 100 line of logs or full log from all the instances.   
											
--------		
	Web Server Enviorment:-
		You can have single instance or multiple instance evviormet. 
		In single instance you o not have fancy item like ASG, LB.
		In Mu;ti-instance below are the item configured for Web Server Enviorment tier with multiple instaces.
		EC2 instances: 
			Its default config is depends on the platfirm you choose. 
		Instance security group: 
			By default it open Inbound port 80 on HTTP and open all outbound
		Load balancer :
		Load balancer security group:-
			By default it open Inbound port 80 on HTTP and open all outbound
		Auto Scaling group:-
	
	Worker environments:-
		Below are the item configured for Worker Enviorment tier.
		All items in Web tier + SQS.
		
-----------

Permission:-
	see https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts-roles-instance.html
	Service Role:-
		A service role is the IAM role that Elastic Beanstalk assumes when calling other services on your behalf
	instance profile:-
		An instance profile is an IAM role that is applied to instances launched in your Elastic Beanstalk environment.
		It must have some predefined permissions.
		
--------

Integrated AWS services:-
	Once the App and Env is initiated, the basic building block is ready now still you cann add below AWS services in the infra tack of EB.
	1. RDS
	2. DynamoDB
	3. ElastiCache
	4. EFS
	5. S3
	6. CW log and CW agent 
	
--------------

EB and RDS DB:-
	You can choose to have DB in the env or outside it.
	It is advisable to use it outside so you database persist once env is taked down.	Use EV variable and S3 for connection string.
	Still if you are using the RDS in the EB itself then you can set Retention = Create Snapshot to preserve the stste of DB of later restoration.

------------

Application version lifecycle:-
	Whenever you launch a new application version in EB, the older remain in there if you wants rollbacks.
	But after sometime you have many unsed version in EB.
	TO cleas it you can set the Lifwcycle policy which can
	- DElete the older versions(not in use) total version exceed the maximum number
	- DElete if certain version(not in use) if its older ten some set value.
	- It cannot delete the in-use version.
	- you will need a service role for this.
	- You can choose to retain the source bundle in S3 if you wants.

------------

Updates:
	There is three kind of updates happen in the EB system
	1. Deploying Application: A new source code of Application is deployed
	2. Changing Configuration: Env config is changed
	3. Platform Update: Undelying Platform like Apache, Nginx is updated or patched.
	
	1. Deploying Application:
			You can deploy the new bundle or previosly uploaded bundle.
			There is 5 way					
			1. All At once
					- Work with LB and Single instance both
					- Take least time
					- Application installed in all the instance together at one
					- There will be short down time
					- Rolling back is difficult and time taking and have down time. You have to re-deploy the older version again
					- No new instances launched
			2. Rolling							
					- Work with LB only
					- Take more time
					- New version is installed in subset of all existing instances and then on remaining ones.  
					- No down time but some capacity redution.
					- Rolling back is difficult and time taking. You have to re-deploy the older version again
					- No new instances launched
			3. Rolling with Batch
					- Work with LB only
					- Take even more time
			 		- Elastic Beanstalk launches an extra batch of instances, then performs a rolling deployment. and do it till all replaced.
					- No down time and No capacity redution.
					- Rolling back is easy if first batch itself get failed.
					- Rolling back is difficult for next batches and time taking. You have to re-deploy the older version again.
					- New and old instances both.
			4. Immutable						
					- Work with LB and Single instance both
					- Slowest
			 		- Elastic Beanstalk launches a fresh set of instance and then install new App in them. New will comes to service once the Health checked is passed.
						The new instances are launced in new temporary ASG. once its health check is passed then those are trasfered to existing ASG 
						then temporary ASG is deleted.
					- No down time and No capacity redution.
					- Rolling back is easiest as you just need to terminate thenew instance.
					- New inatances are launched and older ones are terminated once deployment success.
			5. Traffic splitting		
					- A canary testing deployment method.
					- Same as 'Immutable' but keep older istance with old app version alive with few new instance with new app version

	2. Changing Configuration:-
			When you modify configuration option settings in the Configuration section.
			This canges can impact EC2, ELB, ASG etc. There are two kind of changes possible
			1. Changes Do not need Replacement:-
					This are simple and you do not have to worry about downtime and replacement stratagy.
					EG: Changing Healthchech, adding TAg, min/max in capacity etc.
			2. Changes need Replacement
					ANy changes which make changes at Launch Config or VPC level may need to have the replacement instance.
					Here the replacement is must and so you have to decide the replacement stratagy to suit your downtime.
					Replacement Stratagy:-
						There are 4 possible stratagy:-
							1. Rolling Based on Health
								- Work with LB only
								- EB launch the new batch of some instance and roll updates on it. Now wait for their Health check to pass and once passed
									It keep doing this for all the batches till all instnaces are replaced. 
							2. Rolling Based on Time
								- Work with LB only
								- EB launch the new batch of some instance and roll updates on it. Now wait for their given time to elapse and once elapsed
									It keep doing this for all the batches till all instnaces are replaced. 
							3. Immutable updates
								- Work with LB and Single instance both
								- Floow the same stratagy as in App deployment above. 
							4. Disabled 
								- Work with LB and Single instance both
								- Terminates existing instances and replaces them with new instances running with the new configuration.
								- Highest Downtime
---

Platform Update:-
	For minor update like, java 7.1 to 7.2 you can simply do it in console without event inturutting the serice.
	For major one like java 7 to 8, use Blue/Green deployment.

---
Enviorment Url Swap:-
	As you know that a web env in EB has a Enviorment url to access it.
	This url is mapped to the envorment by CNAME record mapping.
	You can swap the url of env1 with env2. The EB take care of canging the CNAME mapping in Route53 for both env.
	You can use this for Blue/Green Deployment.

----

Blue/Green Deployment with Swap:-
	Unlike the deployment mechanichs discuss above, you can create a fully new enviorment by cloning the current enviorment.
	then deploy the new app version on newly made clone env. now swap the url of both env. 

-----------------------------

Config file:-
	You can set the configuration in rhe console but there is better way to do it.
	You can package it in the application code too.
	For this just place **.config files in .ebextenions folder at root of your zipped source code.
	This file are in Json or Yaml formate.
	It ca have
	 - shell command
	 - PAckages to install
	 - enabled services setting
	 - LB config
	 - ASG config
	 
	---------------------
	
	EB for Docker:-
		You can create the env for docker and provide the docker file to run.
		You can either
		1. Run a Single Docker Container on Single EC2.
		2. Or Run a full ECS cluster with ECS service with many Container in it.  
	
-------------
Saving EB Configuration:-
	You can save the current configuration of your enviorment as like a snapshot.
	This is saved in S3.
	Later you can use it to restore the prvious state or to launch another same enviorment from that config.
	This is saved in YAML formate and Mutable. So you can chabge the values in it if you need some cutomization in configuration.

------------------

Source of Configs:-
	In EB there is 4 possible source to set or cahnge the config
	1. Apply directly the EB env via Console, SDK, CLI etc
	2. Saved configuration in S3
	3. Configuration file (.ebextensions)
	4. Defaut values set by AWS.
	
	The prority if higest to lowest downward.

--------

Enviorment Manifest[env.yaml]:-	
	This file lies at root of your source code and can provide the configuration defgail to the EB enviorment.
	It can have configuration like 
	Cname, EnvironmentName, EnvironmentLink, Env Tier[Web/Worker]
	Also have configuration related to resources in the enviormenty
	LT, LCG, LB, ATS etc.

--------
.config in .ebextensions:-
	In this files lies the Yaml formatted configuration diffrent resource like LT, LCG, LB, ATS etc.
	It override the setting in env.yaml
-------

Corn.yml for worker env:
  You can define periodic tasks in a file named cron.yaml in your source bundle to add jobs to your worker environment's queue automatically at a regular interval.

-------
Dockerrun.aws.json: 
  this configuration file is used in multicontainer Docker environments that are hosted in Elastic Beanstalk.

--------------

EB CLI:
 The EB CLI is a command line interface for Elastic Beanstalk that provides interactive commands that simplify creating.
 use eb commands for this.
 this is seperate from aws cli


