When it comes to encryption and decryption the KMS play the central role in AWS ecosystem.
The KMS is more than just a primitive en-dc system. its a complete managed service.
KMS is regional service, means key lie in one region can en-de the resource of that region only.
like s3 object, EBS volume etc.

Its so strongle integrated with other system that with just few setting you can use this to en-dc the file/dat/object of below items
  1. S3
  2. EBS
  3. RDS
  4. Elastic Transcoder
  All of them have few setting in their contextual page to enable disable the en-dc via KMS.
  
  CMK (Customer Master key) :-
    In simple word the key you see or create in console in any tab ('Customer managed keys' or 'AWS managed keys') is a CMK.  
  There is two type of key in AWS-KMS CMK
    1. AWS managed CMK : This is a default key that is generated for you. though you cannot delete/change it at all.
        there is one such key for each aws service for an account. 
        Its key policy written as such that the root user and all the IAM user can do use tis key for 'kms:encrypr' and 'kms:decrypr'
        But root user can do some more operation like 'kms:Get*', 'kms:List'
        But no one (not even root) has permicssion for action 'kms:Delete'.

    2. Customer Managed CMK
        You can create your own keys here and manage its access by the key policy. Just like the BP in S3, there is Key Policy in KMS.
        Key policy define that the key assosiated with it, will be accessible (for what action also) to which IAM users.
        Its key policy written as such that the root user and all the IAM user can do use tis key for 'kms:encrypr' and 'kms:decrypr'
        some user can do some more operation like 'kms:Get*', 'kms:List'
        few user has permicssion for action 'kms:Delete'.
    Actully both kay work 100% same, the only diffrence is one is not at all changable by even root account.


Creating Key :-
  in AWS > Key management system > Customer managed keys > Create Key
  Now provide IMP info for key policy
  Done  
---

 KMS uses key policy the decide rhe access level of any key. 
 you can use User and Role only to assign the permission not USER GROUP (Why? No one know)
 Therer is IMP permission in Key policy that you must provide
    1. Who can manage it what level
        Those who can edit/delet the key
    2. Who can use it for en/dc
        Those who can use this key for en/dc (but not able to delete or edit it)    
  
---  
  How to do the en/dc :-
    there is as usual three way
    1. By SDK
    2. By API
    3. BY AWS-CLI    
    
  Before you do the en/dc by any of those three, the first thing you have too do is Authentication
  And for this either you use Role or IAM-User
    For SDK see #AWS_SDK_AUTHENTICATE in 'AWS JS SDK.txt'
    For API see #AWS_API_AUTHENTICATE in 'AWS API.txt'
    For AWS-CLI see #AWS_CLI_AUTHENTICATE in 'AWS CLI.txt'
    
  
  Encrypting via Customer MAster key (CMK) :-  
    Below is the code that you can use to en/dc the data string with any kay.
    Now this code could be hosted over EC2, Lembda or any non-aws node server.
    to make it working it is must that they are authenticated with proper User/Role who has the permission to use this key for encrypt and decrypt the 
    
          const kms = new AWS.KMS();
          const params = {
            KeyId: '1cee637d-43d9-4329-aa55-59d17c7a4f5f', 
            Plaintext: Buffer.from('Mufazzal Hussain','utf-8') 
          };
          kms.encrypt(params, (err, enData) => {

            console.log("Encrypted--> ", err, enData.CiphertextBlob)

            const params = {
              KeyId: '1cee637d-43d9-4329-aa55-59d17c7a4f5f', 
              CiphertextBlob: enData.CiphertextBlob
            };	
            kms.decrypt(params, (err,deData) => {
              console.log("Decrypted--> ", err, deData.Plaintext.toString('utf-8'))
          });
          
      HEre you can see you need to pass the key-id t=in the function and data or ciphertext for operation.
      The key-id could be belongs to 'Customer Managed CMK' of 'AWS Managed CMK'
      
But there is couple of serious issue with this straightforward approach
  1. most of your data would be encrypted with same key so if somhow the key(CMK) is compromised then its a hell. 
  for this we use 'Envelop Encryption'
      
----

  In many of the services like S3, EBS etc. the KMS is so strongly integrated that you hardly need any coding there.
  It integration with diffrent services should be analyze in their own tutorials.
    
---

  Envolop key / Data key :-
    Envolop key is the key which is use to encrypt and decrypt the key (AWS-CMK key) itself.
    To avoid the scenario where all the data are encrypted with unique CMK. The Data-key comes to picture. The data-key indeed generated 
    by any CMK. but that CMK itself not uised to encrypt data
    it work like this
      1. Generate the data-key with CMK of your choice by 'GenerateDataKey' api or by 'keyring' (for JS sdk)
      2. This will provide you a data-key-object which will have two component
        a. A plain text data key. 
        b. Encrypted data key.
      3. Now encrypt the data with the 'data-key-object' that is generated in step 2
          The function(from any SDK) you here for encryption do the trick, it will encrypt the data with the key (plain text data key)
          and with this encrypted data it will also append the 'Encrypted data key'. So the resulted encrypted envelope will have
            a. The encrypted data - Which can be decrypted only with the plain text data key
            b. The encrrypted data key - which will be decrypted only wih the CMK you used in step 1.
      4.  Now at the time of decryption you will not at all need to provide the data-key because it is already in the envelope
          But you do have to provide the CMK you used in step 1.
          The AWS-KMS system itself can figure out that waht data-key is used for encryption via envelope.
          But For decryption mechanism diffrent SDK take diffrent approches
            JAVA SDK : Here ypu have to first break the encrypted data for data and data-key part, then decrypt the data key first,
                and finally tou decrypt the data with the data key. so most of the hing you have to by yourself.
                and in any step of decryption you not need to re-provide the CMK used in step 1. for more
              - https://github.com/devender/envelope-encryption-aws/blob/55b42f4aca4a20b20e03dbb42915d1ac277b308b/src/main/java/com/gdr/aws/kms/EnvelopeEncryptionService.java#L95
            JS SDK -
                    Code for Envolop enc JS :-

                          const paramsDK1 = { generatorKeyId : 'arn:aws:kms:us-east-1:388412347424:key/1cee637d-43d9-4329-aa55-59d17c7a4f5f' }
                          const keyringEn = new KmsKeyringNode(paramsDK1);
                          console.log('keyringEn -> ', keyringEn);
                          encrypt(keyringEn, "Mufazzal Hussain", { encryptionContext: "blablablabla" }).then((encEnvelope, err) => {
                                const res = encEnvelope.result.toString('base64');
                                console.log("Envolop encrypted Base64String [Data key + Data] -------> ", res);
                                return res;
                          }).then(
                            res => {
                              const paramsDK2 = { generatorKeyId : 'arn:aws:kms:us-east-1:388412347424:key/1cee637d-43d9-4329-aa55-59d17c7a4f5f' }
                              const keyringDc = new KmsKeyringNode(paramsDK2);
                              decrypt(keyringDc, Buffer.from(res, 'base64')).then((decData, err) => {
                                console.log("Decrypted Data  --------> ", decData.plaintext.toString());
                              });
                          });  
 
    
-------------

  Aprt from this tyhe KMS also provide the API ti do this operation. will see it later
  ??????????????????????    
    
       
  ----------------------  
  How ro delete the key:-
    You cant delete the key immediatly but you have to schedule the deletion. Why???????????????
    
  What happen if i encrypt something on S3 or RDS or EBS with some key and later delete it.
  What will happen to my encrypted items
  ?????????????????
  
  
  ------------------------------------
  
  Key Rotation:- 
    You can set the key to rotate it material each year. you ca do it via AWS-console or by code.
    Though key changes ots content but it does keep entry of its older material so if anything is encrypted before the rotation 
    will be decrypted with older vesrion of key.
  
  
  
