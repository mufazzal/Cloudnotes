To create an EC2 with CFR we can use below most basic template-

 "Resources": {
        "MufEC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                  "ImageId": {...}
                  "InstanceType" : {...},
                  "KeyName": {...}
                  "SecurityGroupIds": [...],
                  "UserData": Base64EncodedString
                  ...
                  ...
            },
        }
   }
   
   - They value type is fixed.
   - InstanceType is t2.micro, t2.small etc.
   - If you do not provide the VpcId and SubnetId parameter then EC2 ill be created in default VPC.
   - ImageId is must and this is the one that decide are you going to creat the Linux, Linux64, Unbuntu, Window, Window Server
      you have to get the proper image id here.
      where to get it:-
        AWS > EC2 > Create Instance > 
        On the first you can see all the possible architechure of instances and there image ids.
      Image Id  VS  Instance Type
      Image Id decide weather it is linux, wuindow, ubuntu, linux server etc.
      Instance Type decide the computaton power, t2.micre, t1.small. m1.large etc.
      
      
      Issue with ImageId:-
        You know that AWS is clustered across the region. due to that the image id of same architecre vary across the region.
        so same linux arch can have diffrent image id in diffrent region. or may be in some region that is not at all avilable
        Another issue in same thing is for InstanceType, It may also be possible that a kind of linux has t2.micro in some region
        but m1.large not avialable.
        
        To handle all this it is adviced that you should use imageId as function of Region and Instance type
          imageId = f(AWS::Region, InstanceType)
        
        This function is nothing but a mapping that you ca see in template 'MufCFTemplateEC2'
        
        
       
       User Data: 
        you can pass any boot script here in base64 encoded form.
        Resources: {
         properties {
            "UserData" : 
               { "Fn::Base64" : 
                 { "Fn::Join" : ["", [
                       "#!/bin/bash",
                       "yum update -y"
                       "yum install httd -y"
                  ]]}}
                }       
          } 
        }
        
   
   
   
