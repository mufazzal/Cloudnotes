To create the infra of devops we we go to step by steps

template url - https://github.com/mufazzal/AwsTutoInfra/blob/master/devops/devopsCFT.yaml

Create necessary IAM role and groups
    AWSTutoDevopsUserGroup: They will have the permission to upload the artifact to BuildRepository
    This guys are developers who will push the build to S3
    AWSTutoDevopsPolicy: The policy attach the AWSTutoDevopsUserGroup

    AWSTutoCodeDeployRole: This is the service role for codedeploy group (AwsTutoCodeDeployGroup). this will have all necessary permission to 
    perform opration while deployment
        This has two IP things:
            1. AssumeRolePolicyDocument: This tells us that what AWS service (like EC2, lambda, codedeploy)
                can entitle to have this role
            2. ManagedPolicyArns: The AWS provide us the prebuild manage policy with all the necessary permission
                for deployment that is 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
    AwsTutoCodePipelineRole: This service role will be for the codepipeline (AwsTutoCodeDeployPipeLine) that we will create later.
    This role will grant the codepipeline to perform necesarry actions like
    checking s3 for new build, initiate deployment etc. 
     


S3 setup:-
    BuildRepository: This is the repo on wchich the zip of the build will be uploaded, later the CodePipeline
    'AwsTutoCodeDeployPipeLine' will use this repo to detect if new artifact uploaded and if yes then 
    begin its deployment.
    AWSTutoRepoBucketPolicy: this is the bucket policy for build repo on S3 (BuildRepository).
    I have not restricted anything here but you can restrict who and how can access this bucket or not.
    IMP: This bucket must must has versioning enabled.

CodeDeploy:-
    Now we will create the necessary setup for deployment 
    AwsTutoFrontEndCodeDeployApp: This is the application for deployment
        > choose ComputePlatform = 'Server' for EC2/ON-Premises
        Simillar to #CDCREATION step 5 in  CodeDeploy.txt
    AwsTutoCodeDeployGroup: This is the main configuration setting for deployment
        Simillar to  #CDCREATION step 6 in  CodeDeploy.txt
        The step 6 contains many substeps that is simillar to all the properties lies in AwsTutoCodeDeployGroup
        EG 
        step 6.2 == ApplicationName
        step 6.3 == ServiceRoleArn
        step 6.4 == DeploymentStyle: This is used to set the In-Place or BG deployment. default is inplace
            PRoblem in the Cloudformation is that it support BG deployment only for Lambda. Thats why we select IN_Place here
            Later we have to set this to BG manually in AWS console
            Also If you wnats to have a LB attcahed in step 6.7 then set  DeploymentStyle.DeploymentOption = WITH_TRAFFIC_CONTROL
            not for EC2. So for now we will select the In-Place then we have to edit this deployment group
            later to adjust it for EC2.
        step 6.5 == AutoScalingGroups OR Ec2TagSet: Here we tells that in which EC2 we need the deployment.
            we can either set the ASG or EC2 tag     
            I have used 'AutoScalingGroups' to select the EC2 for deployment and set it from parameter 
            so that user can choose the ASG (FrontEndAutoScalingGroup) by himself.   
        step 6.7 == LoadBalancerInfo: Set load balancer for traffic control.
            set the value of LoadBalancerInfo.LoadBalancerInfo for classic LB OR LoadBalancerInfo.LoadBalancerInfo Target Group (for App Load balancing)
            We will ask user for target group (FrontEndELBTG) at the time of stack creation 
        step 6.6 == DeploymentConfigName

Now you have CodeDeploy Group ready for you, but this is set for IN_Place, because cloudformation + Cededeploy yet not
support the BG for EC2/OnPremise. so we have to set it manually in AWS console.
    After stck creation go to AWS console > CodeDEploy > 'Front End Application' > 'AWSTutpDEploumentGroup' > Edit 
    Now set the deployment type to Blue/Green.
    Done

    AwsTutoCodeDeployPipeLine: This is the final step to create the pipeline.
        This is very much self explainatory.
        ArtifactStore: This is the location on which the codepipeline will poll for new build. in our case it is S3 bucket BuildRepository 
        RoleArn: role we create at AwsTutoCodePipelineRole
        Stages: This is the diffrent stages that run one after another.
        in our case it is.
            first download the build from S3 
            second run the codedeploy app 'AwsTutoFrontEndCodeDeployApp' with this new build 
        BuildObjecKey: This input parameter will be taken from user at the time of stack creation which 
        tell that what is the key (BuildObjecKey) of the build that will be consider as build artifact

  
