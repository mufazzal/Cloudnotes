For Auto Scalling we need to set the two part
1. Launch Configuration
2. ASL Group



For Launch Config see below template, In this observer for 'Launch Configuration' you will need a SG and for SG you need to make sure 
that the correct VPC is selected (if not then it goes to default)
Below will create a SG and Launch Config in aws.
IMP: in launch config you do not set VPC or Subnet. This will be taken care in ASG.

{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {},
    "Resources": {
        "EC2SG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SG for EC2",
                "VpcId": {
                    "Ref": "MufVPCID"
                },
                "SecurityGroupIngress": {
                    "FromPort": 80,
                    "ToPort": 80,
                    "IpProtocol": "tcp",
                    "CidrIp": "0.0.0.0/0"
                }
            }
        },
        "EC2LAunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": true,
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "MufInstanceType"
                },
                "KeyName": {
                    "Ref": "MufKeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "EC2SG"
                    }
                ]
            }
        }
    },
    "Parameters": {
        "MufVPCID": {
            "Type": "AWS::EC2::VPC::Id"
        },
        "MufInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "MufKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "AMI": "ami-0323c3dd2da7fb37d"
            }
        }
    }
}


Above we have created the Launck Configuration, the next step is creating the Auto Scalling Group (ASG)
   Most basic syntex for creating the ASG.
                "MyServerGroup" : {
                   "Type" : "AWS::AutoScaling::AutoScalingGroup",
                   "Properties" : {
                      "AvailabilityZones" : { "Fn::GetAZs" : ""},
                      "LaunchConfigurationName" : { "Ref" : "EC2LAunchConfig" },
                      "MinSize" : "1",
                      "MaxSize" : "3",
                   }
                }   
      The above code will create the simple ASG with launch cofig 'EC2LAunchConfig'. it will create 1 EC2 instance immediatly in it.
      
      This get tricky when we wants to create the EC2 in diffrent 
      For this you have to provide 'VPCZoneIdentifier', which contains the ids of subnet. (you do not need to give VPCId as it will be determine by subnetid directly)
      Also you sould take care that the list Availability Zones provided in 'AvailabilityZones' should have those subnet.
      Its better that you should either 'AvailabilityZones' or 'VPCZoneIdentifier'
      'VPCZoneIdentifier' for non-default VPC
      'AvailabilityZones' for default one

       Below template will create and SG, LaunchConfiguration and ASG setup in non-default VPC.
       
            {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Metadata": {},
                  "Resources": {
                    "EC2SG": {
                        "Type": "AWS::EC2::SecurityGroup",
                        "Properties": {
                            "GroupDescription": "SG for EC2",
                            "VpcId": { "Ref": "MufVPCID" },
                            "SecurityGroupIngress": {
                                "FromPort": 80,
                                "ToPort": 80,
                                "IpProtocol": "tcp",
                                "CidrIp": "0.0.0.0/0"
                            }
                        }
                    },               
                    "EC2LAunchConfig": {
                        "Type": "AWS::AutoScaling::LaunchConfiguration",
                        "Properties": {
                            "AssociatePublicIpAddress": true,
                            "ImageId": {"Fn::FindInMap": ["RegionMap",{"Ref": "AWS::Region"}, "AMI"]},
                            "InstanceType": {"Ref": "MufInstanceType"},
                            "KeyName": {"Ref": "MufKeyName"},
                            "SecurityGroups": [{ "Ref": "EC2SG"}]                            
                        }
                    },
                    "ASGEC2": {
                        "Type": "AWS::AutoScaling::AutoScalingGroup",
                        "Properties": {
                            "AutoScalingGroupName": "ASG_for_EC2",
                            "LaunchConfigurationName": {
                                "Ref": "EC2LAunchConfig"
                            },
                            "MaxSize": 3,
                            "MinSize": 1,
                            "VPCZoneIdentifier": {
                                "Ref": "MufSubnetIdForWebServers"
                            }
                        }
                    }
                },
                "Parameters": {
                    "MufVPCID": {
                        "Type": "AWS::EC2::VPC::Id"
                    },                
                    "MufSubnetIdForWebServers": {
                        "Type": "List<AWS::EC2::Subnet::Id>",
                        "MinLength": 2,
                        "Description": "Select the Subnet for EC2 WebServer(This is behind LB so private subnet is more secure)"
                    },
                    "MufInstanceType": {
                        "Description": "EC2 instance type",
                        "Type": "String",
                        "Default": "t2.small",
                        "AllowedValues": [
                            "t2.micro",
                            "t2.small",
                            "t2.medium"
                        ],
                        "ConstraintDescription": "must be a valid EC2 instance type."
                    },
                    "MufKeyName": {
                        "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
                        "Type": "AWS::EC2::KeyPair::KeyName",
                        "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
                    }
                },
                "Mappings": {
                    "RegionMap": {
                        "us-east-1": {
                            "AMI": "ami-0323c3dd2da7fb37d"
                        }
                    }
                }
            }       


Scaling Policy:-
    In above template you cannot see the Scalling policy which can set the criterion for scalling up and down.
    Configuting this in AWS console is easy but here it is tricky.
    You need create the cloudwatch alarm and in that alarm you need to give refrence of the ASG. 
       for detail:  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html

ASG and LB in Cloudformation:-  
    As like in AWS console you can here also also set to launch the EC2 behind any LB. for this 
    - For Classicloadbalanced:-
        use 'LoadBalancerNames'
    - For Application and Network LB :-
        Simply connect the Auto Scalling Group (ASGEC2) with the Target Group of load balancer (LBTRG)
        So in ASGEC2 add below property.
            "TargetGroupARNs": [{"Ref": "LBTRG"}]
            





