To create the LB via CFR you need to work on three parts, just like you create the LB via aws console.

Part 1. Create Target Group just like step 8 [Routing/Target Group: ] in LB.txt
Part 2: Create the LB itself
Part 3. Create Listener for LB just like step 5 [Listener ] in LB.txt


Creating Target Group:-
    Target Group tell the LB about which EC2 he need to forward the traffic and How(por and protocol)
    We can either the Add the EC2s in it or set some ASG as such that the ASG launch and add the EC2 here.
    we can also leave it empty so that the developer add the EC2 later.

    this target group will be created but it will remain empty and not attached to any LB,
    In part 3 we will see how we can attach it to Listener of LB
    For adding EC2: its not possible here, LB do not care is there any EC2 behind it or not.
      Best way is too create an ASG and set ASG in such a manner that the EC2 will be added to this target Group after invokation.
    Code:-  
            "LBTRG": {
                  "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                  "Properties": {
                      "Port": 80,
                      "Protocol": "HTTP",
                      "VpcId": { "Ref": "MufVPCID" }
                  }
              },    

Create the LB:
  The LB in itself held very few info.
  You must set it Security Group as such that it allow all the inbound internet traffic.
  you also need to set what subnet he should transfer the traffic. later the deveper has to take care that EC2 are in those subnets.
  this subnet must lie in diffrent AZ.
            "MALB": {
                  "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
                  "Properties": {
                      "Name": "LBForEC2Webserver",
                      "SecurityGroups": [{ "Ref": "ALBSG" }],
                      "Subnets": { "Ref": "MufSubnetIdForWebServers" }
                  }
                }
              }  
              
         
The targer Group (LBTRG) and LB (MALB) created in part 1 and 2, both are independent of each other.
now with the listener we will connect them both.

Craeting Listener:- 
   This will tell the LB that what kind of traffic he has to listen and then how and where he need to route it.
          "LBLIS": {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "DefaultActions" : [ Action, ... ],
                "LoadBalancerArn" : {"Ref": "MALB"},
                "Port" : 80,
                "Protocol" : "HTTP",
              }
          }     
   
   LoadBalancerArn: the arn of load balancer you created in 'Part 2'
   Port and Protocol: the traffic that LB should listen.
   IMP Note: for Applicatiob load balancer 'AWS::ElasticLoadBalancingV2::Listener' only accept the the protocol HTTP/HTTPS not TCP.  
   IMP Note: The Port:Protocol of listenet and target group must match. so here you can use only HTTP/HTTPS
   DefaultActions: What to do to the traffic coming from mentioned port and protocol and where to rote it.
    The typical formate of DefaultActions is mentioned below
    this syas that   forward the traffic to Target group 'LBTRG' that we created in 'part 1'
               "DefaultActions": [{
                        "Type": "forward",
                        "TargetGroupArn": { "Ref": "LBTRG"}
                 }]   
    Listener is the most imp part in here. This connect the Target Group(LBTRG) of Part 1 and the Load Balancer(MALB) of part 2.
    
  
  Below template will create a simlple LB infrastrucure with
  1. SG for LB
  2. A target group for LB
  3. Listener for LB
  4. LB
  
  
 {
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {},
    "Resources": {
        "ALBSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SG for ALB",
                "Tags": [
                    {
                        "Key": "example_key",
                        "Value": "example value 11"
                    }
                ],
                "VpcId": {
                    "Ref": "MufVPCID"
                },
                "SecurityGroupIngress": {
                    "FromPort": 80,
                    "ToPort": 80,
                    "IpProtocol": "TCP",
                    "CidrIp": "0.0.0.0/0"
                }
            }
        },
        "LBTRG": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Port": 80,
                "Protocol": "HTTP",
                "VpcId": {
                    "Ref": "MufVPCID"
                }
            }
        },
        "LBLIS": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Port": 80,
                "Protocol": "HTTP",
                "LoadBalancerArn": {
                    "Ref": "MALB"
                },
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "LBTRG"
                        }
                    }
                ]
            }
        },
        "MALB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": "LBForEC2Webserver",
                "SecurityGroups": [
                    {
                        "Ref": "ALBSG"
                    }
                ],
                "Subnets": {
                    "Ref": "MufSubnetIdForWebServers"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ce2f77ab-2340-4f5d-a084-33ff7d068236"
                }
            }
        }
    },
    "Parameters": {
        "MufVPCID": {
            "Type": "AWS::EC2::VPC::Id"
        },
        "MufSubnetIdForWebServers": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "MinLength": 2,
            "Description": "Select the Subnet for EC2 WebServer(This is behind LB so private subnet is more secure)"
        },
        "MufInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "MufKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "AMI": "ami-0323c3dd2da7fb37d"
            }
        }
    }
} 
  
          
