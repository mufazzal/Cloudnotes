The cloudforamation in simple word is "Infra AS Code"

This is the way to w4rite complete inra in Jsom or Yaml file. You can write the file or use AWS designer for this.
You can design  EC2, S3, RDS etc with this.
Once the templatebjson or Yaml is created, it can be used anywhere to build whole infra out of this template. 
Its impossible to become master in clouformation and know how cloudformation template can be designed to make EC2, S3 etc.
But you should know the fundamentals

To understand the CloudFormation always remebper there is two party 
one is Creator, who create the template
other is Builder who is building the stack out of template

Creatore create the template as such that the tempplate
has definations of RESOURCES like EC2, S3 etc
has some MAPPING, which are like a function which take one input and return the set of label
has some PARAMETER which are set by Builder at a time of stack building
has OUTPUT, which are final logs of stack creation



Structure of template file:-
  The empty Skeleton:-
          {
          "AWSTemplateFormatVersion" : "version date",
          "Description" :  "JSON string",
          "Metadata" :    { template metadata },
          "Parameters" :  { set of parameters },
          "Mappings" :    { set of mappings },
          "Conditions" :  { set of conditions },
          "Transform" :   { set of transforms },
          "Resources" :   { set of resources },   ----> Only the trequired item, all other are optinal.
          "Outputs" :     { set of outputs }
        }

  In the cloud formation template has below part
  1. AWSTemplateFormatVersion: This has the constante value '2010-09-09'
  2. Description: optional
  3. Resource:-
      This is most imp part of tempalte file. it has defnation of resorce like EC2, s3 and its configuration also.
      
      The basic struture of the Resouce remain same across all the services that is
            "Resources" : {
                "Logical ID" : {
                    "Type" : <Resource type>,
                    "Properties" : {
                        Set of properties
                    }
                }
            }      
      Logical ID: this is used to refer the resource created by this configuration. You can use this 'Logical ID' anywhere in the
        template for refrencing this resource.
      Type: This tells that what kind of resource it is. like EC2 or S3 or what. This is must to provide
        EG: for EC2 type Resource type will be 'AWS::EC2::Instance', for S3 AWS::S3::Bucket etc.
      Properties: depending on what type you chossed in 'Type', you need to provide some set of properties to create that resource
        EG. for EC2 you must provide imageId, tags, instance-type.      
      
        Diffrebt S3 services has diffrent set of properties. Its impossible to remeber them all.
        But for refrence best is to look at-
          https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
               
   4. Mapping:-
      In the template the mapping are the function which take a string key and reyurnkey as input and value againt that key and returnkey. 
      In the template you call this function to get some value based on certain condition. you have to pass what kay and inside that key what returnkey you wants to get.
      The structure of Mapping is like this in template
            MApping {
                Map1 : {
                      key1: {
                          "retKey1": "in Map1->key1->retKey1"
                          "retKey2": "in Map1->key1->retKey2"
                          "retKey3": "in Map1->key1->retKey3"
                      },
                      key2: {
                          "retKey1": "in Map1->key2->retKey1"
                          "retKey2": "in Map1->key2->retKey2"
                          "retKey3": "in Map1->key2->retKey3"
                      }
                      key3: {...}
                      key4: {...}
                      key5: {...}
                },
                Map2: {.....}
                Map3: {.....}
            }  
       Syntex:-
          outputVar: { "Fn::FindInMap" : [ <MapName>, <TopLevelKey>, <ReturnKey>] }
          EG.
          outputVar: { "Fn::FindInMap" : [ Map1, key1, retKey1] } 
            set the value of outputVar as "in Map1->key1->retKey1"
          outputVar: { "Fn::FindInMap" : [ Map1, key2, retKey1] } 
            set the value of outputVar as "in Map1->key2->retKey1"        
          outputVar: { "Fn::FindInMap" : [ Map1, key2 retKey3] } 
            set the value of outputVar as "in Map1->key2->retKey3"            

      EG:
            "Mappings" : {
              "GetPersonData" : {
                  "Mufazzal"        : { "AGE": 32, "City" : "pune"},
                  "Murtuza"         : { "AGE": 22, "city" : "indore"},
               },
               GetVillageData: {
                  "Barna"         : { "Name": "Barnagar", "Dist" : "Dhar"},
                  "Badna"         : { "Name": "Badnawar", "Dist" : "Ujjain"},
               }
             }

              How to call it:-
              use this syntex-
                              { "Fn::FindInMap" : [ "MapName", "TopLevelKey", "key ypounts in return"] }
              EG-
                 "perAge" :  { "Fn::FindInMap" : [ "GetPersonData", "Mufazzal", AGE]},
                 
              In the calling we are calling the function 'GetPersonData' passing the param 'Mufazzal' and asking to returm label 'AGE'
              so it wil return 32.
              
  5. Imnput Parameter:-      
         This is where the Creator define the defination of some inputs. when the builder create the stack from the template.
         Builder would be asked to provide this inputs valye via UI.
         This parameter could be anything. So builder could be asked to
          - Give a simple string or Number[a input box will be shown]
          - A value from set of predefined one [dropdown will be shown]
          - Thers is some AWS Resource oriented
            - Key pair for SSH [the dropdown with key pair defined in that region by userm he need to selecty one]
            - Security group [the dropdown with Security group defined in that region by userm he need to selecty one]
            - VPC, Subnet, etc.
              more : https://aws.amazon.com/blogs/devops/using-the-new-cloudformation-parameter-types/
           
           EG:- say you wants the user to choose the instance type and assign it value in 'MufInstanceTypeParameter'
                
                  "Parameters" : {      
                    "MufInstanceTypeParameter" : {
                      "Description" : "WebServer EC2 instance type",
                      "Type" : "String",
                      "Default" : "t2.small",
                      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small"],
                      "ConstraintDescription" : "must be a valid EC2 instance type."
                    },      
                  }
           

          One more EG:-
                      "Parameters" : {      
                        "MufKeyName" : {
                          "Description": "Name of SSH KeyPair"
                          "Type" : "AWS::EC2::KeyPair::KeyName",
                        },      
                      }       
           This will prompt the builder with dropdown and ask to select the SSH key pair.
            Another Eg: to select the VPC and sunnet-
                     "MufVPCID": { "Type": "AWS::EC2::VPC::Id" },
                      "MufSubnetId": { "Type": "AWS::EC2::Subnet::Id" },            
                In yaml-
                      MufVPCID:
                        Type: 'AWS::EC2::VPC::Id'
                      MufSubnetId:
                        Type: 'AWS::EC2::Subnet::Id'    
           
           logicalName of Input-Paramenter:-
              MufInstanceTypeParameter, MufKeyName is the Logical Name of Input Param. This can be used to refer this parameter in elsewhere in template.
           How would you use this values in template?
                      ...
                      "InstanceType" : { "Ref" : "MufInstanceTypeParameter" },
                      "KeyName" : { "Ref" : "MufKeyName" },
                      ...    
                  In Yaml
                      VpcId: !Ref MufVPCID
                      KeyName: !Ref MufInstanceTypeParameter
      
        
         There are many way to write such defination for more go to google.
    
    6. Outout:-
        Here you define what output log the builder will see once the stack is created. This is where you should let the builder know 
          some imp info about created stack like any public IP or DNA name of EC2
        Syntex
                    "Outputs" : {
                      "Logical ID" : {
                        "Description" : "Information about the value",
                        "Value" : "Value to return",
                      }
                    }        

          EG:-
           "Outputs" : {
              "PublicDNS": {
                  "Description": "Public DNSName of the newly created EC2 instance",
                  "Value": { "Fn::GetAtt": [ "MufEC2Instance", "PublicDnsName" ] }
              },
            }
         It will show a pair in which the key is 'PublicDNS' and value is the DNS name of EC2 instance 'MufEC2Instance' 
         in yaml:-
              Value:
                - !GetAtt "MufEC2Instance.PublicDnsName"
        
---

  Intrinsc Function:- 
    The tempate of cloudformation support some intrinsic function. This function can be used to perform certain operation in template items.
    thers it around 10 such function
          Fn::Base64
          Fn::FindInMap
          Fn::GetAtt
          Fn::GetAZs
          Fn::Join
          Fn::Select
          Fn::Split
          Ref
          Condition Functions
              Fn::And
              Fn::Equals
              Fn::If
              Fn::Not
              Fn::Or    
              
        There is couple of more function which not mentioned, above are most used one
        How to use it In JSon
            outputParam: {<NAme Of the Function> : <parameters to pass>}
            Here the passed parameters could be an array, string etc.
            
          Join-
              ...
              allName: {"Fn::Join" : [ "+", [ muf, hus, mur ] ]
              ...
            Output is the final value of allName is 'muf+hus+mur'
          
          Base64:-
            data: { "Fn::Base64" : "Mufzzal Hussain" }
            the value data finally be 'jfklajjhjkasldjioaasd=='
        
          For more : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html
          
       Fn::FindInMap :-  
          This one is one of the most user intrinsic function in template. This used to call the mapping function declared in 'Mapping'
            Section of tempplate. This function take 3 input
            - MapName:      Name of the Mapping(declared in Mapping section of template) that you wants to use    EG. Map1, Map2, Map3
            - TopLevelKey:  This is they key that against you wants to get the mapped item                        EG. key1, key2, key3 
            - ReturnKey:    The item mapped against the 'TopLevelKey' also has key in it. mention here that key.  EG. retKey1, retKey2, retKey3
      
       Fn::GetAtt:-
          This also useful function. This function ruturn you some attribue of the Resorces in the template.
          you have to provide the Logical Id of the resource for this and the name of the attribute you wants to get.
          Syntex:-
             outVar: { "Fn::GetAtt" : [ <logicalNameOfResource>, <attributeName> ] }
             outVAr: { "Fn::GetAtt" : [ "MufEC2Instance",        "PublicDnsName" ] }
 
 
    Ref:-
        This is the utmost used one. This functions behavior is depend on what formal-parameter are passed in this function
        Syntex:-
          { "Ref" : <logicalName of Resorce or Paramenter> }
        If logican name of Parameter(pseudo or Input) is given then it will return the value of that param
                "KeyName" : { "Ref" : "MufKeyName" }   
                "myRegion" : { "Re : "AWS::Region" }
        if a logical name of resource is given then it will returns a value that you can typically use to refer to that resource like instance physical C2, BucketUrl for S3
                "InstanceIdVar { "Ref" : "MyEC2Instance" }
---

  Pseudo Parameters:-
    DO not confuse it with 'Input Parameter' discussed eariier
    In simple world this are the Enviorment Variable. This parameter is set by the AWS system itself.
    This is quite same as 'Input Parameter', in 'Input Parameter' you give user the control to set value of the parameter
    In 'Pseudo Parameters' its value set by the AWS itself.
    
    Some widely used Pseudo Parameters are:-
      AWS::Region
      AWS::StackId
      AWS::StackName
  AWS set its values at runtime, at the time if creation of stack.
  
  How to use it:-
    It way to use is 100% same as the 'Input Parameter'
      location : { "Ref" : "AWS::Region" },
    location will be the region in which the stack is created.      
         
        
--------

What happen if eroor occure:-
  By default entire stack will be rolled back. thoug you can change it and let all the resources retained.
  for this chnage the option at 'Rollback on failure' option while creating stack.
          
--------

Template designer:-
  The fastest and easiest way to create a template is to use template builder of AWS.
  its so simple with drag drop and fir refrence always use sample template.
          
---------
  RTefering diffrent element in remplate:-
    for tjhis you can use 'Ref'
    EG:-  
      Ref <WHATEVER>     :> will refer to WHATEVER, which could be a EC2 isntance, SecurityGroup, S3 Bucket, simple string,
                            keypair, region.

--------
Elastic Beanstalk VS CloudFormation
CloudFormation a great grand father of Elastic Beanstalk.
ELB is not programmable meaning you set up an preconfigured application either for hello world or with existing code (war/zip)
CloudFormation is the soluction where you can change, create, delete, update all the diffrent parts(EC2, S3 ..) of your app. Its completely programmable.

-----------------
EG: see the file resources/MufCFTemplateEC2 file which is clouformation template file for invoking the ED2 and let user select 
  vpc, sunbnet, type et.
      
--------------------

Update Stack:-
  When we say Cloudformation is lime infrasturcture as code. 
  We know we keep making chages in code. but how underline infrascture cope with it.
  If you need to make changes in infrastruture then you need to first make the change in CF template.
  Then
  Either you ca delete the existing stack and create new one with new template but this is impractical. for any small or big change if
  we keep deleting and re-creating the stack then whole system will be unstable.
  
  Best way is to update one:-
    Steps to update:- 
      1. get the updated CF template in s3 or in PC.
      2. AWS > CloudFormation > stacl > Select you stack > Update
      3. Follow almost the same process as like creation.
      Only thing is that it will be in edit mode now.
      
  
  Change Set:
    Biggest risk of updating the stack is that you may mistakenly end up lossing couple of resources or change something unexpectadly
    To sole this comes a 'Change Set'
    This is nothing but way to look what resource will be impacted and how if you update the stack with new CFL template
    
    Step:-
      1. get the updated CF template in s3 or in PC.
      2. AWS > CloudFormation > stacl > Select you stack > Stack Action > Create change set for Stack
      3. Select the template of step 1, the new template 
      4. Next > next for page of imput paramenter. change if you wants.
      5. Finall put name of Change set
      6. press Create Changeset
      7. Now at next page you will be able to see what resources will be changed 
          who will be deleted, will be replaced, will be added etc. it may also be possible 
          that AWS not able to detemine what will chage on particulare resource. in that case you will see 'Conditional'
          You can see overall impact here on the stack.
      Nothing on the Stack will be actully changes here. it only find that what could be change if we execute the new template over this stack.
    
    
      
   When you update the stack with new template then for each resource the CF will do one of the following
   - Replace the existing resource with new one if change in the template is as such
          EG: instance type of EC2 is changed from t2.micro to t2.small
   - Modify the existing resource if change in the template is as such
          EG: a new tag added to EC2
   - Add a new resource if there is one in template but not in stack
   - Delete the one if it is in stcak but not in template
  
      
-----------
  
  Resource Attribute:-
    CFR provide some speciale attribute that can be use to make behavioral of resource creation/delete/update by stack.
    Creation Policy:-
      This can be used to define the stste when we can consider the resource to be created.
      Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete 
      until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded 
      CloudFormation resources that support creation policies are 
        AWS::AutoScaling::AutoScalingGroup, 
        AWS::EC2::Instance, and 
        AWS::CloudFormation::WaitCondition.

    Deletion Policy:-
      With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. 
      You specify a DeletionPolicy attribute for each resource that you want to control. 
      If a resource has no DeletionPolicy attribute, AWS CloudFormation deletes the resource by default.
      [This policy comes in picture when stack is deleted not when stack is updated anddue to update the underline resource is delted]
      DeletionPolicy options:-
        Delete: This is default value
        Retain: AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted
        Snapshot: For resources that support snapshots, AWS CloudFormation creates a snapshot for the resource before deleting it.
        Resources that support snapshots include:
            AWS::EC2::Volume
            AWS::ElastiCache::CacheCluster
            AWS::RDS::DBCluster
            AWS::RDS::DBInstance


------

StakeSet:-
  You can use StackSet _ AWS Organization to deploy the AWS resources in multipls member AWS account and region in one go.
  Using an administrator account of an "AWS Organization", you define and manage an AWS CFR template, 
    and use the template as the basis for provisioning stacks into selected target accounts of an "AWS Organization" across specified regions
-------

Nested Stack:-
  You can use stack whithine a stack.
      Type: AWS::CloudFormation::Stack
      Properties: 
        NotificationARNs: 
          - String
        Parameters: 
          Key : Value
        Tags: 
          - Tag
        TemplateURL: String
        TimeoutInMinutes: Integer
  
  TemplateURL:- This is S3 url where the template is stored.
  
--------
Input PAram type:-  
  Number
  String
  List<Number>  ["12", "34". "343"]
  CommDelilatedList ["asdasd", "asdasd", "qwewe"]
  SSM Parameter: Systems Manager Parameter Store 
  AWS-Specific Parameter:  EG 'AWS::EC2::AvailabilityZone::Name', AWS::EC2::KeyPair::KeyName ..etc
  
-------

Export Import value:-
  In CFR templates 'Outputs' patrams, you can use Export wheare you can export some values which later can be used in other CFL template of same region and account.
  This is very useful for cross refrncing the templates.
  EG:- 
  Exporting
    Outputs:
      PublicSubnet:
        Value: !Ref: PublicSubnet
        Export: !Name: 'mufUnqName'
  Importing
    GroupSet:
      - !ImportValue: 'mufUnqName'  


------
Conditions:-
  You use conditions to decide wheather or not create the resource
    Conditions:
      ShouldCreateProdRes:
        !Equals
          - !Ref Env
          - prod
Resources:
  CDPVpcEndpoint:
    Condition: ShouldCreateProdRes     
    Type: AWS::EC2::VPCEndpoint
    Properties: ...
------
IMP
  ### For Amazon S3 buckets, you must delete all objects in the bucket for deletion to succeed


TODO: 
    Set cloudwatch alarm for stack creation
    Creation Policy
    Deletion Policy
    DependsOn



