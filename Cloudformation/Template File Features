
Intrinsc Function:- 
  The tempate of cloudformation support some intrinsic function. This function can be used to perform certain operation in template items.
  thers it around 10 such function
        Fn::Base64
        Fn::FindInMap
        Fn::GetAtt
        Fn::GetAZs
        Fn::Join
        Fn::Select
        Fn::Split
        Ref
        Condition Functions
            Fn::And
            Fn::Equals
            Fn::If
            Fn::Not
            Fn::Or    

      There is couple of more function which not mentioned, above are most used one
      How to use it In JSon
          outputParam: {<NAme Of the Function> : <parameters to pass>}
          Here the passed parameters could be an array, string etc.

        Join-
            ...
            allName: {"Fn::Join" : [ "+", [ muf, hus, mur ] ]
            ...
          Output is the final value of allName is 'muf+hus+mur'

        Base64:-
          data: { "Fn::Base64" : "Mufzzal Hussain" }
          the value data finally be 'jfklajjhjkasldjioaasd=='

        For more : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html

     Fn::FindInMap :-  
        This one is one of the most user intrinsic function in template. This used to call the mapping function declared in 'Mapping'
          Section of tempplate. This function take 3 input
          - MapName:      Name of the Mapping(declared in Mapping section of template) that you wants to use    EG. Map1, Map2, Map3
          - TopLevelKey:  This is they key that against you wants to get the mapped item                        EG. key1, key2, key3 
          - ReturnKey:    The item mapped against the 'TopLevelKey' also has key in it. mention here that key.  EG. retKey1, retKey2, retKey3

     Fn::GetAtt:-
        This also useful function. This function ruturn you some attribue of the Resorces in the template.
        you have to provide the Logical Id of the resource for this and the name of the attribute you wants to get.
        Syntex:-
           outVar: { "Fn::GetAtt" : [ <logicalNameOfResource>, <attributeName> ] }
           outVAr: { "Fn::GetAtt" : [ "MufEC2Instance",        "PublicDnsName" ] }


  Ref:-
      This is the utmost used one. This functions behavior is depend on what formal-parameter are passed in this function
      Syntex:-
        { "Ref" : <logicalName of Resorce or Paramenter> }
      If logican name of Parameter(pseudo or Input) is given then it will return the value of that param
              "KeyName" : { "Ref" : "MufKeyName" }   
              "myRegion" : { "Re : "AWS::Region" }
      if a logical name of resource is given then it will returns a value that you can typically use to refer to that resource like instance physical C2, BucketUrl for S3
              "InstanceIdVar { "Ref" : "MyEC2Instance" }
---

Pseudo Parameters:-
  DO not confuse it with 'Input Parameter' discussed eariier
  In simple world this are the Enviorment Variable. This parameter is set by the AWS system itself.
  This is quite same as 'Input Parameter', in 'Input Parameter' you give user the control to set value of the parameter
  In 'Pseudo Parameters' its value set by the AWS itself.

  Some widely used Pseudo Parameters are:-
    AWS::Region
    AWS::StackId
    AWS::StackName
AWS set its values at runtime, at the time if creation of stack.

How to use it:-
  It way to use is 100% same as the 'Input Parameter'
    location : { "Ref" : "AWS::Region" },
  location will be the region in which the stack is created.      

Giant String with Pipe:-
You can use the | for mutiline string and also can use the params also in it
Value: |
  my Name is ${namme}
  The engineer
  in amdocs ${city}
  the region is ${AWS::Region}

------------------------


Export Import value:-
  In CFR templates 'Outputs' patrams, you can use Export wheare you can export some values which later can be used in other CFL template of same region and account.
  This is very useful for cross refrncing the templates.
	- Cross refrencing work only withine the same region. You can use output ofsatck in regio-1 in region-2s stack as input.
	- You cannot delete the stack if one of its output is refer by other stack as its input.
	- You cannot delete/Modify the Output if one that Output key is refer by other stack as its input.
	
  EG:- 
  Exporting
    Outputs:
      PublicSubnet:
        Value: !Ref: PublicSubnet
        Export: !Name: 'mufUnqName'
  Importing
    GroupSet:
      - !ImportValue: 'mufUnqName'  


------
Conditions:-
  You use conditions to decide wheather or not create the resource
    Conditions:
      ShouldCreateProdRes:
        !Equals
          - !Ref Env
          - prod
Resources:
  CDPVpcEndpoint:
    Condition: ShouldCreateProdRes     
    Type: AWS::EC2::VPCEndpoint
    Properties: ...


-------------------

Custom Resource:-
  You can use cutom resource to do followin
  1. Create resource for service not supported by cloudformation
  2. Create on premise resource
  3. Empty content of S3 bucket before cloudformation delete it. 
  Syntex:-  
    Resources:
      BucketCleaner:
        Type: Custom:cleanupbucket
        properties:
          ServiceToken: <the ARN of lambda or SNS topic>
          MufKeyBucketName: <name of bucket to emty>
          key2: ...
          ke3: ...
    From the lambda you have to return a proper value to define if execution successful or not.
		Custom resource provider: 
			THis is the entity define the logic, how the resource will be created. Its ARN provided by ServiceToken.
			Currently Lambda and SNS support it.
			You will have to define the logic for CREATE. UPDATE, and DELETE of this resource. 
			In the input param [event in case of lambda] you will have 
				- Request Type [CREATE or UPDATE or DELETE]
				- LogicalId, Stack name etc.
				- Custom key like ke1, key etc.
				- a presign url, You can use this url to send SUCCESS or FAILED signal for the given operation.
			The ouput of this logic must have
				- Status [SUCCESS or FAILED]
				- Reason [only if status= FAILED]
				- StackId, RequestId, LogicalResourceId
				- PhysicalResourceId: 
							This is the unique id for the resource. 
							If you return the changed value then the replacement is considered. and the delete request will be executed for this resource next.
				
----------------------
  
Resource Attribute:-
	CFR provide some speciale attribute that can be use to make behavioral of resource creation/delete/update by stack.
	Creation Policy:-
		This can be used to define the stste when we can consider the resource to be created.
		Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete 
		until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded 
		CloudFormation resources that support creation policies are 
			AWS::AutoScaling::AutoScalingGroup, 
			AWS::EC2::Instance, and 
			AWS::CloudFormation::WaitCondition.

	Update Policy:-
		It define how and when the resource will be considered to be updated if any updates is needed.
		Its setting is depend on type of resource. 
		Below resources suport it:-
			AWS::AutoScaling::AutoScalingGroup
			AWS::Lambda::Alias
				For detail about update polict of ASG see ASG chanpters. 

	Deletion Policy:-
		With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. 
		You specify a DeletionPolicy attribute for each resource that you want to control. 
		If a resource has no DeletionPolicy attribute, AWS CloudFormation deletes the resource by default.
		[This policy comes in picture when stack is deleted not when stack is updated and due to update the underline resource is deleted]
		DeletionPolicy options:-
			Delete: 
				This is default value
			Retain: 
				AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted
				All kind of AWS resources support it.
			Snapshot: 
				For resources that support snapshots, AWS CloudFormation creates a snapshot for the resource before deleting it.
				Resources that support snapshots include:
					AWS::EC2::Volume
					AWS::ElastiCache::CacheCluster
					AWS::RDS::DBCluster
					AWS::RDS::DBInstance			

	UpdateReplacePolicy Policy:-
		This is very much like a Delete Policy, except it ran when the resources is supposed to replaces by new resource rather then straight deleting it.
			
		
