Why wwe need it :-
  Say you have a EC2s running on version1 of code and nw you wants to upgrade the version to next
  What you will do
  1. you have to stop the App or stop the EC2 if it is Blue/Greem deployment
  2. Now also ou have to configure the LB(if any) to not to sent traffic to in-deployment Ec2's
  2. now you have to login to instances of EC2 with proper user
  3. Now you have to upload the new code 
  4. Now you have to make chages in the configuration if needed and run some script if needed.
  5. Now you have start the App.
  6. Now you may also run a script for health check
  
The code deploy help the user to automate the above process of deploying. 
Here you have to provide 
  The Source: The location of 'Artifact' on S3 or github or other
    Inside the artifat lies
      1. The new Code
      2. Appspec.yml file.
      3. Scripts that you wants to run at events of deployment life cycle
  The Destination: Wher you wants to deploy, 
    On EC2
      - On EC2s of specific tags
      - On a Autoscalling group of EC2
      - On premise instances.
    On LAmbde
      ???????????????
 CodeDeploy is so smart that even if your EC2 is attached with any LB, 
 for in-place deployment it will go to that LB and instruct them to not to send any request to in-deploment EC2. and once done it again go to that LB and give him a green signal.
 If it is Blue/Green deployment then it will make sure to that the new instances are invoked and lated older one are killed.
      
      
 VVIMP: Code deploy automate the steps of deploment in the EC2/LEmbda But it not at all automate the deployment if a new artifact 
        come in the source location. For this you have to use the CodePipeline.
      
      
      
Some component of CodeDeploy ->

  #INSTCODEAG
  CodeDeploy Agent:- 
    if you wants to deploy the code with codedeply on EC2 you have to install the 'CodeDeploAgent' on EC2 instance.
    THis is one time activity for EC2. once it is installed you will be able to use the CodeDeploy for automation.
    Usually you should install it when you start a EC2 instance. Provide the proper script in the start script of EC2
    Script for installing CodeDeployAgent:-  
        go to https://aws.amazon.com/premiumsupport/knowledge-center/codedeploy-agent-launch-configuration/
        copy script and paste it in user data.
  
  How Codedeploy find the exact EC2's to deploy code on:-
    There is two possibility
    1. By Tags: In the CodeDeploy at the time of creating Deployment you can provide the specific tag. 
        Now CodeDeploy will find all the EC2(More than one possible) that has the same tag and deploy the new version on it.
    2. By Autoscalling Group: If you are using the autoscalling and so your instances invoked/killd based on usage. 
    
    
  AppSpec File:- 
    This is the file that must lie at the root of the zip file of you code.
    This has all the configuration related information for for deployment
    It has 4 parts:-
      1. Version : always 0.0, will be used in future
      2. OS: supported OS
      3. Files: 
        this has info of list of file that should be copid to destination. it has two piece of info
          - The file to be copied from
          - the should be copied to.
           EG:
              - source: /DepTest/
                destination: /MufProject/DepTest
          This will copy all the content inside the folder 'DepTest/' in the zipped bundle to the '/MufProject/DepTest' of EC2 instance
              - source: /Resources/
                destination: /MufProject/Resources          
          This will copy all the content inside the folder 'Resources/' in the zipped bundle to the '/MufProject/Resources' of EC2 instance
        So you can specify as many pair you wants here.  
          
      4. Hooks: 
        This has info about the scripts that should be ran on some specific time of deploument lifecycle.
        The sequence of hook always remain same bur some of the hook may or may not be called depending upon what config the dep has.
        The dep may happen one or more than one EC2. this lifecycle run for each of this EC2 and completely independent of each other. 
        Below is the list of hook with time when its called.
        
        > before and after the traffic blocked from LB
            BeforeBlockTraffic
            AfterBlockTraffic
                                  : Both on this event fire only and only if The candidate EC2 is attached to any Load Balancer
                                  
        > Hook for stopping the application
            ApplicationStop
                                  : CpdeDeploy do not know how he should stop the running application. 
                                    In this hook you provide the script to stop it. for EG. to stop apache server use 'stop server httpd'
                                    In this hook you should stop any process that you deemed to be necessary
         
          > Hook for new Installation time
            BeforeInstall
            AfterInstall
                                  : This two hook provide event before and after installation. you can use this event in install any necessary
                                    dependecy in the EC2. EG. to run a node server EC2 must need to have node installed. So put node install
                                    script in 'BeforeInstall'
                                    
        > Hook for strating the application
            ApplicationStart
                                  : CpdeDeploy do not know how he should start the application. 
                                    In this hook you provide the script to start it. for EG. to stop apache server use 'start server httpd'
                                    and for node app you give 'node src/server.js'
                                    In this hook you should start any process that you deemed to be necessary                                    
         > Hook for validation of installation
            ValidateService
                                  : This hook is very good to test if installtion is proper or not for eg. you can tset here if node is installed 
                                    or not or check if some process is running or not or check if some file is there or not.
         
         > before and after the traffic allowed from LB
            BeforeAllowTraffic
            AfterAllowTraffic
                                  : Both on this event fire only and only if The candidate EC2 is attached to any Load Balancer
         
         >>> Note : There is four more hook but they are not available for override. so unusable for now
                DownloadBundle, install, AllowTraffic, BlockTraffic
         
         
         The final sequence ->
         
            BeforeBlockTraffic  --->    [BlockTraffic]    --->    AfterBlockTraffic   ---->>---|          IF LB is attached to candidate EC2 then this three will be called otherwise not              
                                                                                               |
                                            |---------------------------<<<-------------------|
                                            |
                                            |
                                      ApplicationStop
                                            |
                                            |
     |---------<<<--------------------------|
     |
     |----> BeforeInstall       --->    [install]         --->    AfterInstall        ---->>---|
                                                                                               |
                                            |----------------------------<<<-------------------|
                                            |
                                            |
                                    ApplicationStart
                                            |
                                            |
                                    ValidateService       
                                            |                                                  
                                            |
     |---------<<<--------------------------|
     |
     |----> BeforeAllowTraffic       --->    [AllowTraffic]         --->    AfterAllowTraffic             IF LB is attached to candidate EC2 then this three will be called otherwise not  
      
        [****] -> is not avialable for use
        
    
    Verified Scenarios
       se 1: For In-place : EC2 : without any loadbalancer
                ApplicationStop
                BeforeInstall
                AfetrInstall
                ApplicationStart
                validateService
        se 2:  For In-place : EC2 : with loadbalancer
                BeforeBlockTraffic
                AfterBlockTraffic
                ApplicationStop
                BeforeInstall
                AfetrInstall
                ApplicationStart
                validateService
                BeforeAllowTraffic
                AfterAllowTraffic
                
        se 3:  For BG : EC2 : without any loadbalancer
              ????????????????????????????????
        se 4:  For BG : EC2 : with loadbalancer
             ????????????????????????????????????????????????

---------------------

Role of EC2-Tag, ASG, LB:-
  In th Codedeploy The EC2-Tag and ASG help the agent to finding out which EC2 he need to work upon. 
  The devops engineer do have to provice at least one of this information in step 6.5
  This has nothing to do with LB.
  Devops engineer have option either to specify the LB in step 6.7. 
  If he specify-
    For In-Place and BG both:-
       Then as discussed the deattach and attach of LB and EC2 take place on deployment Lifecycle
  If he do not:-
    For In-Place:-
        THen all the time of deployment the LB keep sending the traffic to EC2.
    For BG:-
        For BG it is must. BG is impposible without LB. you have to specify the LB if you are doiing BG deploynet.


--------------------------
Appspec file structure:-

                      version: 0.0
                      os: linux
                      files:
                        - source: /DepTest/
                          destination: /MufProject/DepTest
                        - source: /Resources/
                          destination: /MufProject/Resources
                      hooks:
                        BeforeBlockTraffic:
                          - location: scripts/beforeBlockTraffic.sh
                            timeout: 300
                            runas: root
                        AfterBlockTraffic:    
                          - location: scripts/afterBlockTraffic.sh
                            timeout: 300
                            runas: root  
                        ApplicationStop:
                          - location: scripts/stop.sh
                            timeout: 300
                            runas: root      
                        BeforeInstall:
                          - location: scripts/beforeInstall.sh
                            timeout: 300
                            runas: root
                        AfterInstall:
                          - location: scripts/afterInstall.sh
                            timeout: 300
                            runas: root      
                        ApplicationStart:  
                          - location: scripts/start.sh
                            timeout: 300
                            runas: root      
                        ValidateService:
                          - location: scripts/validateService.sh
                            timeout: 300
                            runas: root      
                        BeforeAllowTraffic:
                          - location: scripts/beforeAllowTraffic.sh
                            timeout: 300
                            runas: root    
                        AfterAllowTraffic:
                          - location: scripts/afterAllowTraffic.sh
                            timeout: 300
                            runas: root

-------------------------


    Hook Script File:-
      The script in hook file do couple of operation at time that hook run. This is how it shoul look like generall
      laets say you want to run somthing at BeforeInstall then
      in appspec.yml
        BeforeInstall: 
          - scripts/BeforeInstall.sh
          
      in scripts/BeforeInstall.sh
            #!/bin/bash
            echo "I am in BeforeInstall"
      
      This first line in this file will be the Shebang,  which tells the systen in which enviorment this file should ran.
      for Bourne shell envirment       #!/bin/sh
      for Bash envirment               #!/bin/bash
      for python envirment             !/usr/bin/env python
      for node envirment               !/usr/bin/env node
      
------------------
 
CodeDEploy and design hook for Node App
  1. in BeforeInstall hook install the nodejs via 
                          #!/bin/bash
                          echo "I am in BeforeInstall" >> 'home/ec2-user/mmmll.txt'
                          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
                          . ~/.nvm/nvm.sh
                          nvm install node
                          echo "	Node Version installed: $(node -v)" >> 'home/ec2-user/mmmll.txt'  
  2. in ApplicationStart Hook give
                          node /MufProject/DepTest/src/main.js
                          echo "	Your App is running at: $(sudo ss -tulpn | grep :3000)" >> 'home/ec2-user/mmmll.txt'  
         [Though command in ApplicationStart not working fine fioe now. why ??????????????????]                 
                          
------------------
Deployment Bundle:-
    This is the zip file whose strucure shouls look like this [but not neccessary]
    MuBundle.zip
      |--- AppSpec.yml    MUST
      |----Config         NAme could change, this is the folder of config files
      |----Scripts        NAme could change, this is the folder of scripts
      |----Source         NAme could change, this is the folder of source code.
    This look of zip is very primitive it can have some more files in it.  
      
      
  IAM Roles:-
    - You must create one Role for 'CodeDEploy' with policy ??????? attached. This role will grant the CodeDeploy to perform operation such as
        start EC2, terminate EC2, attache EC2 for LB, dettache it etc.
    - IF your code is on S3 then you must give EC2 the access of S3. So you should have a role with S3FullAccess policy attached to EC2
  So depending on this you should create two Role one for EC2(if you are usin S3) and one for CodeDeploy(Must)  
    
  
  Deployment Type:-
    There are two type
    1. In-Place:  
        In this kind of deployment the application is installed on existing running instances. they will be brifly taken offline
        then dettached from the LB (if any)
        then upgraded with new version 
        then attached to LB(if any) again
        and then finally started ahain
        This has couple of risk
          1. It take the instances offline so capacity is reduced
          2. roll back is difficult you have to re-deploy the older version once again
          Actully it is rarle user, it use only for the first time deployment.
    2. Blue Green  
          This pne is most widely user Deployment. This has certain featurewhich make it very reliable and practical to use.
          Why ?
            Because 2 risk of In-Place deployment mentioned above
          What is neccessary for BG?
            The candidate EC2 must be attached to the LB. if not then you cannot do the BG.
          How it work:
            Unlike in In-place wherein the upgraded app is deployed over same EC2. in BG 
            completely new EC2 instances will be Used or Created [depending on 'Environment configuration' user choose] for each candidate instance 
            and then 
            upgraded app is deployed over the new instances 
            and then
            all newly instances will be attached to LB (LB is must for BG)
            and then
            for sometime all the instances (old + new) will be subordinated to the LB
            and after some time [user can configure this time for sanity]
            the older one will be dettached from LB
            and then
            they older one will be terminated.
            
            So in nutshell you create the new instances and attach it to LB and kill older one.
            
          Advantages:-
            1. Reverting deployment way too easy. just attch the old EC2 with LB
            2. No capacity reduction 
          
          How New Instances are Created or Used:-
            There is two way for the new instance
            1. Use existing one:-
                The developer creat a instances MANUALLY and at the time of deployment he will give info about either its tag or ASG
                This is rarely used because it add the overhead task of creating the EC2 manually.
            2. Let Codedeploy create for you:-
                For this you must have the ASG. without ASG it will not work.
                Here you will give information about the ASG in deployment group. 
                later at the time of deployment the codedeploy agent will create a copy of that ASG with exactly same cofiguration 
                and create new instances in that ASG for you. then use those new instances foe new version and kill the older ones.
                This one is widely used. here you hjust have to set the proper ASG and codedeploy will do the rest.
            
  
  
  How to set the proper ASG for CodeDeploy:-
    Choose all that you want in your EC2's. jjust att the 'user data' script as mentioned in #INSTCODEAG. That it.
    so all the created instances in this ASG will have codedeploy agent preinstalled.
    
  Deployment Group:-
    Think of Dep Group as reusable deployment comfiguratiuion template which contain lot of config detail like, dep type, enviorment, 
    sucsses stratagy, LB detail, EC2 groups or tag, ASG etc.
    Once you created dep group with all this infor you can then for deployment you give two things
    1. The grouo that you wants to use
    2. The deployment bundle location 
  
  
  Steps:-
    1. Create 2 IAM role one for Ec2 and one For CodeDeploy
    2. Launce the EC2's and
      - provide them the tag 'MufCodeDEployTag' so codedeploy later can idetify it for deployment
      - provide hime the role for EC2 created in step 1 [if you are using S3 for deploymeny ]
      - Install codedeploy agent on those EC2 as described in section #INSTCODEAG
          To do this Quickly you can provide this script in 'start script' at a time of launch configuration.
    3. Now create a S3 bucket where in you will upload your code and later codedeploy get it from here for EC2.
         - Do remember to enable the versioning in this bucket
    4. Now this is time to create a zip package of you deployment unble. create a Deploymet Bulble with must have 'appspec.yml' file
       with sourcvve code, scripts and resources etc. then upload thisZip in S3 bucket
       You can use below command to upload it or can do it via aws console.
        ???????????????    
    - Now at this point you have your deployment package ready in S3, our destination EC2 is running, everyone have all necessary roles,
      From here we will see the steps we need to take for deployment of it.      
      
    5. Create CodeDeploy Application
      go to   AWS > CodeDEploy > Deploy > Application > Create Application
          - Name of Application [say MufCodeDeploy]
          - Platform [EC2 in our case]          
     
    6. Create Deployment Group:
        6.1  AWS > CodeDEploy > Deploy > Application > MufCodeDeploy > Deployment Group > Create 
        6.2  choose name [say MufCodeDeployGroup]
        6.3  choose the service role we created in step 1 for CodeDeploy so that it can perform crtain task.
        6.4  Select Deployment Type
            - If you are deploying for the firset time then you shoulg choose the in-place deployment otherwise b\g
        6.5 Set Environment configuration:   
            Here you nned to specify that how CodeDeplot will idetify the EC2 for Deployment, this depend on hwhat deployment type you have choosen
            For 'In-Place': 
                If you choosed 'In Palce' there is two possible way to identify the candidate EC2
                  1. By Tags: you provide the tag here so that all the EC2 (aws/on-primises) with this Tag will be deployed with app version
                      he tag of EC2 in Step 2 'MufCodeDEployTag' must be same as the one here.
                      IMP:- only key of the Tag is compared the value is not required at all.
                  2. By AutoScalling Group: 
                      You must choose the ASG here
                      All the EC2 running in this ASG will be upgraded with new version.
            For 'BG'  
                ????????????????????????????????????
        6.6: Now choose how you consider the deployment as successful
              AllAtOnce:   It means we will consider the deployment as success if all the EC2 deployment is successful
              HalfAtATime: It means we will consider the deployment as success if at least hallf of the EC2 deployment is successful
              OneAtATime:  It means we will consider the deployment as success if at least one of the EC2 deployment is successful
          So of course the safest option is  'AllAtOnce'
 
        6.7 LB:
          IF the EC2 are attached to any LB then select them, so that codedeploy can attach/dettach it while in deployment.
 
     7. Now finally Create deployment
        7.1  AWS > CodeDEploy > Deploy > Application > MufCodeDeploy > Create Deployment
        7.2  Select the deployment group created in step 6
        7.3  select thee source from S3 bucket and choose the bundle you uploaded to s3 
        Now you can see thst deployment is started and in aws cosole you can see its process.
     Done        
    So here the process is finished.
    
    SO notice here that 
    - The deployment group created in step 6 is reusable. if you created once then you can resue it again for next version of deployment
    - Step 7 is one time activity. you create a deployment and run it once for next release you have to re-create one more deployment.
    
    
    In the DodeDeploy you actully create a the app;ication and inside this application you can create diffrent deployment group
    later for actul deployment you can use those groups.
    
    Application
      |-------------- App1 [Info: Lembda]
                        |---------Deployment group1  [info: Blue/green, LB1, MyEc2Tag, AllAtOnce etc]
                        |---------Deployment group2  [info: In-place, LB2, MyEc5Tag, AllAtOnce etc]
                        |---------Deployment group3   ; ;     ;;  ; ; ;
      |-------------- App2 [Info: EC2]
                        |---------Deployment group11  [info: Blue/green, LB1, MyEc2Tag, AllAtOnce etc]
                        |---------Deployment group21  [info: In-place, LB2, MyEc5Tag, AllAtOnce etc]
                        |---------Deployment group31   ; ;     ;;  ; ; ;
    
    
    
    
   ----------------
   Log fie location of CodeDployAgent:-
    var/logs/aws/code-deploy
       
       
       
       
       
        
        
        
        
        
        
        
