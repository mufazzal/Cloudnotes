Why wwe need it :-
  Say you have a EC2s running on version1 of code and nw you wants to upgrade the version to next
  What you will do
  1. you have to stop the App or stop the EC2 if it is Blue/Greem deployment
  2. Now also ou have to configure the LB(if any) to not to sent traffic to in-deployment Ec2's
  2. now you have to login to instances of EC2 with proper user
  3. Now you have to upload the new code 
  4. Now you have to make chages in the configuration if needed and run some script if needed.
  5. Now you have start the App.
  6. Now you may also run a script for health check
  
The code deploy help the user to automate the above process of deploying. 
Here you have to provide 
  The Source: The location of 'Artifact' on S3 or github or other
    Inside the artifat lies
      1. The new Code
      2. Appspec.yml file.
      3. Scripts that you wants to run at events of deployment life cycle
  The Destination: Wher you wants to deploy, 
    On EC2
      - On EC2s of specific tags
      - On a Autoscalling group of EC2
      - On premise instances.
    On LAmbde
      ???????????????
 CodeDeploy is so smart that even if your EC2 is attached with any LB, 
 for in-place deployment it will go to that LB and instruct them to not to send any request to in-deploment EC2. and once done it again go to that LB and give him a green signal.
 If it is Blue/Green deployment then it will make sure to that the new instances are invoked and lated older one are killed.
      
      
 VVIMP: Code deploy automate the steps of deploment in the EC2/LEmbda But it not at all automate the deployment if a new artifact 
        come in the source location. For this you have to use the CodePipeline.
      
      
      
Some component of CodeDeploy ->

  #INSTCODEAG
  CodeDeploy Agent:- 
    if you wants to deploy the code with codedeply on EC2 you have to install the 'CodeDeploAgent' on EC2 instance.
    THis is one time activity for EC2. once it is installed you will be able to use the CodeDeploy for automation.
    Usually you should install it when you start a EC2 instance. Provide the proper script in the start script of EC2
    Script for installing CodeDeployAgent:-
              sudo yum update
              sudo yum install ruby
              sudo yum install wget
              cd /home/ec2-user
              wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install
              chmod +x ./install
              sudo ./install auto
   Finally Check if install is successful or not by
              sudo service codedeploy-agent status      
  
  How Codedeploy find the exact EC2's to deploy code on:-
    There is two possibility
    1. By Tags: In the CodeDeploy at the time of creating Deployment you can provide the specific tag. 
        Now CodeDeploy will find all the EC2(More than one possible) that has the same tag and deploy the new version on it.
    2. By Autoscalling Group: If you are using the autoscalling and so your instances invoked/killd based on usage. 
    
    
  AppSpec File:- 
    This is the file that must lie at the root of the zip file of you code.
    This has all the configuration related information for for deployment
    It has 4 parts:-
      1. Version : always 0.0, will be used in future
      2. OS: supported OS
      3. Files: 
        this has info of list of file that should be copid to destination. it has two piece of info
          - The file to be copied from
          - the should be copied to.
      4. Hooks: 
        This has info about the scripts that should be ran on some specific time of deploument lifecycle.
        This hook run the script provided by developen on EC2 at a time like
         - after/before Ec2 stop
         - after/before application installed
         - after/before LB attached/dettached
         - run some health check after deployment
         - run some test
         etc.
         
  Deployment Bundle:-
    This is the zip file whose strucure shouls look like this [but not neccessary]
    MuBundle.zip
      |--- AppSpec.yml    MUST
      |----Config         NAme could change, this is the folder of config files
      |----Scripts        NAme could change, this is the folder of scripts
      |----Source         NAme could change, this is the folder of source code.
    This look of zip is very primitive it can have some more files in it.  
      
      
  IAM Roles:-
    - You must create one Role for 'CodeDEploy' with policy ??????? attached. This role will grant the CodeDeploy to perform operation such as
        start EC2, terminate EC2, attache EC2 for LB, dettache it etc.
    - IF your code is on S3 then you must give EC2 the access of S3. So you should have a role with S3FullAccess policy attached to EC2
  So depending on this you should create two Role one for EC2(if you are usin S3) and one for CodeDeploy(Must)  
    
  
  Deployment Type:-
    There are two type
    1. In-Place:  
        In this kind of deployment the application is installed on existing running instances. they will be brifly taken offline
        and then upgraded with new version and finally start again.
        This has couple of risk
          1. It take the instances offline so capacity is reduced
          2. roll back is difficult you have to re-deploy the older version once again
          Actully it is rarle user, it use only for the first time deployment.
    2. Blue Green
    
    
    
  Deployment Group:-
    
  
  
  Steps:-
    1. Create 2 IAM role one for Ec2 and one For CodeDeploy
    2. Launce the EC2's and
      - provide them the tag 'MufCodeDEployTag' so codedeploy later can idetify it for deployment
      - provide hime the role for EC2 created in step 1 [if you are using S3 for deploymeny ]
      - Install codedeploy agent on those EC2 as described in section #INSTCODEAG
          To do this Quickly you can provide this script in 'start script' at a time of launch configuration.
    3. Now create a S3 bucket where in you will upload your code and later codedeploy get it from here for EC2.
         - Do remember to enable the versioning in this bucket
    4. Now this is time to create a zip package of you deployment unble. create a Deploymet Bulble with must have 'appspec.yml' file
       with sourcvve code, scripts and resources etc. then upload thisZip in S3 bucket
       You can use below command to upload it or can do it via aws console.
        ???????????????    
    - Now at this point you have your deployment package ready in S3, our destination EC2 is running, everyone have all necessary roles,
      From here we will see the steps we need to take for deployment of it.      
      
    5. Create CodeDeploy Application
      go to   AWS > CodeDEploy > Deploy > Application > Create Application
          - Name of Application [say MufCodeDeploy]
          - Platform [EC2 in our case]          
     
    6. Create Deployment Group:
        6.1  AWS > CodeDEploy > Deploy > Application > MufCodeDeploy > Deployment Group > Create 
        6.2  choose name [say MufCodeDeployGroup]
        6.3  choose the service role we created in step 1 for CodeDeploy so that it can perform crtain task.
        6.4  Select Deployment Type
            - If you are deploying for the firset time then you shoulg choose the in-place deployment otherwise b\g
        6.5 Set Environment configuration:   
            Here you nned to specify that how CodeDeplot will idetify the EC2 for Deployment, this depend on hwhat deployment type you have choosen
            For 'In-Place': 
                If you choosed 'In Palce' there is two possible way to identify the candidate EC2
                  1. By Tags: you provide the tag here so that all the EC2 (aws/on-primises) with this Tag will be deployed with app version
                      he tag of EC2 in Step 2 'MufCodeDEployTag' must be same as the one here.
                      IMP:- only key of the Tag is compared the value is not required at all.
                  2. By AutoScalling Group: 
                      You must choose the ASG here
                      All the EC2 running in this ASG will be upgraded with new version.
            For 'BG'  
                ????????????????????????????????????
        6.6: Now choose how you consider the deployment as successful
              AllAtOnce:   It means we will consider the deployment as success if all the EC2 deployment is successful
              HalfAtATime: It means we will consider the deployment as success if at least hallf of the EC2 deployment is successful
              OneAtATime:  It means we will consider the deployment as success if at least one of the EC2 deployment is successful
          So of course the safest option is  'AllAtOnce'
 
        6.7 LB:
          IF the EC2 are attached to any LB then select them, so that codedeploy can attach/dettach it while in deployment.
 
