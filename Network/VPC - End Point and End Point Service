Why we need EPS:-
  Suppose mufazzal make a application that do certain task. now he wants other to use it.
  How?
  - He can simply setup a typical model of Load balancer and expose the system to Internet.
    What is drawbach here
      1. The Application is expose to internet so any body can use it and so Mufazzal cannot encash it (assume no user registration/login there)
      2. The biggest drawback: The consumer of this service must must allow their own system to connect to internet to consume Mufazzal's Service.
    Say a bank need this service but the bank say red bold NO to conecting their system to internet.
    So what mufazzal will do if he has created a Application but he wants to share it without internet?
    
    Here comes the 'End Point Service' :-
      In simple word the EPS is the wrapper around the Network Load Balancer.
      So first you hae to create a NLB, This NLB can be spread across multiple AZs (and subnet) 
      This NLB will have its own Target Group, ASG etc.
      
      Once NLB is ready you can use this NLB to create the EPS.
      To create EPS go to VPC > Endpont Service > Create
      - Select NLB [this will by default select the AZ and Subnet as the selected NLB has them attached]
      - Auto Acceptence: check if you wants to allow anyone to use your service, without your manual allowing process.
      Done.
      
      The EPS simply expose the NLB to the consumer whos is allowed to use the service (not to full internet).
      This EPS service will available only in those AZs which are coming with NLB (not in other AZ). 
      So consumer has to make sure he has to be in at least one of that AZ if he wants to consume.
      
      After that you will get the DNS name for that Service. This look like below
      'com.amazonaws.vpce.us-east-1.vpce-svc-03edf0bb1f6f09c9d'

      Now any one in this universe can use this DNS name to consume ur service.
      Suppose alex in USA wants to use this service
      Q. What Alex need to do?
      A. Alex need to creat the Endpoint and request Mufazzal to allow him to use the Service.
      
      Now How Alex will create the Endpoint?
        Please see Interface EP.
      
      Now AWS will send a request to Mufazzal saying, Het Alex wants to use ur service.
      once mufazzal accept. its status comes available for Alex.
      
      In the end you will get the 'DNS names' of EP and its formate is
      'vpce-03669075e10b5dfa6-scr493ip.vpce-svc-03edf0bb1f6f09c9d.us-east-1.vpce.amazonaws.com'
      
      now if Alex do the 
      curl vpce-03669075e10b5dfa6-scr493ip.vpce-svc-03edf0bb1f6f09c9d.us-east-1.vpce.amazonaws.com:80, he will reach to NLB of Mufazzal's EPS.
      The url will not lead the alex to internet, instaed to mufazzal's EPS directly via aws backbon network.
      
      Notes: 
        Though in creation of endpoint you select/unselect AZs, but it has no impact on which subnet/Az can use this EP and which cannot.
        - This is only for higher availability purpose.
        - Q: does the choosed subnet need to have internet access (IGW attached) ?
          NO! becoz the traffic never leave the AWS ecosystem. this generate in VPC of alex and reach to Mufazzal's NLB via AWS backbon network.
            it never touches the iternet. So no IGW needed for Alex and mufazzal both.
        - EP is created at VPC level (not at subnet level) so it can be use in any EC2 lying in any subnet of that VPC.
        - The EP and EPS both must lies in same region so provider and client must be in same region and at least one AZ of both must overlap.
        - This mechanics of connection between EP and EPS is called 'AWS Private Link'
        - Also its way too fast the typical internet.  
        - A service provider can configure their service to accept interface endpoint requests automatically or manually
        - A service provider cannot delete an interface endpoint to their service. Only the service consumer that requested the interface endpoint connection can delete the interface endpoint
        
 
 So via this set up Alex' VPC and Mufazzal's service can communicate without internet via AWS backbone.
---------------------
   Now surprise!
   Every AWS provided service is also have a affliated End point service.
   EG:
    SQS has the EPS 'com.amazonaws.us-east-1.sqs'
    SNS has the EPS 'com.amazonaws.us-east-1.sns'
    EC2 has the EPS 'com.amazonaws.us-east-1.ec2'
    RDS has the EPS 'com.amazonaws.us-east-1.RDS'
    ...
    ...
    S3  has the EPS 'com.amazonaws.us-east-1.S3'            ***
    dynamodb has the EPS 'com.amazonaws.us-east-1.dynamodb' ***
    
    *** Condition apply
    
    So to use any of the AWS backed service you do not need the internet of internet getway.
    you can simply create the endpoint for those service (just like alex did above) and use that endpoint for those services.
    You wil not even need the Internet or NAT getway to reach to those AWS services if you use EP.
    
    There is two kind of End point here
    1. Interface EP
    2. Gateway EP
    
    Creation: To Creat the EP you will need 
      1. Service name of service:-
          This Service name[not DNS name] identify from the 100s of services. This could be from 
            - AWS provided services like EC2, Kenesis, SNS.
            - AWS Market place Services
            - Custom made services like one of Mufazzal's service.
      2. Select VPC
      3. For Interface EP only: 
          Select AZ/Subnet:
            You need to select the VPC and then the subnet/AZ. You will see the list of supported AZs only. and you can select only one subnet per AZ.
            In case of Custom made services:
              Suppored AZ/Subnet are super set of 'AZ of NLB of Mufazzal`s Service' and 'AZ of Alex`s VPC'.
            In case of AWS provided services:
              They are of course supported in all the AZs.            
      4. For Interface EP only:-
            Select SG to define what instances in the VPC can or cannot send traffic to this EP.
      5. For Gateway EP:-
          Select the RT where so that the attched subnet can use this Gateway
      6. Write EP policy to define who can and cannot access this EP.      
      
      - For each interface endpoint, you can choose only one subnet per Availability Zone
      - each interface endpoint can support a bandwidth of up to 10 Gbps per Availability Zone. and bursts of up to 40Gbps
      - An interface endpoint supports TCP and IPv4 traffic only
      - Endpoints are supported within the same Region only. You cannot create an endpoint between a VPC and a service in a different Region
          So in us-east-1 you can configure 'com.amazonaws.us-east-1.ec2' not 'com.amazonaws.us-west-1.ec2'

    Interface EP:  
      - For higher availability you shoud select more then one Subnet in step 2. 
      - This does not effect access of endpoint in any unselected subnet
      - You do not need to update any RT here. because traffic will routed to ENI 
      - In background Actully when you create the EP, it will create the ENI in each subnet selected in step 3
      - This ENI will never do not have public IP, this ENI simply connect the AWS backbone network and give path to reach to the service specify by Service name in step 1.  

      Private DNS name of 'Interface EP':-
        This is enabled by default for 'AWS services' and 'AWS Marketplace Services'.
        Their is two kind of DNS name here for each EP. say you have created the Endpoinr for EC2 in us-west-2 region. then this are
        1. EP-specific DNS names: 
            For a given EP you select the multiple subnet. in each selected subnet their lies a ENI and with each ENI there is a DNS name and private IP attached.
            So if you have selected 2 suubnet in two AZ. you will have 2 private IP and 2(+1) DNS name like below. 
             vpce-0c65661aa4fb28c7f-2egumams.ec2.us-west-2.vpce.amazonaws.com
             vpce-0c65661aa4fb28c7f-2egumams-us-west-2c.ec2.us-west-2.vpce.amazonaws.com
             vpce-0c65661aa4fb28c7f-2egumams-us-west-2a.ec2.us-west-2.vpce.amazonaws.com
        2. Default DNS name for service:
            ec2.us-west-2.amazonaws.com
            
        If private DNS option is enabled then all the DNS listed above will resolve the IP of ENI of the EP. and so for all those DNS calls the request will pass through the EP.
        But if you disable the private DNS option then request via 'Default DNS name for service' will pass from the IGW or NAT Gateway not from EP. 
          for 'EP-specific DNS names' it will pass from EP.
        Note: aws-sdk/CLI/console they all in the end make the api calls by 'Default DNS name' of that service. so if Private DNS is enabled then request will pass from 'EP'
        
    Gateway EP:  
      The Gateway EP work diffrent then Interface EP. here No ENI comes in picture instead traffic is routed through the Rout table.
      When you select the RT in step 5, Those RT will be updated with below entery.
      pl-xxxxxxx:   vpce-id
      Here pl-xxxxxxx reprsent the collection of public IP for selected AWS Service in that region. Amazon take care of managing those IP collection.
      So any traffic destined for that AWS service will now routed through the EP[only if attached RT of that subnet is appropiate]. 
      
      Note: pl-xxxxxxx is called 'AWS prefix list ID' and reprsent the IPs of that service in given region.
      
      - Private DNS is not supported with Gateway EP. traffic routed through route in RT. 
      - Unlike Interface EP here no ENI is created. So no SG, Subnet, AZ need to be selected.
      - It does not have EP-specific DNS name
      - This is used for S3 and DynamoDb only. 
      - You cannot use 'AWS prefix list ID' in CIDR of NACL. but you can use it in CIDR of SGs
      - You must update the SG of your instances to allow outbound traffic flow to 'AWS prefix list ID'.
      - you cannot have multiple endpoint routes to the same service in a single route table. 
      - you can    have multiple endpoint routes to the same service in a diffrent route table
      - you can    have multiple endpoint routes to the same or diifrent service in a diffrent route table
      
-------------------------------------
  Inter-Region VPC end point:-
    EPS work if client and provider (AWS service or user made) are in same region. but if they are in diffrent region then you have to use
    VPC-Peering and private link together to use the EPS across region.
      
      
      
      
      
      
      
      
      
      
