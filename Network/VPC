VPC as its name suggest is a virtual cloud in the AWS system. think of VPC as fulluy isolated data center inside the your AWS account
An AWS account can have as many VPC as he wants. each is isolated with other. 

The VPC lies one and only one region.
Subnets inside that VPC can lie in multiple any AZ of that region
But a single subnet itself lie only in one AZ.

Below are the building element of VPC:-
  1. Subnets
  2. Route Table
  3. Internet getway 

Below are the configuration elements in VPC
  1. CIDR block for the VPC
  2. CIDR block for each subnet

Below is Security Components:-
  1. SG
  2. Network ACL  

VPC and VPC
  1. you can connect two vpc
vpc in one region can be connect to vpc in other region
vpc of one aws account can be connect to vpc to other aws account
if vpc A is connectted to B
and B is to C 
it does not mn A can connect to C


When we make any application we may need lot of resources, like 10s of DB, 100s of CPU, 10s of LB etc.
As we have studuied in Networking chaprer that number of public IPv4 is limited so we cannot give all of them public IP.

For this we generally create private network.
This is done via VPC in aws. VPC stand for Virtual Private Cloud.

By VPC you can create a isolated private cloud in the aws system.
BAsically VPC are small isolated space where the nodeof an application lies.

Suppose you wants to create 2 application one for shop and one for Bank in same AWS account.

For this we will create two VPC:-
  1.  AWS COnsole > VPC > Create VPC
  2.  Select CIDR block
        TRhe CIDR block availabe in any VPC is in range of 10.0.0.0/16  to   10.0.0.0/24.
        Depending on your requirment you can choose the CIDR size. This CIDR rage of IP is lie in resrved range of PRivate NEtwork 
        [see Network.txt IP reservation table ]
        If you take 10.0.0.0/16 CIDR then you have total 2^16 IPs avaialaiable from 10.0.0.0 to 10.0.255.255
        If you take 10.0.0.0/18 CIDR then you have total 2^14 IPs 
        If you take 10.0.0.0/24 CIDR then you have total 2^6 IPs avaialaiable from 10.0.0.0 to 10.0.0.255
        ...
  Each VPC is isolated Private network in itself, The yiu can use any reserve IP in any VPC for a sigle node only at once.
  But you can use the same IP in another VPC again.
  
  EG: in muffy home private network(VPC-muf) you can have an IP 192.168.0.100 also
      in moiz home private network(VPC-moiz) you can have an IP 192.168.0.100
        
   
   Suppose for two pplication of shop and Bank you create a two VPC each
    VPC-Shop   CIDR  10.0.0.0/24      -> App is relativly small so may not need lot of Node so lets have 2^8 IP
    VPC-Bank   CIDR  10.0.0.0/16      -> App is relativly big so may not lot of Node so lets have 2^16 IPs
    
    
    Subnet:-
      The next IMP building block come in VPC is subnet. Once tou craeted the VPC you can devide the VPC in another level of small private network
      You can create as many subnet in a VPC you wants. The CIDR block you have selected for VPC will be shared among all those Subnet.
      Subnet is of two type
        a.  Public Subnet: those who are connected to internet
        b.  Private Subnet: those who are not connected to internet
      Subnet are very useful to devide the resources and partition them among diffrent department of any organization.
      Creating Subnet:-
         1.  AWS COnsole > Subnet > Create Subnet
         2.  Choose name
         3.  Select the VPC
                The Subnet will lie in this VPC
         4. CIDR of subnet
                This CIDR is subset of VPC-CIDR. If the subnet going to have many nodes then you should take large CIDR 
                to register good amount of IPs (avaialble in VPC-CIDR)
         5. Availability Zone: Select the AZ of your choice ar leave to to choze by amazon itself.
         DONE                    

      lets create a subnet for BAnk:-        
        sub_finance            10.0.1.0/24          out of 10.0.0.0/16 [2^16] IP lets reverve 10.0.1.0/24 [2^8] IP for finance deparments apps
        sub_Insurence          10.0.2.0/24          out of 10.0.0.0/16 [2^16] IP lets reverve 10.0.2.0/24 [2^8] IP for finance deparments apps
        sub_intBanking         10.0.3.0/24          out of 10.0.0.0/16 [2^16] IP lets reverve 10.0.3.0/24 [2^8] IP for finance deparments apps
        sub_staticweb          10.0.4.0/30          out of 10.0.0.0/16 [2^16] IP lets reverve 10.0.4.0/30 [2^2] IP for finance deparments apps
        
      Simillarly you can create the Subnet for VPC-Shop  
        sub_account            10.0.0.128/26          
        sub_eccomerce          10.0.0.64/28          
        sub_inventory          10.0.0.32/28          
        sub_staticweb          10.0.0.16/30    
        USE https://cidr.xyz/ for detail calculation.
        
      Creating subnet is a halfway task, It is not usable untill you attach the Routing table on it.
        
    Routing Table:-
      The next IMP building block in VPC is Routing Table. 
      The routing table is simplly a table which has entery of IP or CIDR against the Node. 
      It is actully a master table for all the routing decision happen in Subnet.
      
      A routing table can be attach to multiple Subnet But a subnet can have one ane only one Routing table attach to it.
      But a routing table can be attach to only one VPC. Means all the subnet that are attach to any routing table must belongs to same VPC.
      So its relation is
        
                                Subnet 1      
        Routing Table--------   Subnet 2
                                Subnet 3
        
      
      Creating Routing Table:-
        1. AWS COnsole > VPC > Create Routing Table
        2. Select VPC
        DONE
        After this go to that Rputin table > Routes > Edit Routes
        Now set the Destination and Target map, The destination id a CIDR block and target could be Internet Getway, NAT Getway, Instance etc.
        Also one entery is this map is aleays there and uneditable:
        Destination                 Target
        10.0.0.0/16	                Local                       -> The default unchangable entry, this make sure that all the IP of type 10.0.***.*** remain inside the selected VPC
        0.0.0.0/0                   <select Internet Getway>    -> If you choose internet getway here then those CIDR block will be redirected to pulic internet
        0.0.0.0/0                   <select NAT Getway>          -> This also enableinternet Access but at one sided only
        
       Route Table and Internet Access  Getway:
        Depending on the security of any subnet you can either allow the internet traffic directly in subnet or not.
        There is two way to handle Public Internet traffic in VPC
          1. Internet Getway 
          2. NAT Getway 
          
        Internet Getway:   
          If nodes in your subnet (Public Subnet) has to accessible form internet. EG. if one of your node is EC2-webserver instance
          and it has to accessible via www, then you should have a Internet Getway attach to that subnet.
          How:-
            1. Create Subnet
            2. Create Internet Getway 
                2.1  AWS > VPC > Internet gateways > Create internet gateway
                2.2 Choose Name 
                DONE
            3. Create Routing table and place this Entry
                0.0.0.0/0                   <select Internet Getway created in step 2>
                This entry will allow all public internet to reach to inner node 
            4. Now attach the routing table created in step 3 to Subnet created in step 1
              DONE'
            
            Detail EG:
              say you have an EC2-webserver with public IP = 22.45.32.63 and DNS name = www.muffiwebserver.com
              Now assume gourav access it for his PC like 'ssh 22.45.32.63 ***' or www.muffiwebserver.com then
              Internet getway will allow this happen.
              
           Public Subnet:- 
              Any Subnet will become a public subnet if an 'Internet Getway' is attached to it.
              Or more preciecly, a subnet who is attached to routatble which is assosiated with 'Internet Getway'
              By default all the Subnet created are prvate and has no internet getway attached.
              
              
           NAT Getway:-
              
              Why NAT Getway required
              Suppose you created a web app wirth some public and privatesubnet
              Now public subnet has many EC2-webserevr and as they are assosiated with their public IP they can reached from the public-internet also
              like www.mufifnance.com or ssh 56.34.67.123 etc.
              Now we also have couple of private subnet. This subnet can have manny DB-instace or EC2-instance (for computing)
              those instances are not reacable by ssh or www at all.
              This is fine because we de not wants them to exposed to public-internet.
              But there is a patch-
                Ok! Nobody can reach to Nodes inside private subnet.
                But what if the Node itself wants something from internet? What if they wants to update their OS or patches. 
                Or some computing instance wants to acceess an API from internet?
                To solve this comes a 'NAT Getway'               
              So In nutshell-
                  NAT Getway do not allow any InBound comunication initiated from the Public Internet.
                  NAT Getway only allow the OutBound communication intiated from withine the subnet
              
              What you required to create an NAT Getway and Attach it: 
                1. A Public Subnet
                    NAT Getway do provide the one-way-initiated public internet access to private Subnet, but the 'NAT Getway' itself 
                    reside in the Public Subnet.
                2. A Elastic IP:-
                    NAT GEtway is a point that is exposed to public internet directly (Though one way)
                    So it does have one Public Elastic IP (not the reserved one like 10.0** or 192.168.**) assosiated with it.
                    
              Creating :-
              1.  AWS > VPC > NAT gateways > Create NAT gateway
              2.  Select the Subnet(Must be Public one who has internet getway attached to it) where this Gatway wwill reside
              3.  Select the Public Elastic IP and press Create.
              4. Done.
              Now the NAT getway is created, now lets connect this nat-getway to the private subnet
              for this 
              5. Open the route table of the private subnet and place this Entry
                  0.0.0.0/0                   <select NAT Getway created in step 4>
                  This entry will allow all one-way-initiated(from inner side of private subnetsubnet) public internet traffic. 
              DONE'
              

In Public Subnet - Internet Getway:-
  Accessible via public internet - initiated from outside
    Yes! if :  The component attched with an public IPv4
      How - SSH 45.45.76.88 or https://45.7.5.6
    No! : The component not attched with an public IPv4
  Have Access to public internet - initiated from inside
    Yes  eg. calling an googlmap api from EC2 webserver
  Access among sibling components of same subnet : inter-subnet
    ?????
  Access among sibling components of diffrent subnet : inter-vpc
    ?????

In Private Subnet - NAT Getway:-
  Accessible via public internet - initiated from outside
    No
  Have Access to public internet - initiated from inside
    Yes  eg. calling an googlmap api from EC2 webserver
  Access among sibling components of same subnet : inter-subnet
    ?????
  Access among sibling components of diffrent subnet : inter-vpc
    ?????
              
TODO:-
Creat sophisticated VPC, Subnet, getway and create EC2 instances inthem
Now use traceroute to detect nodes on the way.
          
          
          
       
        
--------------

Why NAT Getway has Elastic IP but not Internet Getway - 
  Internet getway a simple gate from where to and fro public internet traffic is allowed. 
  It assume that all the component living inside the subnet do have a public IPv4 assignet to them. also they have the private IP [1.0.*.*]
  So if thay wants to to communicate via internet or sombody from public internet wants to communicate with them
  then the inner component hav an unique IP for mapping the address.
  Say for EG and webserver(EC2@97.98.67.87) inside the public subnet call www.google.con/api
  then
  the request first go to internet getway, it simply let it pass, the rresponse come and it simply let response go back to EC2@97.98.67.87.
  Also if 
  sombody wants to load https://97.98.67.87/api then the request first first reach to Internet Getway then IG simply let it go 
  inside to the node of which the 97.98.67.87 is IPv4 address.
  
  
  But NAT getway is bit diffrent, 
  First it has to lie in a public subnet but it provide service to private one.
  It assume that no component sitting inside has public IPv4. those do have the private IP[1.0.*.*]
  If a compent say '10.0.*.*' make a request to 'www.google.com'. It will first go the NG, NG do allow communication initiated from inside
  But before allowing it, the NG make a entry that 10.0.9.8 has requested the www.google.com.
  Now NG2@65.76.87.34 forward the request to Internet Getway of the public subnet in which it reside
  Now request then go to internet getway, it simply let it pass, the response come and it simply let response go back to NG2@65.76.87.34.
  response comes to NG2@65.76.87.34
  NG chack the mapping that who Requseted this [www.google.com]
  The mapping say 10.0.9.8 has requested it so the respponse now forwarded to 10.0.9.8
  Also
  sombody wants to load https://10.0.9.8/api then there is no way to do this, because first it is an private IP which cannot be acceses via 
  public internet. and NAT getway denied any entery requested from outside.
  
  
  It simplay an agent of private subnet sitting in public subnet 
  
  
  
  
  
  --------
  
  Steps to creating a private and public subnet system.
  I assume you have created VPC and subnets in it
  step 1:  Create an internet getway. This need nothing just type a name and u are done 
        lets creat MufIG
  step 3:  Route tables for public subnet first:
        type name and chose the VPC that you have already created. 
        say the name is 'MufPubRtTable'
        Now set the route somting like        
        10.0.0.0/16	      local	
        0.0.0.0/0          <The one you created in step 1> MufIG
  Step 4:           
      attach the routtable 'MufPubRtTable' to the subnet to whome you wants to be public one
      say you attach it to 'MufPubSubnet'
  
  step 5:  Create an elastic ip. this also need nothing just press the allocate button and u have one
        say you got 84.67.76.45.   We will use this elastic IP for private subnet part
  step 6:  Create NAT Getway:
        First the chose the subnet (A public one it must be) in which this AG will reside.
        lets choose 'MufPubSubnet', because this is public subnet 
        if you wants you can give name at NAG list page
        say its name is 'MufNAG'
        Done
  step 7
        Route tables for private subnet :
        type name and chose the VPC that you have already created. 
        say the name is 'MufPriRtTable'
        Now set the route somting like        
        10.0.0.0/16	      local	
        0.0.0.0/0          <The one you created in step 6> MufNAG
  step 7: 
        attach the routtable 'MufPriRtTable' to the subnet to whome you wants to be private one
         say you attach it to 'MufPriSubnet'
  
  
  Done
  



----------
Default Security Group of VPC;-
  Every VPC by default has one ready to use security group.
  This has all the inbound and outboud open.
-------------

DEfault VPC and DEfault Subnet:-
  Every AWS account di have one default VPC and in that default VPC also lie a one default subnet.
  MAny of the nodes we create like EC2, RDS are actully created in that default VPC ans in that VPC it lies in its default subnet.
  You canchange VPC and subnet of your choice if you wants. but by default it lies in default
  
  
User created VPC and DEfault Subnet:-
  Only default VPC can have default subnet. not other.  
  
  
---------------------------------------------

Which AWS resources could lie inside the VPC and which cannot:-
  The VPC in very simple term is a network. and network contains node. 
  and every node must have an IP (private is must and public if needed). So this node then will be reachable by thos IPs.
  Also vice-versa any item which is reachable by Ip has to lie in the network to work. if not then it is impposible to use.
  
  
  Now what AWS resources could be the Node of the VPC or which could not:-
    You have to be a Node in a network if 
    - You need to communicate with any other node the the network
    - You wants others to reach to you in the network.
    
    EC2: The EC2 isntance has to be a Network Node. It cannot be used without network. Because you can use EC2 only if he has an IP.
      Its impossible to create a EC2 without IP.
      Also EC2 should be reach and can be reachable in the network. 
      
      Thats why you must select the VPC for creating EC2.
      >> SO EC2 will always be a node in VPC.  it cannot live independently.
    
    LB: This also has to be in network. because it need to communicate to EC2s.
        SO LB cant exist outside VPC.
    
    S3: S3 is not a network node. When you create a S3 bucket you can access them via url of that bucket. This bucket do not have any 
      Public or private IP.
      Also Nither the S3 bucket itself ever has to communicate with any of node
      >> SO S3 bucket can never be a node in VPC.
    
    DynamoDB:
      Same as S3. It do not live in VPC.
    
    RDS: RDS also get a public IP (as well as DNS name).
      >> SO RDS will always be a node in VPC. it cannot live independently.
      
    Lambda: This is tricky. 
      Lambda also do not have any IP assosated with it so it live outside VPC.
      But some time you may need to commnunicate with some part of VPC.
      EG. calling an webapi that is hosted over EC2 liying in VPC or accessing an RDS live in VPC.
      Though it is impposible to plave the Lambda in the VPC. 
      But with use of Elastic Network Interface you can actully bridge the lambda with VPC. and give a IP to the labda temporarily.
      How: see lambda.txt.
      
      
----
  Importance in Security Group in VPC:-
    Security group are tied to VPC in which they are created. you cant use them for other VPC ites.
    Any node in VPC Must Must and Must have a SG attachet to it. It is impossible to have a node without SG attached.
    The SG is actully a mandatory layer of security around the Node in VPC for traffic control.
    
    Thats is why EC2, LB, RDS, Lambda(with ENI/VPC enabled) can be created without SG.
    
    
    
  









      
      
      
